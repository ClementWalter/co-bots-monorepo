{
  "address": "0xc19d54BC8723636D7EFad37dbF7492663660Cc71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BITS_PER_COORDINATES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BITS_PER_FILL_INDEX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEIGHT_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectsBytes",
          "type": "bytes"
        }
      ],
      "name": "decode32Rects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rectsBytes",
          "type": "bytes32"
        }
      ],
      "name": "decode8Rects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectBytes",
          "type": "bytes"
        }
      ],
      "name": "decodeRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectBytes",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "offsetX",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "offsetY",
          "type": "uint8"
        }
      ],
      "name": "decodeRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fillPalette",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "color",
          "type": "bool"
        }
      ],
      "name": "getCoBotAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        }
      ],
      "name": "getCoBotBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        }
      ],
      "name": "getCoBotImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "color",
          "type": "bool"
        }
      ],
      "name": "getCoBotItems",
      "outputs": [
        {
          "internalType": "uint256[10]",
          "name": "",
          "type": "uint256[10]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "traitEncodedBytes",
          "type": "bytes"
        }
      ],
      "name": "getImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNounishItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eyesIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "antennaIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feetIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        }
      ],
      "name": "getRandomItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eyesIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "antennaIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feetIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToadItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eyesIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "antennaIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feetIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "traitEncodedBytes",
          "type": "bytes"
        }
      ],
      "name": "getTrait",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTraitBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_layerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_itemIndex",
          "type": "uint256"
        }
      ],
      "name": "getTraitIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWizardItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eyesIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "antennaIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feetIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerIndexes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_fillPalette",
          "type": "bytes"
        }
      ],
      "name": "setFillPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_layerIndexes",
          "type": "bytes"
        }
      ],
      "name": "setLayerIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_traitPalette",
          "type": "bytes"
        }
      ],
      "name": "setTraitPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_traitPaletteIndexes",
          "type": "bytes"
        }
      ],
      "name": "setTraitPaletteIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "color",
          "type": "bool"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPalette",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPaletteIndexes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89d4c929c53034feb5af8a59180c8d8fbff94eccf166e600fd48471ea9f3f180",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xc19d54BC8723636D7EFad37dbF7492663660Cc71",
    "transactionIndex": 24,
    "gasUsed": "3614150",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000001000000000000000000000000010000000001000000000000000000000000000000000000000000000001000000000000000000020000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x925bdbc76e9063e2d192d285d28f9b1100c8716ba29e5cd83d9feee14d034dc0",
    "transactionHash": "0x89d4c929c53034feb5af8a59180c8d8fbff94eccf166e600fd48471ea9f3f180",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 10310242,
        "transactionHash": "0x89d4c929c53034feb5af8a59180c8d8fbff94eccf166e600fd48471ea9f3f180",
        "address": "0xc19d54BC8723636D7EFad37dbF7492663660Cc71",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x925bdbc76e9063e2d192d285d28f9b1100c8716ba29e5cd83d9feee14d034dc0"
      }
    ],
    "blockNumber": 10310242,
    "cumulativeGasUsed": "5724338",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "015ca5d8d22eaca91756f9eb1d89db5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITS_PER_COORDINATES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_PER_FILL_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"}],\"name\":\"decode32Rects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rectsBytes\",\"type\":\"bytes32\"}],\"name\":\"decode8Rects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectBytes\",\"type\":\"bytes\"}],\"name\":\"decodeRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectBytes\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"offsetX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offsetY\",\"type\":\"uint8\"}],\"name\":\"decodeRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"getCoBotAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"getCoBotItems\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"traitEncodedBytes\",\"type\":\"bytes\"}],\"name\":\"getImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNounishItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"getRandomItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToadItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"traitEncodedBytes\",\"type\":\"bytes\"}],\"name\":\"getTrait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWizardItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerIndexes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_fillPalette\",\"type\":\"bytes\"}],\"name\":\"setFillPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_layerIndexes\",\"type\":\"bytes\"}],\"name\":\"setLayerIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPalette\",\"type\":\"bytes\"}],\"name\":\"setTraitPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPaletteIndexes\",\"type\":\"bytes\"}],\"name\":\"setTraitPaletteIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPaletteIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFill(uint256)\":{\"details\":\"3 bytes per color because svg does not handle alpha.\"},\"getTrait(bytes)\":{\"details\":\"Decode the rect and returns it as a plain string to be used in the svg rect attribute.      One rect is 4 bytes so 8 rects is a bytes32.      With 20 bytes32, we have up to 160 rects per trait / co-bots actually if we concat the bytes first.      This magic number comes from a small data analysis of the traits. We use the fact that an empty      bytes32 will lead to an empty rect (width and height 0).\"},\"getTraitBytes(uint256)\":{\"details\":\"Retrieve the bytes for the given trait from the traitPalette storage.\"},\"getTraitIndex(uint256,uint256)\":{\"details\":\"This function lets map from layerIndex and itemIndex to traitIndex.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFillPalette(bytes)\":{\"details\":\"Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\"},\"setLayerIndexes(bytes)\":{\"details\":\"Traits are stored as a plain list while the rendering works with layer and items within each layer.      Since each layer has a variable number of items, we store the index of the first trait of each layer.\"},\"setTraitPalette(bytes)\":{\"details\":\"All the rects are concatenated together to save gas.      The traitPaletteIndexes is used to retrieve the rect from the traitPalette.\"},\"setTraitPaletteIndexes(bytes)\":{\"details\":\"Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/co-bots/CoBotsRenderer.sol\":\"CoBotsRenderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/co-bots/CoBotsRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport {Integers} from \\\"../lib/Integers.sol\\\";\\nimport \\\"../interfaces/ICoBotsRenderer.sol\\\";\\n\\n/*  @title CoBots Renderer\\n    @author Clement Walter\\n    @dev Encode each traits as a \\\"sum\\\" of `rect`, each rect being stored using 4 bytes\\n*/\\ncontract CoBotsRenderer is Ownable, ReentrancyGuard, ICoBotsRenderer {\\n    using Integers for uint8;\\n    using Strings for uint256;\\n\\n    // We have a total of 4 * 6 = 24 bits = 3 bytes for coordinates + 1 byte for the color\\n    // Hence each rect is 4 bytes\\n    uint8 public constant BITS_PER_COORDINATES = 6;\\n    uint8 public constant BITS_PER_FILL_INDEX = 8;\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n    string public constant SVG_TAG_START =\\n        \\\"%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20viewBox=%270%200%2045%2045%27%20width=%27450px%27%20height=%27450px%27%3e\\\";\\n    string public constant SVG_TAG_END =\\n        \\\"%3cstyle%3erect{shape-rendering:crispEdges}%3c/style%3e%3c/svg%3e\\\";\\n\\n    address public fillPalette;\\n    address public traitPalette;\\n    address public traitPaletteIndexes; // where each trait begins in the traits' palette\\n    bytes public layerIndexes; // the index of the first item of each layer, uint8/bytes1 for each layer\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////  Rendering mechanics  /////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /// @dev Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\\n    function setFillPalette(bytes calldata _fillPalette) external onlyOwner {\\n        fillPalette = SSTORE2.write(_fillPalette);\\n    }\\n\\n    /// @dev All the rects are concatenated together to save gas.\\n    ///      The traitPaletteIndexes is used to retrieve the rect from the traitPalette.\\n    function setTraitPalette(bytes calldata _traitPalette) external onlyOwner {\\n        traitPalette = SSTORE2.write(_traitPalette);\\n    }\\n\\n    /// @dev Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\\n    function setTraitPaletteIndexes(bytes calldata _traitPaletteIndexes)\\n        external\\n        onlyOwner\\n    {\\n        traitPaletteIndexes = SSTORE2.write(_traitPaletteIndexes);\\n    }\\n\\n    /// @dev Traits are stored as a plain list while the rendering works with layer and items within each layer.\\n    ///      Since each layer has a variable number of items, we store the index of the first trait of each layer.\\n    function setLayerIndexes(bytes calldata _layerIndexes) external onlyOwner {\\n        layerIndexes = _layerIndexes;\\n    }\\n\\n    /// @dev 3 bytes per color because svg does not handle alpha.\\n    function getFill(uint256 _index) public view returns (string memory) {\\n        bytes memory palette = SSTORE2.read(fillPalette);\\n        return\\n            string.concat(\\n                uint8(palette[3 * _index]).toString(16, 2),\\n                uint8(palette[3 * _index + 1]).toString(16, 2),\\n                uint8(palette[3 * _index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /// @dev This function lets map from layerIndex and itemIndex to traitIndex.\\n    function getTraitIndex(uint256 _layerIndex, uint256 _itemIndex)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint8 traitIndex = uint8(layerIndexes[_layerIndex]);\\n        uint8 nextTraitIndex = uint8(layerIndexes[_layerIndex + 1]);\\n        if (traitIndex + _itemIndex > nextTraitIndex - 1) {\\n            return type(uint8).max;\\n        }\\n\\n        return _itemIndex + traitIndex;\\n    }\\n\\n    /// @dev Retrieve the bytes for the given trait from the traitPalette storage.\\n    function getTraitBytes(uint256 _index) public view returns (bytes memory) {\\n        bytes memory _indexes = SSTORE2.read(traitPaletteIndexes);\\n        uint32 start = uint32(BytesLib.toUint16(_indexes, _index * 2));\\n        uint32 next = uint32(BytesLib.toUint16(_indexes, _index * 2 + 2));\\n        bytes memory _traitPalette = SSTORE2.read(traitPalette);\\n        return BytesLib.slice(_traitPalette, start, next - start);\\n    }\\n\\n    function decodeRect(bytes memory rectBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return decodeRect(rectBytes, 0, 0);\\n    }\\n\\n    function decodeRect(\\n        bytes memory rectBytes,\\n        uint8 offsetX,\\n        uint8 offsetY\\n    ) public view returns (string memory) {\\n        require(rectBytes.length == 4, \\\"Rect bytes must be 4 bytes long\\\");\\n        string memory fill = getFill(uint8(rectBytes[3]));\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(rectBytes[0] >> 2) + offsetX).toString(),\\n                Y_TAG,\\n                (uint8(((rectBytes[0] << 4) | (rectBytes[1] >> 4)) & 0x3f) +\\n                    offsetY).toString(),\\n                WIDTH_TAG,\\n                uint8(((rectBytes[1] << 2) & 0x3f) | (rectBytes[2] >> 6))\\n                    .toString(),\\n                HEIGHT_TAG,\\n                uint8(rectBytes[2] & 0x3f).toString(),\\n                FILL_TAG,\\n                fill,\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decode8Rects(bytes32 rectsBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[0],\\n                        rectsBytes[1],\\n                        rectsBytes[2],\\n                        rectsBytes[3]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[4],\\n                        rectsBytes[5],\\n                        rectsBytes[6],\\n                        rectsBytes[7]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[8],\\n                        rectsBytes[9],\\n                        rectsBytes[10],\\n                        rectsBytes[11]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[12],\\n                        rectsBytes[13],\\n                        rectsBytes[14],\\n                        rectsBytes[15]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[16],\\n                        rectsBytes[17],\\n                        rectsBytes[18],\\n                        rectsBytes[19]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[20],\\n                        rectsBytes[21],\\n                        rectsBytes[22],\\n                        rectsBytes[23]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[24],\\n                        rectsBytes[25],\\n                        rectsBytes[26],\\n                        rectsBytes[27]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[28],\\n                        rectsBytes[29],\\n                        rectsBytes[30],\\n                        rectsBytes[31]\\n                    )\\n                )\\n            );\\n    }\\n\\n    function decode32Rects(bytes memory rectsBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 0)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 32)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 64)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 96))\\n            );\\n    }\\n\\n    /// @dev Decode the rect and returns it as a plain string to be used in the svg rect attribute.\\n    ///      One rect is 4 bytes so 8 rects is a bytes32.\\n    ///      With 20 bytes32, we have up to 160 rects per trait / co-bots actually if we concat the bytes first.\\n    ///      This magic number comes from a small data analysis of the traits. We use the fact that an empty\\n    ///      bytes32 will lead to an empty rect (width and height 0).\\n    function getTrait(bytes memory traitEncodedBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        // buffer is 20 * 32 bytes = up to 160 rects\\n        bytes memory buffer = bytes.concat(\\n            traitEncodedBytes,\\n            new bytes(640 - traitEncodedBytes.length)\\n        );\\n        return\\n            string.concat(\\n                SVG_TAG_START,\\n                decode32Rects(BytesLib.slice(buffer, 0, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 128, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 256, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 384, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 512, 128)),\\n                SVG_TAG_END\\n            );\\n    }\\n\\n    function getImageURI(bytes memory traitEncodedBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\\"data:image/svg+xml,\\\", getTrait(traitEncodedBytes));\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////  Co-bots  ////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n    function getRandomItems(uint256 tokenId, uint8 seed)\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        uint256 randomBotMemory = uint256(\\n            keccak256(abi.encodePacked(tokenId, seed))\\n        );\\n\\n        // Eyes\\n        uint256 randomEyes = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        eyesIndex = randomEyes < 25\\n            ? 11\\n            : (randomEyes < 75 ? 10 : randomEyes % 10);\\n\\n        // Mouth\\n        uint256 randomMouth = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        mouthIndex = randomMouth < 50 ? 10 : randomMouth % 10;\\n\\n        // Antenna\\n        uint256 randomAntenna = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        antennaIndex = randomAntenna < 50\\n            ? 10\\n            : (randomAntenna < 75 ? 11 : randomAntenna % 10);\\n\\n        // Feet\\n        uint256 randomFeet = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        feetIndex = randomFeet < 50 ? 10 : randomFeet % 10;\\n    }\\n\\n    function getToadItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 12, 6);\\n    }\\n\\n    function getNounishItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 13, 0);\\n    }\\n\\n    function getWizardItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 14, 9);\\n    }\\n\\n    function getCoBotItems(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) public pure returns (uint256[10] memory) {\\n        uint256 eyesIndex;\\n        uint256 mouthIndex;\\n        uint256 antennaIndex;\\n        uint256 feetIndex;\\n        if (tokenId == 0) {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getToadItems();\\n        } else if (tokenId == 1) {\\n            (\\n                eyesIndex,\\n                mouthIndex,\\n                antennaIndex,\\n                feetIndex\\n            ) = getNounishItems();\\n        } else if (tokenId == 2) {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getWizardItems();\\n        } else {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getRandomItems(\\n                tokenId,\\n                seed\\n            );\\n        }\\n\\n        uint256[10] memory items;\\n        // 0. Colour\\n        items[0] = color ? 0 : 1;\\n        // 1. Digit 1\\n        items[1] = tokenId / 1000;\\n        // 2. Digit 2\\n        items[2] = (tokenId / 100) % 10;\\n        // 3. Digit 3\\n        items[3] = (tokenId / 10) % 10;\\n        // 4. Digit 4\\n        items[4] = tokenId % 10;\\n        // 5. Eyes\\n        items[5] = eyesIndex;\\n        // 6. Mouth\\n        items[6] = mouthIndex;\\n        // 7. Antenna\\n        items[7] = antennaIndex;\\n        // 8. Status\\n        items[8] = status ? 1 : 0;\\n        // 9. Feet\\n        items[9] = feetIndex;\\n        return items;\\n    }\\n\\n    function getCoBotBytes(uint256[10] memory items)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            bytes.concat(\\n                getTraitBytes(getTraitIndex(0, items[0])),\\n                getTraitBytes(getTraitIndex(1, items[1])),\\n                getTraitBytes(getTraitIndex(2, items[2])),\\n                getTraitBytes(getTraitIndex(3, items[3])),\\n                getTraitBytes(getTraitIndex(4, items[4])),\\n                getTraitBytes(getTraitIndex(5, items[5])),\\n                getTraitBytes(getTraitIndex(6, items[6])),\\n                getTraitBytes(getTraitIndex(7, items[7])),\\n                items[8] == 1\\n                    ? new bytes(4)\\n                    : getTraitBytes(getTraitIndex(8, items[8])),\\n                getTraitBytes(getTraitIndex(9, items[9]))\\n            );\\n    }\\n\\n    function getCoBotImageURI(uint256[10] memory items)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return getImageURI(getCoBotBytes(items));\\n    }\\n\\n    function getCoBotAttributes(\\n        uint256[10] memory items,\\n        bool status,\\n        bool color\\n    ) public pure returns (string memory) {\\n        string[12] memory eyes = [\\n            \\\"Classic\\\", // 0\\n            \\\"Cyclops\\\", // 1\\n            \\\"Awoken\\\", // 2\\n            \\\"Flirty\\\", // 3\\n            \\\"Zen\\\", // 4\\n            \\\"Sadhappy\\\", // 5\\n            \\\"Unaligned\\\", // 6\\n            \\\"Smitten\\\", // 7\\n            \\\"Optimistic\\\", // 8\\n            \\\"Hacky\\\", // 9\\n            \\\"Super\\\", // 50 times\\n            \\\"Nounish\\\" // 25 times\\n        ];\\n        string[11] memory mouths = [\\n            \\\"Classic\\\", // 0\\n            \\\"Worried\\\", // 1\\n            \\\"Knightly\\\", // 2\\n            \\\"Shy\\\", // 3\\n            \\\"Happy\\\", // 4\\n            \\\"Bigsad\\\", // 5\\n            \\\"Smug\\\", // 6\\n            \\\"Wowed\\\", // 7\\n            \\\"Thirsty\\\", // 8\\n            \\\"Villainous\\\", // 9\\n            \\\"Shady\\\" // 50 times\\n        ];\\n        string[15] memory antennas = [\\n            \\\"Classic\\\", // 0\\n            \\\"Serious\\\", // 1\\n            \\\"Jumpy\\\", // 2\\n            \\\"Buzzed\\\", // 3\\n            \\\"Buggy\\\", // 4\\n            \\\"Punk\\\", // 5\\n            \\\"Angelic\\\", // 6\\n            \\\"Impish\\\", // 7\\n            \\\"Humbled\\\", // 8\\n            \\\"Western\\\", // 9\\n            \\\"Royal\\\", // 50 times\\n            \\\"Hacky\\\", // 25 times\\n            \\\"!croak\\\", // 1 time for tokeId 69\\n            \\\"Nounish\\\", // 1 time for tokeId 420\\n            \\\"Wizard\\\" // 1 time for tokeId 777\\n        ];\\n        string[11] memory feet = [\\n            \\\"Classic\\\", // 0\\n            \\\"Heavy Duty\\\", // 1\\n            \\\"Firey\\\", // 2\\n            \\\"Little Firey\\\", // 3\\n            \\\"Roller\\\", // 4\\n            \\\"Little Roller\\\", // 5\\n            \\\"Energetic\\\", // 6\\n            \\\"Little Energetic\\\", // 7\\n            \\\"Hobbled\\\", // 8\\n            \\\"Ghostly\\\", // 9\\n            \\\"Pushy\\\" // 50 times\\n        ];\\n        return\\n            string.concat(\\n                \\\"[\\\",\\n                items[7] > 11 ? \\\"\\\" : '{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"',\\n                items[7] > 11 ? \\\"\\\" : eyes[items[5]],\\n                items[7] > 11 ? \\\"\\\" : '\\\"},',\\n                items[7] > 11 ? \\\"\\\" : '{\\\"trait_type\\\": \\\"Mouth\\\", \\\"value\\\": \\\"',\\n                items[7] > 11 ? \\\"\\\" : mouths[items[6]],\\n                items[7] > 11 ? \\\"\\\" : '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Antenna\\\", \\\"value\\\": \\\"',\\n                antennas[items[7]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Feet\\\", \\\"value\\\": \\\"',\\n                feet[items[9]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Status\\\", \\\"value\\\": \\\"',\\n                status ? \\\"Online\\\" : \\\"Offline\\\",\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Color\\\", \\\"value\\\": \\\"',\\n                color ? \\\"Blue\\\" : \\\"Red\\\",\\n                '\\\"}',\\n                \\\"]\\\"\\n            );\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) public view returns (string memory) {\\n        uint256[10] memory items = getCoBotItems(tokenId, seed, status, color);\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image_data\\\": \\\"',\\n                getCoBotImageURI(items),\\n                '\\\"',\\n                ',\\\"description\\\": \\\"Co-Bots are cooperation robots.%0ACC0 & 100% On-Chain.%0A%0Aco-bots.com.\\\"',\\n                ',\\\"name\\\": \\\"Co-Bot #',\\n                tokenId.toString(),\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                getCoBotAttributes(items, status, color),\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbf6de493fe1dcbb5fccfc839cebe8af57a99dbdf003dc8a6b376a4063bb01f6f\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRenderer {\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5a8c76b1f37778dc1fc57dd509af3e699bb0201a3b9a61c37c0f931321516b9d\",\"license\":\"MIT\"},\"contracts/lib/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0f5b1dfb605720cb17df14949849463b989e5f65969c595de9aa62fd28bf7b2d\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000027565b6001805562000077565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613fff80620000876000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c806369db9ed01161017b578063b674b761116100d8578063e6d7dcae1161008c578063f2a90a7611610071578063f2a90a7614610652578063f2fde38b14610665578063fe31cecf1461067857600080fd5b8063e6d7dcae14610637578063ec71d0ff1461063f57600080fd5b8063c297ce39116100bd578063c297ce3914610609578063d36177e21461061c578063e4b55be21461062f57600080fd5b8063b674b761146105ba578063bfa93326146105f657600080fd5b80638da5cb5b1161012f578063a8262b9a11610114578063a8262b9a1461057f578063ad13e04614610592578063b3215d49146105a557600080fd5b80638da5cb5b146105625780638dc10dfe1461057357600080fd5b8063715018a611610160578063715018a61461053457806374617f151461053c57806381f603581461054f57600080fd5b806369db9ed0146104f05780636f5c723b1461052c57600080fd5b80632e3b728a1161022957806343c8ecbe116101dd578063480bc3c8116101c2578063480bc3c8146104995780634d32bd7d146104a15780636432609f146104dd57600080fd5b806343c8ecbe1461044a57806347bf48f31461048657600080fd5b80633779a7ea1161020e5780633779a7ea146103e8578063397bcf61146103fb578063407134de1461040e57600080fd5b80632e3b728a146103c75780633302c4d0146103d357600080fd5b8063146f9480116102805780631a346022116102655780631a3460221461038e57806320cad771146103a15780632da7b4e9146103b457600080fd5b8063146f9480146103325780631866112c1461036e57600080fd5b806302106a3d146102b25780631217e50a146102db578063125cabd2146102fb57806314449fa714610312575b600080fd5b6102c56102c0366004612d27565b61068b565b6040516102d29190612ddc565b60405180910390f35b6102ee6102e9366004612ee6565b6107aa565b6040516102d29190612f83565b600080600d815b6040516102d29493929190612f94565b610325610320366004612fc9565b6107be565b6040516102d29190613006565b6102ee6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b600354610381906001600160a01b031681565b6040516102d2919061302e565b6102ee61039c366004612ee6565b6108de565b6102ee6103af3660046130d1565b61090f565b6102ee6103c2366004612d27565b61091d565b600080600c6006610302565b6103e66103e1366004613145565b610978565b005b6102ee6103f6366004612ee6565b610a1b565b6103e6610409366004613145565b610a68565b6102ee6040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b6102ee6040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b61030261049436600461318d565b610b02565b6102ee610c33565b6102ee6040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b600454610381906001600160a01b031681565b6102ee6040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b6102ee610c4f565b6103e6610c6b565b6102ee61054a3660046131c0565b610ca1565b6102ee61055d366004613213565b611aac565b6000546001600160a01b0316610381565b600080600e6009610302565b6102ee61058d366004613273565b61200d565b6102ee6105a0366004612ee6565b61214d565b6105ad600881565b6040516102d2919061329d565b6102ee6040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b6103e6610604366004613145565b612271565b6102ee610617366004613273565b61230b565b6102ee61062a366004613273565b6123ad565b6105ad600681565b6102ee6125e1565b6102ee61064d3660046130d1565b61266f565b600254610381906001600160a01b031681565b6103e66106733660046132bf565b612755565b6103e6610686366004613145565b6127b1565b610693612c12565b6000808080886106b457600080600c60065b929650909450925090506106f2565b88600114156106c857600080600d816106a5565b88600214156106dd57600080600e60096106a5565b6106e78989610b02565b929650909450925090505b6106fa612c12565b86610706576001610709565b60005b60ff16815261071a6103e88b613322565b6020820152600a61072c60648c613322565b6107369190613336565b6040820152600a610747818c613322565b6107519190613336565b6060820152610761600a8b613336565b608082015260a0810185905260c0810184905260e081018390528761078757600061078a565b60015b60ff1661010082015261012081019190915293505050505b949350505050565b60606107b882600080611aac565b92915050565b60008060058481546107cf90613360565b81106107dd576107dd6132e0565b8154600116156107fc5790600052602060002090602091828204019190065b90547f0100000000000000000000000000000000000000000000000000000000000000911a0260f81c905060006005610836866001613387565b815461084190613360565b811061084f5761084f6132e0565b81546001161561086e5790600052602060002090602091828204019190065b90547f0100000000000000000000000000000000000000000000000000000000000000911a0260f81c90506108a460018261339f565b60ff16848360ff166108b69190613387565b11156108c8575060ff91506107b89050565b6108d560ff831685613387565b95945050505050565b60606108e98261214d565b6040516020016108f991906133e3565b6040516020818303038152906040529050919050565b60606107b861039c8361266f565b6060600061092d8686868661068b565b90506109388161090f565b610941876127ec565b61094c838787610ca1565b60405160200161095e93929190613413565b604051602081830303815290604052915050949350505050565b6000546001600160a01b031633146109ab5760405162461bcd60e51b81526004016109a2906135c6565b60405180910390fd5b6109ea82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291e92505050565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6060610a2b61058d83600061299c565b610a3961058d84602061299c565b610a4761058d85604061299c565b610a5561058d86606061299c565b6040516020016108f994939291906135d6565b6000546001600160a01b03163314610a925760405162461bcd60e51b81526004016109a2906135c6565b610ad182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291e92505050565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b60008060008060008686604051602001610b1d929190613622565b60408051601f19818403018152919052805160209091012090506000610b4561271083613336565b9050600e82901c915060198110610b7557604b8110610b6e57610b69600a82613336565b610b78565b600a610b78565b600b5b95506000610b8861271084613336565b9050600e83901c925060328110610ba957610ba4600a82613336565b610bac565b600a5b95506000610bbc61271085613336565b9050600e84901c935060328110610bec57604b8110610be557610be0600a82613336565b610bef565b600b610bef565b600a5b95506000610bff61271086613336565b9050600e85901c945060328110610c2057610c1b600a82613336565b610c23565b600a5b9550505050505092959194509250565b6040518060a00160405280607b8152602001613eec607b913981565b604051806080016040528060418152602001613f896041913981565b6000546001600160a01b03163314610c955760405162461bcd60e51b81526004016109a2906135c6565b610c9f60006129d2565b565b6060600060405180610180016040528060405180604001604052806007815260200166436c617373696360c81b81525081526020016040518060400160405280600781526020017f4379636c6f70730000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f41776f6b656e000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f466c69727479000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f5a656e000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f536164686170707900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f556e616c69676e6564000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f536d697474656e0000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f4f7074696d69737469630000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f4861636b7900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f537570657200000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4e6f756e697368000000000000000000000000000000000000000000000000008152508152509050600060405180610160016040528060405180604001604052806007815260200166436c617373696360c81b81525081526020016040518060400160405280600781526020017f576f72726965640000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4b6e696768746c7900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f536879000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f486170707900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f426967736164000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f536d75670000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f576f77656400000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f546869727374790000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f56696c6c61696e6f75730000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f536861647900000000000000000000000000000000000000000000000000000081525081525090506000604051806101e0016040528060405180604001604052806007815260200166436c617373696360c81b81525081526020016040518060400160405280600781526020017f536572696f75730000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f4a756d707900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f42757a7a6564000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f427567677900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f50756e6b0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f416e67656c69630000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f496d70697368000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f48756d626c65640000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f5765737465726e0000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f526f79616c00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f4861636b7900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f2163726f616b000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4e6f756e6973680000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f57697a61726400000000000000000000000000000000000000000000000000008152508152509050600060405180610160016040528060405180604001604052806007815260200166436c617373696360c81b81525081526020016040518060400160405280600a81526020017f486561767920447574790000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f466972657900000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600c81526020017f4c6974746c65204669726579000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f526f6c6c6572000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600d81526020017f4c6974746c6520526f6c6c65720000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f456e65726765746963000000000000000000000000000000000000000000000081525081526020016040518060400160405280601081526020017f4c6974746c6520456e657267657469630000000000000000000000000000000081525081526020016040518060400160405280600781526020017f486f62626c65640000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f47686f73746c790000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f50757368790000000000000000000000000000000000000000000000000000008152508152509050600b886007600a81106117e3576117e36132e0565b60200201511161180b57604051806060016040528060218152602001613ecb6021913961181c565b604051806020016040528060008152505b60e0890151600b106118495760a08901518590600c811061183f5761183f6132e0565b602002015161185a565b604051806020016040528060008152505b60e08a0151600b106118875760405180604001604052806003815260200162089f4b60ea1b815250611898565b604051806020016040528060008152505b60e08b0151600b106118c257604051806060016040528060228152602001613f67602291396118d3565b604051806020016040528060008152505b60e08c0151600b106119005760c08c01518790600b81106118f6576118f66132e0565b6020020151611911565b604051806020016040528060008152505b60e08d0151600b1061193e5760405180604001604052806003815260200162089f4b60ea1b81525061194f565b604051806020016040528060008152505b60e08e01518890600f8110611966576119666132e0565b60200201516101208f01518890600b8110611983576119836132e0565b60200201518e6119c8576040518060400160405280600781526020017f4f66666c696e65000000000000000000000000000000000000000000000000008152506119ff565b6040518060400160405280600681526020017f4f6e6c696e6500000000000000000000000000000000000000000000000000008152505b8e611a3f576040518060400160405280600381526020017f5265640000000000000000000000000000000000000000000000000000000000815250611a76565b6040518060400160405280600481526020017f426c7565000000000000000000000000000000000000000000000000000000008152505b604051602001611a8f9a99989796959493929190613642565b6040516020818303038152906040529450505050505b9392505050565b60608351600414611acf5760405162461bcd60e51b81526004016109a2906138c5565b6000611af485600381518110611ae757611ae76132e0565b016020015160f81c6123ad565b90506040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525084600287600081518110611b4257611b426132e0565b0160200151611b7a92917fff00000000000000000000000000000000000000000000000000000000000000909116901c60f81c6138d5565b60405163348051d760e11b81527303abFda4e7cec3484D518848B5e6aa10965F91DD91636900a3ae91611bb39160ff1690600401613006565b600060405180830381865af4158015611bd0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bf8919081019061394e565b6040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525085600489600181518110611c4457611c446132e0565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60048a600081518110611c8857611c886132e0565b0160200151611cc593927fff0000000000000000000000000000000000000000000000000000000000000090911690911b1760f81c603f166138d5565b60405163348051d760e11b81527303abFda4e7cec3484D518848B5e6aa10965F91DD91636900a3ae91611cfe9160ff1690600401613006565b600060405180830381865af4158015611d1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d43919081019061394e565b6040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525060068a600281518110611d8e57611d8e6132e0565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60028b600181518110611dd257611dd26132e0565b60209101015160405163348051d760e11b81527303abFda4e7cec3484D518848B5e6aa10965F91DD93636900a3ae93611e58937fff0000000000000000000000000000000000000000000000000000000000000016901b7f3f00000000000000000000000000000000000000000000000000000000000000161760f81c90600401613006565b600060405180830381865af4158015611e75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e9d919081019061394e565b6040518060400160405280601081526020017f2532372532306865696768743d253237000000000000000000000000000000008152508b600281518110611ee657611ee66132e0565b60209101015160405163348051d760e11b81527303abFda4e7cec3484D518848B5e6aa10965F91DD91636900a3ae91611f289160f81c603f1690600401613006565b600060405180830381865af4158015611f45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f6d919081019061394e565b6040518060400160405280601181526020017f25323725323066696c6c3d253237253233000000000000000000000000000000815250896040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001611ff49b9a99989796959493929190613989565b6040516020818303038152906040529150509392505050565b60606120568260001a60f81b8360011a60f81b8460021a60f81b8560035b1a60f81b6040516020016120429493929190613a43565b6040516020818303038152906040526107aa565b6120768360041a60f81b8460051a60f81b8560061a60f81b86600761202b565b6120968460081a60f81b8560091a60f81b86600a1a60f81b87600b61202b565b6120b685600c1a60f81b86600d1a60f81b87600e1a60f81b88600f61202b565b6120d68660101a60f81b8760111a60f81b8860121a60f81b89601361202b565b6120f68760141a60f81b8860151a60f81b8960161a60f81b8a601761202b565b6121168860181a60f81b8960191a60f81b8a601a1a60f81b8b601b61202b565b61213689601c1a60f81b8a601d1a60f81b8b601e1a60f81b8c601f61202b565b6040516020016108f9989796959493929190613a7f565b606060008283516102806121619190613aea565b67ffffffffffffffff81111561217957612179612deb565b6040519080825280601f01601f1916602001820160405280156121a3576020820181803683370190505b506040516020016121b5929190613af0565b60408051601f1981840301815260a08301909152607b808352909250613eec60208301396121e96103f68360006080612a2f565b6121f86103f684608080612a2f565b6122096103f6856101006080612a2f565b61221a6103f6866101806080612a2f565b61222b6103f6876102006080612a2f565b604051806080016040528060418152602001613f896041913960405160200161225a9796959493929190613b06565b604051602081830303815290604052915050919050565b6000546001600160a01b0316331461229b5760405162461bcd60e51b81526004016109a2906135c6565b6122da82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291e92505050565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b600454606090600090612326906001600160a01b0316612af7565b9050600061233e82612339866002613b64565b612b07565b61ffff169050600061236083612355876002613b64565b612339906002613387565b60035461ffff919091169150600090612381906001600160a01b0316612af7565b90506123a38163ffffffff85166123988686613b83565b63ffffffff16612a2f565b9695505050505050565b6002546060906000906123c8906001600160a01b0316612af7565b9050806123d6846003613b64565b815181106123e6576123e66132e0565b016020015160405163c1338a6960e01b81527303abFda4e7cec3484D518848B5e6aa10965F91DD9163c1338a699161242a9160f81c90601090600290600401613ba7565b600060405180830381865af4158015612447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261246f919081019061394e565b8161247b856003613b64565b612486906001613387565b81518110612496576124966132e0565b016020015160405163c1338a6960e01b81527303abFda4e7cec3484D518848B5e6aa10965F91DD9163c1338a69916124da9160f81c90601090600290600401613ba7565b600060405180830381865af41580156124f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261251f919081019061394e565b8261252b866003613b64565b612536906002613387565b81518110612546576125466132e0565b016020015160405163c1338a6960e01b81527303abFda4e7cec3484D518848B5e6aa10965F91DD9163c1338a699161258a9160f81c90601090600290600401613ba7565b600060405180830381865af41580156125a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125cf919081019061394e565b60405160200161225a93929190613bcf565b600580546125ee90613360565b80601f016020809104026020016040519081016040528092919081815260200182805461261a90613360565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b505050505081565b6060612686610617600084815b60200201516107be565b6126956106176001858161267c565b6126a46106176002868161267c565b6126b36106176003878161267c565b6126c26106176004888161267c565b6126d16106176005898161267c565b6126e061061760068a8161267c565b6126ef61061760078b8161267c565b6101008a01516001146127105761270b61061760088c8161267c565b61272d565b604080516004808252818301909252906020820181803683375050505b61273c61061760098d8161267c565b6040516020016108f99a99989796959493929190613bf1565b6000546001600160a01b0316331461277f5760405162461bcd60e51b81526004016109a2906135c6565b6001600160a01b0381166127a55760405162461bcd60e51b81526004016109a290613c76565b6127ae816129d2565b50565b6000546001600160a01b031633146127db5760405162461bcd60e51b81526004016109a2906135c6565b6127e760058383612c31565b505050565b60608161282c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612856578061284081613cd7565b915061284f9050600a83613322565b9150612830565b60008167ffffffffffffffff81111561287157612871612deb565b6040519080825280601f01601f19166020018201604052801561289b576020820181803683370190505b5090505b84156107a2576128b0600183613aea565b91506128bd600a86613336565b6128c8906030613387565b60f81b8183815181106128dd576128dd6132e0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612917600a86613322565b945061289f565b600080612949836040516020016129359190613cfd565b604051602081830303815290604052612b3d565b90508051602082016000f091506001600160a01b038216612996576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b60006129a9826020613387565b835110156129c95760405162461bcd60e51b81526004016109a290613d44565b50016020015190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081612a3d81601f613387565b1015612a5b5760405162461bcd60e51b81526004016109a290613d86565b612a658284613387565b84511015612a855760405162461bcd60e51b81526004016109a290613dc8565b606082158015612aa45760405191506000825260208201604052612aee565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612add578051835260209283019201612ac5565b5050858452601f01601f1916604052505b50949350505050565b60606107b8826001600019612b53565b6000612b14826002613387565b83511015612b345760405162461bcd60e51b81526004016109a290613e0a565b50016002015190565b60608151826040516020016108f9929190613e5d565b6060833b80612b72575050604080516020810190915260008152611aa5565b80841115612b90575050604080516020810190915260008152611aa5565b83831015612bd0578084846040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004016109a293929190613ea2565b8383038482036000828210612be55782612be7565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b604051806101400160405280600a906020820280368337509192915050565b828054612c3d90613360565b90600052602060002090601f016020900481019282612c5f5760008555612cc3565b82601f10612c96578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612cc3565b82800160010185558215612cc3579182015b82811115612cc3578235825591602001919060010190612ca8565b50612ccf929150612cd3565b5090565b5b80821115612ccf5760008155600101612cd4565b805b81146127ae57600080fd5b80356107b881612ce8565b60ff8116612cea565b80356107b881612d00565b801515612cea565b80356107b881612d14565b60008060008060808587031215612d4057612d40600080fd5b6000612d4c8787612cf5565b9450506020612d5d87828801612d09565b9350506040612d6e87828801612d1c565b9250506060612d7f87828801612d1c565b91505092959194509250565b805b82525050565b612d9d8282612d8b565b5060200190565b60200190565b600a8160005b82811015612dd5578151612dc48682612d93565b955050602082019150600101612db0565b5050505050565b61014081016107b88284612daa565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715612e2757612e27612deb565b6040525050565b6000612e3960405190565b9050612e458282612e01565b919050565b600067ffffffffffffffff821115612e6457612e64612deb565b601f19601f83011660200192915050565b82818337506000910152565b6000612e94612e8f84612e4a565b612e2e565b905082815260208101848484011115612eaf57612eaf600080fd5b612eba848285612e75565b509392505050565b600082601f830112612ed657612ed6600080fd5b81356107a2848260208601612e81565b600060208284031215612efb57612efb600080fd5b813567ffffffffffffffff811115612f1557612f15600080fd5b6107a284828501612ec2565b60005b83811015612f3c578181015183820152602001612f24565b83811115612f4b576000848401525b50505050565b6000612f5b825190565b808452602084019350612f72818560208601612f21565b601f01601f19169290920192915050565b60208082528101611aa58184612f51565b60808101612fa28287612d8b565b612faf6020830186612d8b565b612fbc6040830185612d8b565b6108d56060830184612d8b565b60008060408385031215612fdf57612fdf600080fd5b6000612feb8585612cf5565b9250506020612ffc85828601612cf5565b9150509250929050565b602081016107b88284612d8b565b60006001600160a01b0382166107b8565b612d8d81613014565b602081016107b88284613025565b600067ffffffffffffffff82111561305657613056612deb565b5060200290565b600061306b612e8f8461303c565b9050806020840283018581111561308457613084600080fd5b835b818110156130a6576130988782612cf5565b835260209283019201613086565b5050509392505050565b600082601f8301126130c4576130c4600080fd5b600a6107a284828561305d565b600061014082840312156130e7576130e7600080fd5b60006107a284846130b0565b60008083601f84011261310857613108600080fd5b50813567ffffffffffffffff81111561312357613123600080fd5b60208301915083600182028301111561313e5761313e600080fd5b9250929050565b6000806020838503121561315b5761315b600080fd5b823567ffffffffffffffff81111561317557613175600080fd5b613181858286016130f3565b92509250509250929050565b600080604083850312156131a3576131a3600080fd5b60006131af8585612cf5565b9250506020612ffc85828601612d09565b600080600061018084860312156131d9576131d9600080fd5b60006131e586866130b0565b9350506101406131f786828701612d1c565b92505061016061320986828701612d1c565b9150509250925092565b60008060006060848603121561322b5761322b600080fd5b833567ffffffffffffffff81111561324557613245600080fd5b61325186828701612ec2565b935050602061326286828701612d09565b925050604061320986828701612d09565b60006020828403121561328857613288600080fd5b60006107a28484612cf5565b60ff8116612d8d565b602081016107b88284613294565b612cea81613014565b80356107b8816132ab565b6000602082840312156132d4576132d4600080fd5b60006107a284846132b4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082613331576133316132f6565b500490565b600082613345576133456132f6565b500690565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061337457607f821691505b602082108114156129965761299661334a565b6000821982111561339a5761339a61330c565b500190565b60ff9081169082165b91506000828210156133bc576133bc61330c565b500390565b60006133cb825190565b6133d9818560208601612f21565b9290920192915050565b7f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081526013016107b881836133c1565b7f646174613a6170706c69636174696f6e2f6a736f6e2c000000000000000000008152601601613462817f7b22696d6167655f64617461223a2022000000000000000000000000000000009052565b60100161346f81856133c1565b601160f91b815290506001016134f4817f2c226465736372697074696f6e223a2022436f2d426f74732061726520636f6f81527f7065726174696f6e20726f626f74732e25304143433020262031303025204f6e60208201527f2d436861696e2e253041253041636f2d626f74732e636f6d2e220000000000006040820152605a0190565b7f2c226e616d65223a2022436f2d426f74202300000000000000000000000000008152905060120161352681846133c1565b601160f91b8152905060010161355b817f2c2261747472696275746573223a2000000000000000000000000000000000009052565b600f0161356881836133c1565b7f7d000000000000000000000000000000000000000000000000000000000000008152600101949350505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612da4565b602080825281016107b881613596565b6135e081866133c1565b90506135ec81856133c1565b90506135f881846133c1565b90506108d581836133c1565b80612d8d565b60006107b88260f81b90565b612d8d60ff821661360a565b61362c8184613604565b6020016136398183613616565b60010192915050565b7f5b000000000000000000000000000000000000000000000000000000000000008152600101613672818c6133c1565b905061367e818b6133c1565b905061368a818a6133c1565b905061369681896133c1565b90506136a281886133c1565b90506136ae81876133c1565b7f7b2274726169745f74797065223a2022416e74656e6e61222c202276616c756581527f223a2022000000000000000000000000000000000000000000000000000000006020820152602401905061370681866133c1565b62089f4b60ea1b8152905060030161374b817f7b2274726169745f74797065223a202246656574222c202276616c7565223a208152601160f91b602082015260210190565b905061375781856133c1565b62089f4b60ea1b815290506003016137b8817f7b2274726169745f74797065223a2022537461747573222c202276616c75652281527f3a20220000000000000000000000000000000000000000000000000000000000602082015260230190565b90506137c481846133c1565b62089f4b60ea1b81529050600301613825817f7b2274726169745f74797065223a2022436f6c6f72222c202276616c7565223a81527f2022000000000000000000000000000000000000000000000000000000000000602082015260220190565b905061383181836133c1565b7f227d00000000000000000000000000000000000000000000000000000000000081529050600201613882817f5d000000000000000000000000000000000000000000000000000000000000009052565b6001019a9950505050505050505050565b601f8152602081017f52656374206279746573206d7573742062652034206279746573206c6f6e670081529050612da4565b602080825281016107b881613893565b60ff8116905060ff8216915060008260ff0382111561339a5761339a61330c565b6000613904612e8f84612e4a565b90508281526020810184848401111561391f5761391f600080fd5b612eba848285612f21565b600082601f83011261393e5761393e600080fd5b81516107a28482602086016138f6565b60006020828403121561396357613963600080fd5b815167ffffffffffffffff81111561397d5761397d600080fd5b6107a28482850161392a565b613993818d6133c1565b905061399f818c6133c1565b90506139ab818b6133c1565b90506139b7818a6133c1565b90506139c381896133c1565b90506139cf81886133c1565b90506139db81876133c1565b90506139e781866133c1565b90506139f381856133c1565b90506139ff81846133c1565b9050613a0b81836133c1565b9c9b505050505050505050505050565b7fff000000000000000000000000000000000000000000000000000000000000008116612d8d565b613a4d8186613a1b565b600101613a5a8185613a1b565b600101613a678184613a1b565b600101613a748183613a1b565b600101949350505050565b613a89818a6133c1565b9050613a9581896133c1565b9050613aa181886133c1565b9050613aad81876133c1565b9050613ab981866133c1565b9050613ac581856133c1565b9050613ad181846133c1565b9050613add81836133c1565b9998505050505050505050565b816133a8565b613afa81846133c1565b9050611aa581836133c1565b613b1081896133c1565b9050613b1c81886133c1565b9050613b2881876133c1565b9050613b3481866133c1565b9050613b4081856133c1565b9050613b4c81846133c1565b9050613b5881836133c1565b98975050505050505050565b6000816000190483118215151615613b7e57613b7e61330c565b500290565b63ffffffff9081169082166133a8565b600060ff82166107b8565b612d8d81613b93565b60608101613bb58286612d8b565b613bc26020830185613b9e565b6107a26040830184613b9e565b613bd981856133c1565b9050613be581846133c1565b90506107a281836133c1565b613bfb818c6133c1565b9050613c07818b6133c1565b9050613c13818a6133c1565b9050613c1f81896133c1565b9050613c2b81886133c1565b9050613c3781876133c1565b9050613c4381866133c1565b9050613c4f81856133c1565b9050613c5b81846133c1565b9050613c6781836133c1565b9b9a5050505050505050505050565b602080825281016107b881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b6000600019821415613ceb57613ceb61330c565b5060010190565b600081525b60010190565b613d0681613cf2565b90506107b881836133c1565b60158152602081017f746f427974657333325f6f75744f66426f756e6473000000000000000000000081529050612da4565b602080825281016107b881613d12565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050612da4565b602080825281016107b881613d54565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050612da4565b602080825281016107b881613d96565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050612da4565b602080825281016107b881613dd8565b7f63000000000000000000000000000000000000000000000000000000000000008152613cf7565b60006107b88260e01b90565b612d8d63ffffffff8216613e42565b613e6681613e1a565b9050613e728184613e4e565b600401613afa817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b60608101613eb08286612d8b565b613ebd6020830185612d8b565b6107a26040830184612d8b56fe7b2274726169745f74797065223a202245796573222c202276616c7565223a2022253363737667253230786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f73766725323725323076696577426f783d25323730253230302532303435253230343525323725323077696474683d25323734353070782532372532306865696768743d25323734353070782532372533657b2274726169745f74797065223a20224d6f757468222c202276616c7565223a20222533637374796c65253365726563747b73686170652d72656e646572696e673a637269737045646765737d2533632f7374796c652533652533632f737667253365a26469706673582212207a5b83d5ffe248b4c7075ea6cb714f7161e347581d5ac20f7079a5dbdcf7172b64736f6c634300080c0033",
  "deployedBytecode": "$6cc8f8b41053aebd660af83ec8df928129$__91636900a3ae91611bb39160ff1690600401613006565b600060405180830381865af4158015611bd0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bf8919081019061394e565b6040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525085600489600181518110611c4457611c446132e0565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60048a600081518110611c8857611c886132e0565b0160200151611cc593927fff0000000000000000000000000000000000000000000000000000000000000090911690911b1760f81c603f166138d5565b60405163348051d760e11b815273__$6cc8f8b41053aebd660af83ec8df928129$__91636900a3ae91611cfe9160ff1690600401613006565b600060405180830381865af4158015611d1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d43919081019061394e565b6040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525060068a600281518110611d8e57611d8e6132e0565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60028b600181518110611dd257611dd26132e0565b60209101015160405163348051d760e11b815273__$6cc8f8b41053aebd660af83ec8df928129$__93636900a3ae93611e58937fff0000000000000000000000000000000000000000000000000000000000000016901b7f3f00000000000000000000000000000000000000000000000000000000000000161760f81c90600401613006565b600060405180830381865af4158015611e75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e9d919081019061394e565b6040518060400160405280601081526020017f2532372532306865696768743d253237000000000000000000000000000000008152508b600281518110611ee657611ee66132e0565b60209101015160405163348051d760e11b815273__$6cc8f8b41053aebd660af83ec8df928129$__91636900a3ae91611f289160f81c603f1690600401613006565b600060405180830381865af4158015611f45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f6d919081019061394e565b6040518060400160405280601181526020017f25323725323066696c6c3d253237253233000000000000000000000000000000815250896040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001611ff49b9a99989796959493929190613989565b6040516020818303038152906040529150509392505050565b60606120568260001a60f81b8360011a60f81b8460021a60f81b8560035b1a60f81b6040516020016120429493929190613a43565b6040516020818303038152906040526107aa565b6120768360041a60f81b8460051a60f81b8560061a60f81b86600761202b565b6120968460081a60f81b8560091a60f81b86600a1a60f81b87600b61202b565b6120b685600c1a60f81b86600d1a60f81b87600e1a60f81b88600f61202b565b6120d68660101a60f81b8760111a60f81b8860121a60f81b89601361202b565b6120f68760141a60f81b8860151a60f81b8960161a60f81b8a601761202b565b6121168860181a60f81b8960191a60f81b8a601a1a60f81b8b601b61202b565b61213689601c1a60f81b8a601d1a60f81b8b601e1a60f81b8c601f61202b565b6040516020016108f9989796959493929190613a7f565b606060008283516102806121619190613aea565b67ffffffffffffffff81111561217957612179612deb565b6040519080825280601f01601f1916602001820160405280156121a3576020820181803683370190505b506040516020016121b5929190613af0565b60408051601f1981840301815260a08301909152607b808352909250613eec60208301396121e96103f68360006080612a2f565b6121f86103f684608080612a2f565b6122096103f6856101006080612a2f565b61221a6103f6866101806080612a2f565b61222b6103f6876102006080612a2f565b604051806080016040528060418152602001613f896041913960405160200161225a9796959493929190613b06565b604051602081830303815290604052915050919050565b6000546001600160a01b0316331461229b5760405162461bcd60e51b81526004016109a2906135c6565b6122da82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291e92505050565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b600454606090600090612326906001600160a01b0316612af7565b9050600061233e82612339866002613b64565b612b07565b61ffff169050600061236083612355876002613b64565b612339906002613387565b60035461ffff919091169150600090612381906001600160a01b0316612af7565b90506123a38163ffffffff85166123988686613b83565b63ffffffff16612a2f565b9695505050505050565b6002546060906000906123c8906001600160a01b0316612af7565b9050806123d6846003613b64565b815181106123e6576123e66132e0565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a699161242a9160f81c90601090600290600401613ba7565b600060405180830381865af4158015612447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261246f919081019061394e565b8161247b856003613b64565b612486906001613387565b81518110612496576124966132e0565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a69916124da9160f81c90601090600290600401613ba7565b600060405180830381865af41580156124f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261251f919081019061394e565b8261252b866003613b64565b612536906002613387565b81518110612546576125466132e0565b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a699161258a9160f81c90601090600290600401613ba7565b600060405180830381865af41580156125a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125cf919081019061394e565b60405160200161225a93929190613bcf565b600580546125ee90613360565b80601f016020809104026020016040519081016040528092919081815260200182805461261a90613360565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b505050505081565b6060612686610617600084815b60200201516107be565b6126956106176001858161267c565b6126a46106176002868161267c565b6126b36106176003878161267c565b6126c26106176004888161267c565b6126d16106176005898161267c565b6126e061061760068a8161267c565b6126ef61061760078b8161267c565b6101008a01516001146127105761270b61061760088c8161267c565b61272d565b604080516004808252818301909252906020820181803683375050505b61273c61061760098d8161267c565b6040516020016108f99a99989796959493929190613bf1565b6000546001600160a01b0316331461277f5760405162461bcd60e51b81526004016109a2906135c6565b6001600160a01b0381166127a55760405162461bcd60e51b81526004016109a290613c76565b6127ae816129d2565b50565b6000546001600160a01b031633146127db5760405162461bcd60e51b81526004016109a2906135c6565b6127e760058383612c31565b505050565b60608161282c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612856578061284081613cd7565b915061284f9050600a83613322565b9150612830565b60008167ffffffffffffffff81111561287157612871612deb565b6040519080825280601f01601f19166020018201604052801561289b576020820181803683370190505b5090505b84156107a2576128b0600183613aea565b91506128bd600a86613336565b6128c8906030613387565b60f81b8183815181106128dd576128dd6132e0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612917600a86613322565b945061289f565b600080612949836040516020016129359190613cfd565b604051602081830303815290604052612b3d565b90508051602082016000f091506001600160a01b038216612996576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b60006129a9826020613387565b835110156129c95760405162461bcd60e51b81526004016109a290613d44565b50016020015190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081612a3d81601f613387565b1015612a5b5760405162461bcd60e51b81526004016109a290613d86565b612a658284613387565b84511015612a855760405162461bcd60e51b81526004016109a290613dc8565b606082158015612aa45760405191506000825260208201604052612aee565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612add578051835260209283019201612ac5565b5050858452601f01601f1916604052505b50949350505050565b60606107b8826001600019612b53565b6000612b14826002613387565b83511015612b345760405162461bcd60e51b81526004016109a290613e0a565b50016002015190565b60608151826040516020016108f9929190613e5d565b6060833b80612b72575050604080516020810190915260008152611aa5565b80841115612b90575050604080516020810190915260008152611aa5565b83831015612bd0578084846040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004016109a293929190613ea2565b8383038482036000828210612be55782612be7565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b604051806101400160405280600a906020820280368337509192915050565b828054612c3d90613360565b90600052602060002090601f016020900481019282612c5f5760008555612cc3565b82601f10612c96578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612cc3565b82800160010185558215612cc3579182015b82811115612cc3578235825591602001919060010190612ca8565b50612ccf929150612cd3565b5090565b5b80821115612ccf5760008155600101612cd4565b805b81146127ae57600080fd5b80356107b881612ce8565b60ff8116612cea565b80356107b881612d00565b801515612cea565b80356107b881612d14565b60008060008060808587031215612d4057612d40600080fd5b6000612d4c8787612cf5565b9450506020612d5d87828801612d09565b9350506040612d6e87828801612d1c565b9250506060612d7f87828801612d1c565b91505092959194509250565b805b82525050565b612d9d8282612d8b565b5060200190565b60200190565b600a8160005b82811015612dd5578151612dc48682612d93565b955050602082019150600101612db0565b5050505050565b61014081016107b88284612daa565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715612e2757612e27612deb565b6040525050565b6000612e3960405190565b9050612e458282612e01565b919050565b600067ffffffffffffffff821115612e6457612e64612deb565b601f19601f83011660200192915050565b82818337506000910152565b6000612e94612e8f84612e4a565b612e2e565b905082815260208101848484011115612eaf57612eaf600080fd5b612eba848285612e75565b509392505050565b600082601f830112612ed657612ed6600080fd5b81356107a2848260208601612e81565b600060208284031215612efb57612efb600080fd5b813567ffffffffffffffff811115612f1557612f15600080fd5b6107a284828501612ec2565b60005b83811015612f3c578181015183820152602001612f24565b83811115612f4b576000848401525b50505050565b6000612f5b825190565b808452602084019350612f72818560208601612f21565b601f01601f19169290920192915050565b60208082528101611aa58184612f51565b60808101612fa28287612d8b565b612faf6020830186612d8b565b612fbc6040830185612d8b565b6108d56060830184612d8b565b60008060408385031215612fdf57612fdf600080fd5b6000612feb8585612cf5565b9250506020612ffc85828601612cf5565b9150509250929050565b602081016107b88284612d8b565b60006001600160a01b0382166107b8565b612d8d81613014565b602081016107b88284613025565b600067ffffffffffffffff82111561305657613056612deb565b5060200290565b600061306b612e8f8461303c565b9050806020840283018581111561308457613084600080fd5b835b818110156130a6576130988782612cf5565b835260209283019201613086565b5050509392505050565b600082601f8301126130c4576130c4600080fd5b600a6107a284828561305d565b600061014082840312156130e7576130e7600080fd5b60006107a284846130b0565b60008083601f84011261310857613108600080fd5b50813567ffffffffffffffff81111561312357613123600080fd5b60208301915083600182028301111561313e5761313e600080fd5b9250929050565b6000806020838503121561315b5761315b600080fd5b823567ffffffffffffffff81111561317557613175600080fd5b613181858286016130f3565b92509250509250929050565b600080604083850312156131a3576131a3600080fd5b60006131af8585612cf5565b9250506020612ffc85828601612d09565b600080600061018084860312156131d9576131d9600080fd5b60006131e586866130b0565b9350506101406131f786828701612d1c565b92505061016061320986828701612d1c565b9150509250925092565b60008060006060848603121561322b5761322b600080fd5b833567ffffffffffffffff81111561324557613245600080fd5b61325186828701612ec2565b935050602061326286828701612d09565b925050604061320986828701612d09565b60006020828403121561328857613288600080fd5b60006107a28484612cf5565b60ff8116612d8d565b602081016107b88284613294565b612cea81613014565b80356107b8816132ab565b6000602082840312156132d4576132d4600080fd5b60006107a284846132b4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082613331576133316132f6565b500490565b600082613345576133456132f6565b500690565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061337457607f821691505b602082108114156129965761299661334a565b6000821982111561339a5761339a61330c565b500190565b60ff9081169082165b91506000828210156133bc576133bc61330c565b500390565b60006133cb825190565b6133d9818560208601612f21565b9290920192915050565b7f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081526013016107b881836133c1565b7f646174613a6170706c69636174696f6e2f6a736f6e2c000000000000000000008152601601613462817f7b22696d6167655f64617461223a2022000000000000000000000000000000009052565b60100161346f81856133c1565b601160f91b815290506001016134f4817f2c226465736372697074696f6e223a2022436f2d426f74732061726520636f6f81527f7065726174696f6e20726f626f74732e25304143433020262031303025204f6e60208201527f2d436861696e2e253041253041636f2d626f74732e636f6d2e220000000000006040820152605a0190565b7f2c226e616d65223a2022436f2d426f74202300000000000000000000000000008152905060120161352681846133c1565b601160f91b8152905060010161355b817f2c2261747472696275746573223a2000000000000000000000000000000000009052565b600f0161356881836133c1565b7f7d000000000000000000000000000000000000000000000000000000000000008152600101949350505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612da4565b602080825281016107b881613596565b6135e081866133c1565b90506135ec81856133c1565b90506135f881846133c1565b90506108d581836133c1565b80612d8d565b60006107b88260f81b90565b612d8d60ff821661360a565b61362c8184613604565b6020016136398183613616565b60010192915050565b7f5b000000000000000000000000000000000000000000000000000000000000008152600101613672818c6133c1565b905061367e818b6133c1565b905061368a818a6133c1565b905061369681896133c1565b90506136a281886133c1565b90506136ae81876133c1565b7f7b2274726169745f74797065223a2022416e74656e6e61222c202276616c756581527f223a2022000000000000000000000000000000000000000000000000000000006020820152602401905061370681866133c1565b62089f4b60ea1b8152905060030161374b817f7b2274726169745f74797065223a202246656574222c202276616c7565223a208152601160f91b602082015260210190565b905061375781856133c1565b62089f4b60ea1b815290506003016137b8817f7b2274726169745f74797065223a2022537461747573222c202276616c75652281527f3a20220000000000000000000000000000000000000000000000000000000000602082015260230190565b90506137c481846133c1565b62089f4b60ea1b81529050600301613825817f7b2274726169745f74797065223a2022436f6c6f72222c202276616c7565223a81527f2022000000000000000000000000000000000000000000000000000000000000602082015260220190565b905061383181836133c1565b7f227d00000000000000000000000000000000000000000000000000000000000081529050600201613882817f5d000000000000000000000000000000000000000000000000000000000000009052565b6001019a9950505050505050505050565b601f8152602081017f52656374206279746573206d7573742062652034206279746573206c6f6e670081529050612da4565b602080825281016107b881613893565b60ff8116905060ff8216915060008260ff0382111561339a5761339a61330c565b6000613904612e8f84612e4a565b90508281526020810184848401111561391f5761391f600080fd5b612eba848285612f21565b600082601f83011261393e5761393e600080fd5b81516107a28482602086016138f6565b60006020828403121561396357613963600080fd5b815167ffffffffffffffff81111561397d5761397d600080fd5b6107a28482850161392a565b613993818d6133c1565b905061399f818c6133c1565b90506139ab818b6133c1565b90506139b7818a6133c1565b90506139c381896133c1565b90506139cf81886133c1565b90506139db81876133c1565b90506139e781866133c1565b90506139f381856133c1565b90506139ff81846133c1565b9050613a0b81836133c1565b9c9b505050505050505050505050565b7fff000000000000000000000000000000000000000000000000000000000000008116612d8d565b613a4d8186613a1b565b600101613a5a8185613a1b565b600101613a678184613a1b565b600101613a748183613a1b565b600101949350505050565b613a89818a6133c1565b9050613a9581896133c1565b9050613aa181886133c1565b9050613aad81876133c1565b9050613ab981866133c1565b9050613ac581856133c1565b9050613ad181846133c1565b9050613add81836133c1565b9998505050505050505050565b816133a8565b613afa81846133c1565b9050611aa581836133c1565b613b1081896133c1565b9050613b1c81886133c1565b9050613b2881876133c1565b9050613b3481866133c1565b9050613b4081856133c1565b9050613b4c81846133c1565b9050613b5881836133c1565b98975050505050505050565b6000816000190483118215151615613b7e57613b7e61330c565b500290565b63ffffffff9081169082166133a8565b600060ff82166107b8565b612d8d81613b93565b60608101613bb58286612d8b565b613bc26020830185613b9e565b6107a26040830184613b9e565b613bd981856133c1565b9050613be581846133c1565b90506107a281836133c1565b613bfb818c6133c1565b9050613c07818b6133c1565b9050613c13818a6133c1565b9050613c1f81896133c1565b9050613c2b81886133c1565b9050613c3781876133c1565b9050613c4381866133c1565b9050613c4f81856133c1565b9050613c5b81846133c1565b9050613c6781836133c1565b9b9a5050505050505050505050565b602080825281016107b881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b6000600019821415613ceb57613ceb61330c565b5060010190565b600081525b60010190565b613d0681613cf2565b90506107b881836133c1565b60158152602081017f746f427974657333325f6f75744f66426f756e6473000000000000000000000081529050612da4565b602080825281016107b881613d12565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050612da4565b602080825281016107b881613d54565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050612da4565b602080825281016107b881613d96565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050612da4565b602080825281016107b881613dd8565b7f63000000000000000000000000000000000000000000000000000000000000008152613cf7565b60006107b88260e01b90565b612d8d63ffffffff8216613e42565b613e6681613e1a565b9050613e728184613e4e565b600401613afa817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b60608101613eb08286612d8b565b613ebd6020830185612d8b565b6107a26040830184612d8b56fe7b2274726169745f74797065223a202245796573222c202276616c7565223a2022253363737667253230786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f73766725323725323076696577426f783d25323730253230302532303435253230343525323725323077696474683d25323734353070782532372532306865696768743d25323734353070782532372533657b2274726169745f74797065223a20224d6f757468222c202276616c7565223a20222533637374796c65253365726563747b73686170652d72656e646572696e673a637269737045646765737d2533632f7374796c652533652533632f737667253365a26469706673582212207a5b83d5ffe248b4c7075ea6cb714f7161e347581d5ac20f7079a5dbdcf7172b64736f6c634300080c0033",
  "libraries": {
    "Integers": "0x03abFda4e7cec3484D518848B5e6aa10965F91DD"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getFill(uint256)": {
        "details": "3 bytes per color because svg does not handle alpha."
      },
      "getTrait(bytes)": {
        "details": "Decode the rect and returns it as a plain string to be used in the svg rect attribute.      One rect is 4 bytes so 8 rects is a bytes32.      With 20 bytes32, we have up to 160 rects per trait / co-bots actually if we concat the bytes first.      This magic number comes from a small data analysis of the traits. We use the fact that an empty      bytes32 will lead to an empty rect (width and height 0)."
      },
      "getTraitBytes(uint256)": {
        "details": "Retrieve the bytes for the given trait from the traitPalette storage."
      },
      "getTraitIndex(uint256,uint256)": {
        "details": "This function lets map from layerIndex and itemIndex to traitIndex."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFillPalette(bytes)": {
        "details": "Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas."
      },
      "setLayerIndexes(bytes)": {
        "details": "Traits are stored as a plain list while the rendering works with layer and items within each layer.      Since each layer has a variable number of items, we store the index of the first trait of each layer."
      },
      "setTraitPalette(bytes)": {
        "details": "All the rects are concatenated together to save gas.      The traitPaletteIndexes is used to retrieve the rect from the traitPalette."
      },
      "setTraitPaletteIndexes(bytes)": {
        "details": "Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4185,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4293,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6385,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "fillPalette",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6387,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "traitPalette",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6389,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "traitPaletteIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6391,
        "contract": "contracts/co-bots/CoBotsRenderer.sol:CoBotsRenderer",
        "label": "layerIndexes",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}