{
  "address": "0xF0894e18c5Caef17EEE706Dd7c1C4749f83e542D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coBotsRenderer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevPointer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPointer",
          "type": "address"
        }
      ],
      "name": "CollectionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevPointer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPointer",
          "type": "address"
        }
      ],
      "name": "ColorPaletteChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "getCoBotAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        }
      ],
      "name": "getCoBotItems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "traits",
          "type": "bytes"
        }
      ],
      "name": "storeCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        }
      ],
      "name": "storePalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6ee3b6d37d2e4a5c361d9e34d31f50fbb961608818dccc927dee1bfeb6486be",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xF0894e18c5Caef17EEE706Dd7c1C4749f83e542D",
    "transactionIndex": 60,
    "gasUsed": "2070314",
    "logsBloom": "0x
    "blockHash": "0x978abc7985182d18bfcb86ad61a394816d5a1e589cc3314cfa4cd2c50e3c1ae4",
    "transactionHash": "0xc6ee3b6d37d2e4a5c361d9e34d31f50fbb961608818dccc927dee1bfeb6486be",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 10547715,
        "transactionHash": "0xc6ee3b6d37d2e4a5c361d9e34d31f50fbb961608818dccc927dee1bfeb6486be",
        "address": "0xF0894e18c5Caef17EEE706Dd7c1C4749f83e542D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x978abc7985182d18bfcb86ad61a394816d5a1e589cc3314cfa4cd2c50e3c1ae4"
      }
    ],
    "blockNumber": 10547715,
    "cumulativeGasUsed": "6573818",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAB23145aC706A2454cCAD3ED7c76569CAf3D3fAD"
  ],
  "numDeployments": 5,
  "solcInputHash": "f1416a8a60babb052e0941b181f3c9fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coBotsRenderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPointer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPointer\",\"type\":\"address\"}],\"name\":\"CollectionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPointer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPointer\",\"type\":\"address\"}],\"name\":\"ColorPaletteChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"getCoBotAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"getCoBotItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"}],\"name\":\"storeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"storePalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/co-bots/CoBotsRendererV2.sol\":\"CoBotsRendererV2\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\nimport {RendererCommons} from \\\"./RendererCommons.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for bytes[];\\n    using Array for string[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    /** @dev Decode a bytes array.\\n     *  @param rectsBytes The bytes concatenating several rects, typically from getTraitsBytes\\n     *  @param palette The image palette.\\n     *  @return A string of all the decoded rects.\\n     */\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(\\n                bytes4(rectsBytes.toUint32(i * 4)),\\n                palette\\n            );\\n        }\\n        return rects.join();\\n    }\\n\\n    /** @dev Usually, an image is made of a selection of one trait in each characteristic. This function can then be\\n     *  used to get the single bytes array containing all the data for a given token (set of traits).\\n     *  @param pointer The address of the SSTORE2 contract.\\n     *  @param items A list of trait indexes, should be of the same length as the number of characteristics.\\n     *  @return The bytes array for the whole image.\\n     */\\n    function imageBytes(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes[] memory traits = new bytes[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            traits[i] = getTraitBytes(pointer, i, items[i]);\\n        }\\n        return traits.join();\\n    }\\n\\n    /** @dev Get the inner part (without the header) of an image, ie the concatenated list of <rect>s.\\n     * @param collectionPointer The address of the SSTORE2 contract for the traits.\\n     * @param palettePointer The address of the SSTORE2 contract for the palette.\\n     * @param items A list of trait indexes, should be of the same length as the number of characteristics.\\n     * @return The inner part of the svg as a string.\\n     */\\n    function decodeImage(\\n        address collectionPointer,\\n        address palettePointer,\\n        uint256[] memory items\\n    ) public view returns (string memory) {\\n        return\\n            decodeBytesMemoryToRects(\\n                imageBytes(collectionPointer, items),\\n                RendererCommons.getPalette(palettePointer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7210670999682fc432dc2c92b6eaf6231d17ee699e21b91bef875e594253745c\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RendererCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nstruct Attribute {\\n    string trait_type;\\n    string value;\\n}\\n\\n/**  @title BaseRenderer\\n *\\n *   This library contains shared functionality and constants for the renderers.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RendererCommons {\\n    using Integers for uint256;\\n    using Integers for uint8;\\n    using Array for string[];\\n\\n    string public constant DATA_URI = \\\"data:image/svg+xml,\\\";\\n    string public constant XMLNS_HEADER =\\n        \\\"xmlns=%27http://www.w3.org/2000/svg%27\\\";\\n    string public constant SPACE = \\\"%20\\\";\\n    string public constant QUOTE = \\\"%27\\\";\\n    string public constant NUMBER_SIGN = \\\"%23\\\";\\n    string public constant TAG_START = \\\"%3c\\\";\\n    string public constant TAG_END = \\\"/%3e\\\";\\n\\n    event BytesStored(address pointer);\\n\\n    /**\\n     * @dev Usually colors are already defined in hex color space so we just concat all the colors. No check is made\\n     *      and this function only concatenates the input colors.\\n     * @param palette The list of colors as hex strings, without the leading #.\\n     * @return The concatenated colors as string. To be used as bytes afterwards.\\n     */\\n    function encodePalette(string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"0x\\\", palette.join());\\n    }\\n\\n    /** @dev Returns one single color reading directly from the storage.\\n     * @param pointer The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(address pointer, uint256 index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bytes memory palette = SSTORE2.read(pointer, 3 * index, 3 * index + 3);\\n\\n        return\\n            string.concat(\\n                uint8(palette[0]).toString(16, 2),\\n                uint8(palette[1]).toString(16, 2),\\n                uint8(palette[2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Returns one single color from a pre-loaded whole palette as a bytes array.\\n     * @param palette A bytes array encoding several RGB colors. Length should be a multiple of 3.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(bytes memory palette, uint256 index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * index]).toString(16, 2),\\n                uint8(palette[3 * index + 1]).toString(16, 2),\\n                uint8(palette[3 * index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Decode the whole palette once for all and returns an array of hexstrings.\\n     * @param pointer The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\\n     * @return An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getPalette(address pointer) public view returns (string[] memory) {\\n        bytes memory palette = SSTORE2.read(pointer);\\n        return getPalette(palette);\\n    }\\n\\n    function getPalette(bytes memory palette)\\n        public\\n        pure\\n        returns (string[] memory)\\n    {\\n        uint256 paletteSize = palette.length / 3;\\n        string[] memory paletteHex = new string[](paletteSize);\\n        for (uint256 i = 0; i < paletteSize; i++) {\\n            paletteHex[i] = getFill(palette, i);\\n        }\\n        return paletteHex;\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param names The bytes the names encoded by the RectEncoder.\\n     */\\n    function decodeNames(bytes memory names)\\n        public\\n        pure\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return abi.decode(names, (string, string[], string[][]));\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param pointer The address of the SSTORE2 contract for the names.\\n     */\\n    function decodeNames(address pointer)\\n        public\\n        view\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return decodeNames(SSTORE2.read(pointer));\\n    }\\n\\n    function tokenAttributes(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (Attribute[] memory)\\n    {\\n        (\\n            ,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        ) = decodeNames(SSTORE2.read(pointer));\\n        Attribute[] memory attributes = new Attribute[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            attributes[i] = Attribute(\\n                characteristicNames[i],\\n                traitNames[i][items[i]]\\n            );\\n        }\\n        return attributes;\\n    }\\n}\\n\",\"keccak256\":\"0x10eb70b78ba11e37cc614110181412454e509052685ec86ca1003a232c14d6c0\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xd894eac2f223760da25e079d125b4c0de282a6d609a1e8a1834f5dc1c02550d5\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/co-bots/CoBotsRendererV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {RendererCommons} from \\\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RendererCommons.sol\\\";\\nimport {RectRenderer} from \\\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectRenderer.sol\\\";\\nimport {Array} from \\\"@clemlaflemme.eth/contracts/contracts/lib/utils/Array.sol\\\";\\nimport {Integers} from \\\"@clemlaflemme.eth/contracts/contracts/lib/utils/Integers.sol\\\";\\nimport \\\"../interfaces/ICoBotsRendererV2.sol\\\";\\nimport \\\"../interfaces/ICoBotsRenderer.sol\\\";\\n\\n/*  @title CoBots Renderer V2\\n    @author Clement Walter\\n    @dev Update color palette, remove colors and use metta instead of status\\n*/\\ncontract CoBotsRendererV2 is Ownable, ReentrancyGuard, ICoBotsRendererV2 {\\n    using Array for string[];\\n    using Array for bytes[];\\n    using Integers for uint256;\\n\\n    address palettePointer;\\n    address collectionPointer;\\n    ICoBotsRenderer coBotsRenderer;\\n\\n    event ColorPaletteChanged(address prevPointer, address newPointer);\\n    event CollectionChanged(address prevPointer, address newPointer);\\n\\n    function storePalette(bytes memory palette) public {\\n        address prevPointer = palettePointer;\\n        palettePointer = SSTORE2.write(palette);\\n        emit ColorPaletteChanged(prevPointer, palettePointer);\\n    }\\n\\n    function storeCollection(bytes memory traits) public {\\n        address prevPointer = collectionPointer;\\n        collectionPointer = SSTORE2.write(traits);\\n        emit CollectionChanged(prevPointer, collectionPointer);\\n    }\\n\\n    constructor(address _coBotsRenderer) {\\n        coBotsRenderer = ICoBotsRenderer(_coBotsRenderer);\\n    }\\n\\n    function getCoBotItems(uint256 tokenId, uint8 seed)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        ) = coBotsRenderer.getRandomItems(tokenId, seed);\\n\\n        uint256[] memory items = new uint256[](10);\\n        items[0] = 0; // always Black for the Extravagainza\\n        items[1] = tokenId / 1000;\\n        items[2] = (tokenId / 100) % 10;\\n        items[3] = (tokenId / 10) % 10;\\n        items[4] = tokenId % 10;\\n        items[5] = eyesIndex;\\n        items[6] = mouthIndex;\\n        items[7] = antennaIndex;\\n        items[8] = feetIndex;\\n        items[9] = seed % 2; // Metta \\\"Offline\\\" disabled for the Extravagainza\\n        return items;\\n    }\\n\\n    function imageURI(uint256[] memory items)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                RendererCommons.DATA_URI,\\n                coBotsRenderer.SVG_TAG_START(),\\n                RectRenderer.decodeBytesMemoryToRects(\\n                    RectRenderer.imageBytes(collectionPointer, items),\\n                    RendererCommons.getPalette(palettePointer)\\n                ),\\n                coBotsRenderer.SVG_TAG_END()\\n            );\\n    }\\n\\n    function getCoBotAttributes(uint256[] memory items)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Inlined instead of using the encoded names from the RectRenderer because not all the characteristics are\\n        // used in the Extravagainza, so saving gas with this.\\n        string[12] memory antenna = [\\n            \\\"Classic\\\",\\n            \\\"Serious\\\",\\n            \\\"Jumpy\\\",\\n            \\\"Buzzed\\\",\\n            \\\"Buggy\\\",\\n            \\\"Punk\\\",\\n            \\\"Angelic\\\",\\n            \\\"Impish\\\",\\n            \\\"Humbled\\\",\\n            \\\"Western\\\",\\n            \\\"Royal\\\",\\n            \\\"Hacky\\\"\\n        ];\\n        string[12] memory eyes = [\\n            \\\"Classic\\\",\\n            \\\"Cyclops\\\",\\n            \\\"Awoken\\\",\\n            \\\"Flirty\\\",\\n            \\\"Zen\\\",\\n            \\\"Sadhappy\\\",\\n            \\\"Unaligned\\\",\\n            \\\"Smitten\\\",\\n            \\\"Optimistic\\\",\\n            \\\"Hacky\\\",\\n            \\\"Super\\\",\\n            \\\"Nounish\\\"\\n        ];\\n        string[11] memory feet = [\\n            \\\"Classic\\\",\\n            \\\"Heavy Duty\\\",\\n            \\\"Firey\\\",\\n            \\\"Little Firey\\\",\\n            \\\"Roller\\\",\\n            \\\"Little Roller\\\",\\n            \\\"Energetic\\\",\\n            \\\"Little Energetic\\\",\\n            \\\"Hobbled\\\",\\n            \\\"Ghostly\\\",\\n            \\\"Pushy\\\"\\n        ];\\n        string[2] memory metta = [\\\"Off\\\", \\\"On\\\"];\\n        string[11] memory mouth = [\\n            \\\"Classic\\\",\\n            \\\"Worried\\\",\\n            \\\"Knightly\\\",\\n            \\\"Shy\\\",\\n            \\\"Happy\\\",\\n            \\\"Bigsad\\\",\\n            \\\"Smug\\\",\\n            \\\"Wowed\\\",\\n            \\\"Thirsty\\\",\\n            \\\"Villainous\\\",\\n            \\\"Shady\\\"\\n        ];\\n\\n        return\\n            string.concat(\\n                \\\"[\\\",\\n                '{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"',\\n                eyes[items[5]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Feet\\\", \\\"value\\\": \\\"',\\n                feet[items[8]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Metta\\\", \\\"value\\\": \\\"',\\n                metta[items[9]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Mouth\\\", \\\"value\\\": \\\"',\\n                mouth[items[6]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Antenna\\\", \\\"value\\\": \\\"',\\n                antenna[items[7]],\\n                '\\\"}',\\n                \\\"]\\\"\\n            );\\n    }\\n\\n    function tokenURI(uint256 tokenId, uint8 seed)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        uint256[] memory items = getCoBotItems(tokenId, seed);\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image\\\": \\\"',\\n                imageURI(items),\\n                '\\\"',\\n                ',\\\"description\\\": \\\"Co-Bots are cooperation robots | CC0 & 100% On-Chain | co-bots.com.\\\"',\\n                ',\\\"name\\\": \\\"Co-Bot #',\\n                tokenId.toString(),\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                getCoBotAttributes(items),\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x39245482497ee9bdb91aa35ba5df733c8ff0b6b732cfb8bc483bdd3762a06d7d\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRenderer {\\n    function SVG_TAG_START() external view returns (string memory);\\n\\n    function SVG_TAG_END() external view returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) external view returns (string memory);\\n\\n    function getRandomItems(uint256 tokenId, uint8 seed)\\n        external\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        );\\n}\\n\",\"keccak256\":\"0x9d4b56ff1e5444c8876d0ceccf111ab63a0b48f80941b30bc90ddb1ad997123a\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRendererV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRendererV2 {\\n    function tokenURI(uint256 tokenId, uint8 seed)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x079473df449ff8b78ee063b26593b4e87abb8ed63866213f0cc5dc0d221187ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806388d4c6cf11610076578063e50fe81e1161005b578063e50fe81e1461012d578063f1e12d6a1461014d578063f2fde38b1461016057600080fd5b806388d4c6cf146101015780638da5cb5b1461011457600080fd5b80633cc54c23146100a85780634f31249b146100bd5780635cc518ba146100d0578063715018a6146100f9575b600080fd5b6100bb6100b636600461176a565b610173565b005b6100bb6100cb36600461176a565b6101f1565b6100e36100de3660046117d1565b610263565b6040516100f09190611870565b60405180910390f35b6100bb610345565b6100e361010f366004611929565b610384565b6000546001600160a01b03166040516100f09190611984565b61014061013b3660046117d1565b61069e565b6040516100f091906119f6565b6100e361015b366004611929565b6108f7565b6100bb61016e366004611a1b565b61151a565b6003546001600160a01b031661018882611576565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517f2b6ca4cbda96534ab1e865e0e9686ed13f63f1ad6e54185bde7686f0ed726a5e916101e591849190611a3c565b60405180910390a15050565b6002546001600160a01b031661020682611576565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517f7376cd5cdde023cd48fdd9dd3023f01d63441ac9d6b9b52e3b750f0c3dc25267916101e591849190611a3c565b60606000610271848461069e565b905061027c81610384565b6040517f6900a3ae00000000000000000000000000000000000000000000000000000000815273__$2a9b762fd8664b1aa3edd8569463e9cda4$__90636900a3ae906102cc908890600401611a57565b600060405180830381865af41580156102e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103119190810190611abd565b61031a836108f7565b60405160200161032c93929190611b1a565b6040516020818303038152906040529150505b92915050565b6000546001600160a01b031633146103785760405162461bcd60e51b815260040161036f90611ccd565b60405180910390fd5b61038260006115f4565b565b604080518082018252601381527f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000060208201526004805483517f480bc3c800000000000000000000000000000000000000000000000000000000815293516060946001600160a01b039092169263480bc3c8928082019260009290918290030181865afa158015610419573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104419190810190611abd565b6003546040517ff3ab4be700000000000000000000000000000000000000000000000000000000815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__9163999086e391839163f3ab4be7916104a6916001600160a01b0316908a90600401611d1a565b600060405180830381865af41580156104c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104eb9190810190611abd565b6002546040517f657fb2e100000000000000000000000000000000000000000000000000000000815273__$75a5c6c1ddcd30c79038ef22d8e93ac41a$",
  "libraries": {
    "RendererCommons": "0x91F59E8d53061DD2F7C4a405984D9a4297C54A0C",
    "RectRenderer": "0x9D7FeA76a906A67DE351b657CD73E6bf8F04b840",
    "RectEncoder": "0xc8AD48942deb7BAa9B15665aa72656A259277eaF",
    "Array": "0x1FA6A2152871D5A4D1f56511110C9a353CA48339",
    "Integers": "0xFD60cDD345feB6011fDeb4Dc3d69aD2319f8508C"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5974,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6082,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9640,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "palettePointer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9642,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "collectionPointer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9645,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "coBotsRenderer",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICoBotsRenderer)11552"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICoBotsRenderer)11552": {
        "encoding": "inplace",
        "label": "contract ICoBotsRenderer",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}