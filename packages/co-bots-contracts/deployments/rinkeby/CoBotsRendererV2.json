{
  "address": "0x52c9BE33B36eBE524408adF4032816C7aA163448",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coBotsRenderer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevPointer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPointer",
          "type": "address"
        }
      ],
      "name": "CollectionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_palette",
          "type": "address"
        }
      ],
      "name": "ColorPaletteChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        }
      ],
      "name": "getCoBotAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        }
      ],
      "name": "getCoBotBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        }
      ],
      "name": "getCoBotItems",
      "outputs": [
        {
          "internalType": "uint256[10]",
          "name": "",
          "type": "uint256[10]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[10]",
          "name": "items",
          "type": "uint256[10]"
        }
      ],
      "name": "imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "traits",
              "type": "bytes"
            },
            {
              "internalType": "string[][]",
              "name": "traitNames",
              "type": "string[][]"
            },
            {
              "internalType": "string[]",
              "name": "characteristicNames",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct CollectionEncoded",
          "name": "collection",
          "type": "tuple"
        }
      ],
      "name": "storeCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        }
      ],
      "name": "storePalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "seed",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12c0139ea54b59094129ddff4590931ee076cc2547ae982dc9cff1113de83f3c",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x52c9BE33B36eBE524408adF4032816C7aA163448",
    "transactionIndex": 24,
    "gasUsed": "2041436",
    "logsBloom": "0x
    "blockHash": "0x63331def11a5f7a4c7a2ac325c9a6776ead2bd69348c4e8715b22c4a9d248983",
    "transactionHash": "0x12c0139ea54b59094129ddff4590931ee076cc2547ae982dc9cff1113de83f3c",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 10533877,
        "transactionHash": "0x12c0139ea54b59094129ddff4590931ee076cc2547ae982dc9cff1113de83f3c",
        "address": "0x52c9BE33B36eBE524408adF4032816C7aA163448",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x63331def11a5f7a4c7a2ac325c9a6776ead2bd69348c4e8715b22c4a9d248983"
      }
    ],
    "blockNumber": 10533877,
    "cumulativeGasUsed": "3696385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAB23145aC706A2454cCAD3ED7c76569CAf3D3fAD"
  ],
  "numDeployments": 1,
  "solcInputHash": "526d079cfccc98d8684cb23b407c3de5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coBotsRenderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPointer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPointer\",\"type\":\"address\"}],\"name\":\"CollectionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_palette\",\"type\":\"address\"}],\"name\":\"ColorPaletteChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"getCoBotItems\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct CollectionEncoded\",\"name\":\"collection\",\"type\":\"tuple\"}],\"name\":\"storeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"storePalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/co-bots/CoBotsRendererV2.sol\":\"CoBotsRendererV2\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror CoordinatesOutOfRange(uint256 coordinate);\\n\\nstruct Rect {\\n    uint32 x;\\n    uint32 y;\\n    uint32 width;\\n    uint32 height;\\n    uint32 fillIndex;\\n}\\n\\nstruct Trait {\\n    Rect[] rects;\\n    string name;\\n}\\n\\nstruct TraitEncoded {\\n    bytes rects;\\n    string name;\\n}\\n\\nstruct Characteristic {\\n    Trait[] traits;\\n    string name;\\n}\\n\\nstruct CharacteristicEncoded {\\n    bytes traits;\\n    string[] names;\\n    string name;\\n}\\n\\nstruct Collection {\\n    Characteristic[] characteristics;\\n    string description;\\n}\\n\\nstruct CollectionEncoded {\\n    bytes traits;\\n    string[][] traitNames;\\n    string[] characteristicNames;\\n    string description;\\n}\\n\\n/**  @title RectEncoder\\n *\\n *   This library can be used (off-chain !) to encode a collection to be deployed and render on-chain images with the\\n *   RectRenderer.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\ncontract RectEncoder {\\n    using Array for string[];\\n    using Array for bytes[];\\n    using Array for uint16[];\\n    using Array for bytes4[];\\n\\n    /** @dev Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!\\n     *\\n     * @param rect The <rect> to encode\\n     * @return The encoded rectangle as a bytes4\\n     */\\n    function encodeRect(Rect memory rect) public pure returns (bytes4) {\\n        // each coordinates should use only 6 bits and is consequently stored like 00nnnnnn\\n        if (rect.x > 63) revert CoordinatesOutOfRange(rect.x);\\n        if (rect.y > 63) revert CoordinatesOutOfRange(rect.y);\\n        if (rect.width > 63) revert CoordinatesOutOfRange(rect.width);\\n        if (rect.height > 63) revert CoordinatesOutOfRange(rect.height);\\n        return\\n            bytes4(rect.x << 26) |\\n            bytes4(rect.y << 20) |\\n            bytes4(rect.width << 14) |\\n            bytes4(rect.height << 8) |\\n            bytes4(rect.fillIndex);\\n    }\\n\\n    /** @dev Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.\\n     *       Use this off-chain!\\n     *\\n     * @param trait The list of <rect>s to encode with a given name; should be shorter than 32 char.\\n     * @return The encoded list of rectangle\\n     */\\n    function encodeTrait(Trait memory trait)\\n        public\\n        pure\\n        returns (TraitEncoded memory)\\n    {\\n        bytes4[] memory rects = new bytes4[](trait.rects.length);\\n        for (uint256 i = 0; i < trait.rects.length; i++) {\\n            rects[i] = encodeRect(trait.rects[i]);\\n        }\\n        return TraitEncoded(rects.join(), trait.name);\\n    }\\n\\n    /** @dev Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that\\n     *       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the\\n     *       characteristics) but it's how it's used and expected today so we keep the wording here.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *  @param characteristic The list of Trait constituting the characteristic.\\n     *  @return The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCharacteristic(Characteristic memory characteristic)\\n        public\\n        pure\\n        returns (CharacteristicEncoded memory)\\n    {\\n        bytes[] memory rects = new bytes[](characteristic.traits.length);\\n        string[] memory names = new string[](characteristic.traits.length);\\n        uint16[] memory lengths = new uint16[](\\n            characteristic.traits.length + 1\\n        );\\n        uint16 cumSum = 4 +\\n            2 *\\n            uint16(characteristic.traits.length % type(uint16).max); // 2 extra bytes for storing start & end for each trait\\n        for (uint256 i = 0; i < characteristic.traits.length; i++) {\\n            TraitEncoded memory tmp = encodeTrait(characteristic.traits[i]);\\n            rects[i] = tmp.rects;\\n            names[i] = tmp.name;\\n            lengths[i] = cumSum;\\n            cumSum += uint16(rects[i].length % type(uint16).max);\\n        }\\n        lengths[characteristic.traits.length] = cumSum;\\n        return (\\n            CharacteristicEncoded(\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            (characteristic.traits.length + 1) %\\n                                type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    rects.join()\\n                ),\\n                names,\\n                characteristic.name\\n            )\\n        );\\n    }\\n\\n    /** @dev Use this function to encode a full collection, i.e. a list of characteristics.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *\\n     * @param collection The list of Characteristic constituting the collection. The description is just returned in the\\n     *        new object and can be used to store the description of the collection.\\n     * @return The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCollection(Collection memory collection)\\n        public\\n        pure\\n        returns (CollectionEncoded memory)\\n    {\\n        bytes[] memory traits = new bytes[](collection.characteristics.length);\\n        string[] memory characteristicNames = new string[](\\n            collection.characteristics.length\\n        );\\n        string[][] memory traitNames = new string[][](\\n            collection.characteristics.length\\n        );\\n        uint16[] memory lengths = new uint16[](\\n            collection.characteristics.length\\n        );\\n        // init characteristic pointer shift with 2 bytes for length + 2 bytes per characteristic\\n        uint16 cumSum = 2 +\\n            2 *\\n            uint16(collection.characteristics.length % type(uint16).max);\\n        for (uint256 i = 0; i < collection.characteristics.length; i++) {\\n            CharacteristicEncoded memory tmp = encodeCharacteristic(\\n                collection.characteristics[i]\\n            );\\n            lengths[i] = cumSum;\\n            traits[i] = tmp.traits;\\n            traitNames[i] = tmp.names;\\n            characteristicNames[i] = tmp.name;\\n            cumSum += uint16(traits[i].length % type(uint16).max);\\n        }\\n        return (\\n            CollectionEncoded(\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            collection.characteristics.length % type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    traits.join()\\n                ),\\n                traitNames,\\n                characteristicNames,\\n                collection.description\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd57812e8b557232b4e9dac2d077593b19b4ff2b0ee2daf1cb495c2a86d9c78a6\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for string[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(\\n                bytes4(rectsBytes.toUint32(i * 4)),\\n                palette\\n            );\\n        }\\n        return rects.join();\\n    }\\n}\\n\",\"keccak256\":\"0x6988e1c92952faa88961cbe29f0ef8705cc652496460626b9ebc743bee66b525\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RendererCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\n/**  @title BaseRenderer\\n *\\n *   This library contains shared functionality and constants for the renderers.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RendererCommons {\\n    using Integers for uint256;\\n    using Integers for uint8;\\n    using Array for string[];\\n\\n    string public constant DATA_URI = \\\"data:image/svg+xml,\\\";\\n    string public constant XMLNS_HEADER =\\n        \\\"xmlns=%27http://www.w3.org/2000/svg%27\\\";\\n    string public constant SPACE = \\\"%20\\\";\\n    string public constant QUOTE = \\\"%27\\\";\\n    string public constant NUMBER_SIGN = \\\"%23\\\";\\n    string public constant TAG_START = \\\"%3c\\\";\\n    string public constant TAG_END = \\\"/%3e\\\";\\n\\n    event BytesStored(address pointer);\\n\\n    /**\\n     * @dev Usually colors are already defined in hex color space so we just concat all the colors. No check is made\\n     *      and this function only concatenates the input colors.\\n     * @param palette The list of colors as hex strings, without the leading #.\\n     * @return The concatenated colors as string. To be used as bytes afterwards.\\n     */\\n    function encodePalette(string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"0x\\\", palette.join());\\n    }\\n\\n    /** @dev Returns one single color reading directly from the storage.\\n     * @param pointer The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(address pointer, uint256 index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bytes memory palette = SSTORE2.read(pointer, 3 * index, 3 * index + 3);\\n\\n        return\\n            string.concat(\\n                uint8(palette[0]).toString(16, 2),\\n                uint8(palette[1]).toString(16, 2),\\n                uint8(palette[2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Returns one single color from a pre-loaded whole palette as a bytes array.\\n     * @param palette A bytes array encoding several RGB colors. Length should be a multiple of 3.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(bytes memory palette, uint256 index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * index]).toString(16, 2),\\n                uint8(palette[3 * index + 1]).toString(16, 2),\\n                uint8(palette[3 * index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Decode the whole palette once for all and returns an array of hexstrings.\\n     * @param pointer The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\\n     * @return An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getPalette(address pointer) public view returns (string[] memory) {\\n        bytes memory palette = SSTORE2.read(pointer);\\n        return getPalette(palette);\\n    }\\n\\n    function getPalette(bytes memory palette)\\n        public\\n        pure\\n        returns (string[] memory)\\n    {\\n        uint256 paletteSize = palette.length / 3;\\n        string[] memory paletteHex = new string[](paletteSize);\\n        for (uint256 i = 0; i < paletteSize; i++) {\\n            paletteHex[i] = getFill(palette, i);\\n        }\\n        return paletteHex;\\n    }\\n}\\n\",\"keccak256\":\"0xa8682ba1c29f814c8fe708222cb89cdc0c9b28e2b34cf4534143b8ff5ff9a182\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xd894eac2f223760da25e079d125b4c0de282a6d609a1e8a1834f5dc1c02550d5\",\"license\":\"MIT\"},\"@clemlaflemme.eth/contracts/contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/co-bots/CoBotsRendererV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {CollectionEncoded} from \\\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectEncoder.sol\\\";\\nimport {RendererCommons} from \\\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RendererCommons.sol\\\";\\nimport {RectRenderer} from \\\"@clemlaflemme.eth/contracts/contracts/lib/renderers/RectRenderer.sol\\\";\\nimport {Array} from \\\"@clemlaflemme.eth/contracts/contracts/lib/utils/Array.sol\\\";\\nimport {Integers} from \\\"@clemlaflemme.eth/contracts/contracts/lib/utils/Integers.sol\\\";\\nimport \\\"../interfaces/ICoBotsRendererV2.sol\\\";\\nimport \\\"../interfaces/ICoBotsRenderer.sol\\\";\\n\\n/*  @title CoBots Renderer V2\\n    @author Clement Walter\\n    @dev Update color palette, remove colors and use metta instead of status\\n*/\\ncontract CoBotsRendererV2 is Ownable, ReentrancyGuard, ICoBotsRendererV2 {\\n    using Array for string[];\\n    using Integers for uint256;\\n\\n    address palettePointer;\\n    address collectionPointer;\\n    string[] characteristicNames;\\n    string[][] traitNames;\\n    string description;\\n    ICoBotsRenderer coBotsRenderer;\\n\\n    event ColorPaletteChanged(address _palette);\\n    event CollectionChanged(address prevPointer, address newPointer);\\n\\n    function storePalette(bytes memory palette) public {\\n        palettePointer = SSTORE2.write(palette);\\n        emit ColorPaletteChanged(palettePointer);\\n    }\\n\\n    function storeCollection(CollectionEncoded memory collection) public {\\n        address prevPointer = collectionPointer;\\n        collectionPointer = SSTORE2.write(collection.traits);\\n        characteristicNames = collection.characteristicNames;\\n        traitNames = collection.traitNames;\\n        description = collection.description;\\n        emit CollectionChanged(prevPointer, collectionPointer);\\n    }\\n\\n    constructor(address _coBotsRenderer) {\\n        coBotsRenderer = ICoBotsRenderer(_coBotsRenderer);\\n    }\\n\\n    function getCoBotItems(uint256 tokenId, uint8 seed)\\n        public\\n        view\\n        returns (uint256[10] memory)\\n    {\\n        // Characteristics are stored in alphabetical order:\\n        uint256 eyesIndex;\\n        uint256 mouthIndex;\\n        uint256 antennaIndex;\\n        uint256 feetIndex;\\n        uint256 statusIndex = seed % 2;\\n        (eyesIndex, mouthIndex, antennaIndex, feetIndex) = coBotsRenderer\\n            .getRandomItems(tokenId, seed);\\n\\n        uint256[10] memory items;\\n        items[0] = antennaIndex;\\n        items[1] = 0; // always Black for the Extravagainza\\n        items[2] = tokenId / 1000;\\n        items[3] = (tokenId / 100) % 10;\\n        items[4] = (tokenId / 10) % 10;\\n        items[5] = tokenId % 10;\\n        items[6] = eyesIndex;\\n        items[7] = feetIndex;\\n        items[8] = mouthIndex;\\n        items[9] = statusIndex;\\n        return items;\\n    }\\n\\n    function getCoBotBytes(uint256[10] memory items)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        // but one needs another order for proper layering:\\n        return\\n            bytes.concat(\\n                RectRenderer.getTraitBytes(collectionPointer, 1, items[1]), // 1. Colour\\n                RectRenderer.getTraitBytes(collectionPointer, 2, items[2]), // 2. Digit 1\\n                RectRenderer.getTraitBytes(collectionPointer, 3, items[3]), // 3. Digit 2\\n                RectRenderer.getTraitBytes(collectionPointer, 4, items[4]), // 4. Digit 3\\n                RectRenderer.getTraitBytes(collectionPointer, 5, items[5]), // 5. Digit 4\\n                RectRenderer.getTraitBytes(collectionPointer, 6, items[6]), // 6. Eyes\\n                RectRenderer.getTraitBytes(collectionPointer, 8, items[8]), // 8. Mouth\\n                RectRenderer.getTraitBytes(collectionPointer, 0, items[0]), // 0. Antenna\\n                RectRenderer.getTraitBytes(collectionPointer, 7, items[7]), // 7. Feet\\n                items[9] == 1\\n                    ? RectRenderer.getTraitBytes(collectionPointer, 9, 0)\\n                    : new bytes(4) // 9. Status\\n            );\\n    }\\n\\n    function imageURI(uint256[10] memory items)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                RendererCommons.DATA_URI,\\n                coBotsRenderer.SVG_TAG_START(),\\n                RectRenderer.decodeBytesMemoryToRects(\\n                    getCoBotBytes(items),\\n                    RendererCommons.getPalette(palettePointer)\\n                ),\\n                coBotsRenderer.SVG_TAG_END()\\n            );\\n    }\\n\\n    function getCoBotAttributes(uint256[10] memory items)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        uint8[5] memory indexes = [6, 8, 0, 7, 9];\\n        string[] memory attributes = new string[](5);\\n        for (uint256 i = 0; i < 5; i++) {\\n            attributes[i] = string.concat(\\n                '{\\\"trait_type\\\": \\\"',\\n                characteristicNames[indexes[i]],\\n                '\\\", \\\"value\\\": \\\"',\\n                traitNames[indexes[i]][items[indexes[i]]],\\n                '\\\"}'\\n            );\\n        }\\n        return string.concat(\\\"[\\\", attributes.join(\\\",\\\"), \\\"]\\\");\\n    }\\n\\n    function tokenURI(uint256 tokenId, uint8 seed)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        uint256[10] memory items = getCoBotItems(tokenId, seed);\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image\\\": \\\"',\\n                imageURI(items),\\n                '\\\"',\\n                ',\\\"description\\\": \\\"',\\n                description,\\n                '\\\"',\\n                ',\\\"name\\\": \\\"Co-Bot #',\\n                tokenId.toString(),\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                getCoBotAttributes(items),\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xffd01a2d70532d696b0f3fabac34e01742f1bd7ffd3dae6b570507829509cb8f\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRenderer {\\n    function SVG_TAG_START() external view returns (string memory);\\n\\n    function SVG_TAG_END() external view returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) external view returns (string memory);\\n\\n    function getRandomItems(uint256 tokenId, uint8 seed)\\n        external\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        );\\n}\\n\",\"keccak256\":\"0x9d4b56ff1e5444c8876d0ceccf111ab63a0b48f80941b30bc90ddb1ad997123a\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRendererV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRendererV2 {\\n    function tokenURI(uint256 tokenId, uint8 seed)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x079473df449ff8b78ee063b26593b4e87abb8ed63866213f0cc5dc0d221187ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023f5380380620023f58339810160408190526200003491620000f3565b6200003f3362000069565b60018055600780546001600160a01b0319166001600160a01b039290921691909117905562000120565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b620000d781620000b9565b8114620000e357600080fd5b50565b8051620000c681620000cc565b6000602082840312156200010a576200010a600080fd5b6000620001188484620000e6565b949350505050565b6122c580620001306000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063ec71d0ff1161005b578063ec71d0ff14610168578063f2fde38b1461017b578063fad3492a1461018e57600080fd5b80638da5cb5b1461012f578063e50fe81e1461014857600080fd5b80635cc518ba116100a75780635cc518ba1461010157806365fafc0814610114578063715018a61461012757600080fd5b8063323cd367146100c35780634f31249b146100ec575b600080fd5b6100d66100d136600461145a565b6101a1565b6040516100e391906114de565b60405180910390f35b6100ff6100fa36600461158d565b610428565b005b6100d661010f3660046115dc565b610496565b6100d661012236600461145a565b61057c565b6100ff6107a7565b6000546001600160a01b03166040516100e39190611639565b61015b6101563660046115dc565b6107e6565b6040516100e39190611696565b6100d661017636600461145a565b61092c565b6100ff6101893660046116b9565b610f1d565b6100ff61019c3660046118fb565b610f79565b604080518082018252601381527f646174613a696d6167652f7376672b786d6c2c00000000000000000000000000602082015260075482517f480bc3c800000000000000000000000000000000000000000000000000000000815292516060936001600160a01b039092169163480bc3c89160048083019260009291908290030181865afa158015610237573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025f919081019061198e565b73F95E41C14C45798A8A60b20E8C92495C12416e6663999086e36102828661092c565b6002546040517f657fb2e100000000000000000000000000000000000000000000000000000000815273A040dB259B37219C3C18e987BE9Bc871C73408019163657fb2e1916102dd916001600160a01b031690600401611639565b600060405180830381865af41580156102fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103229190810190611a59565b6040518363ffffffff1660e01b815260040161033f929190611b04565b600060405180830381865af415801561035c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610384919081019061198e565b600760009054906101000a90046001600160a01b03166001600160a01b0316636f5c723b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ff919081019061198e565b6040516020016104129493929190611b4b565b6040516020818303038152906040529050919050565b61043181611054565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517f85b1f2b178b7000a8540a7f228e335a4d91d556bd54438839f6e821fede2b4a49161048b91611639565b60405180910390a150565b606060006104a484846107e6565b90506104af816101a1565b6040517f6900a3ae00000000000000000000000000000000000000000000000000000000815260069073FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C90636900a3ae90610502908990600401611b82565b600060405180830381865af415801561051f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610547919081019061198e565b6105508461057c565b6040516020016105639493929190611c59565b6040516020818303038152906040529150505b92915050565b6040805160a081018252600681526008602082015260008183018190526007606080840191909152600960808401528351600580825260c082019095529093816020015b60608152602001906001900390816105c057905050905060005b60058110156106e95760048382600581106105f7576105f7611daa565b602002015160ff168154811061060f5761060f611daa565b90600052602060002001600584836005811061062d5761062d611daa565b602002015160ff168154811061064557610645611daa565b906000526020600020018685846005811061066257610662611daa565b602002015160ff16600a811061067a5761067a611daa565b60200201518154811061068f5761068f611daa565b906000526020600020016040516020016106aa929190611dc0565b6040516020818303038152906040528282815181106106cb576106cb611daa565b602002602001018190525080806106e190611e65565b9150506105da565b506040517ffca1c0b9000000000000000000000000000000000000000000000000000000008152731FA6A2152871D5A4D1f56511110C9a353CA483399063fca1c0b99061073a908490600401611ed0565b600060405180830381865af4158015610757573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077f919081019061198e565b60405160200161078f9190611ef4565b60405160208183030381529060405292505050919050565b6000546001600160a01b031633146107da5760405162461bcd60e51b81526004016107d190611f80565b60405180910390fd5b6107e460006110d2565b565b6107ee611145565b6000808080806107ff600288611fa6565b6007546040517f47bf48f300000000000000000000000000000000000000000000000000000000815260ff9290921692506001600160a01b0316906347bf48f390610850908b908b90600401611fce565b608060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611ff4565b929750909550935091506108a3611145565b838152600060208201526108b96103e88a612058565b6040820152600a6108cb60648b612058565b6108d5919061206c565b6060820152600a6108e6818b612058565b6108f0919061206c565b6080820152610900600a8a61206c565b60a082015260c081019590955260e0850191909152610100840192909252506101208201529392505050565b600354602082015160405163108e6af960e21b815260609273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610979926001600160a01b03169160019160040161208a565b600060405180830381865af4158015610996573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109be919081019061198e565b600354604080850151905163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610a0b926001600160a01b03909216916002919060040161208a565b600060405180830381865af4158015610a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a50919081019061198e565b60038054606086015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6693634239abe493610a9a936001600160a01b039091169260040161208a565b600060405180830381865af4158015610ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610adf919081019061198e565b600354608086015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610b2b926001600160a01b039092169160049190820161208a565b600060405180830381865af4158015610b48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b70919081019061198e565b60035460a087015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610bbd926001600160a01b03909216916005919060040161208a565b600060405180830381865af4158015610bda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c02919081019061198e565b60035460c088015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610c4f926001600160a01b03909216916006919060040161208a565b600060405180830381865af4158015610c6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c94919081019061198e565b60035461010089015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610ce2926001600160a01b03909216916008919060040161208a565b600060405180830381865af4158015610cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d27919081019061198e565b600354895160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610d71926001600160a01b03909216916000919060040161208a565b600060405180830381865af4158015610d8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db6919081019061198e565b60035460e08b015160405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6692634239abe492610e03926001600160a01b03909216916007919060040161208a565b600060405180830381865af4158015610e20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e48919081019061198e565b6101208b0151600114610e77576040805160048082528183019092529060208201818036833701905050610f04565b60035460405163108e6af960e21b815273F95E41C14C45798A8A60b20E8C92495C12416e6691634239abe491610ebf916001600160a01b0316906009906000906004016120b2565b600060405180830381865af4158015610edc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f04919081019061198e565b6040516020016104129a999897969594939291906120da565b6000546001600160a01b03163314610f475760405162461bcd60e51b81526004016107d190611f80565b6001600160a01b038116610f6d5760405162461bcd60e51b81526004016107d19061215f565b610f76816110d2565b50565b60035481516001600160a01b0390911690610f9390611054565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905560408201518051610fd991600491602090910190611164565b506020808301518051610ff09260059201906111c1565b506060820151805161100a9160069160209091019061121a565b506003546040517f2b6ca4cbda96534ab1e865e0e9686ed13f63f1ad6e54185bde7686f0ed726a5e916110489184916001600160a01b0316906121c0565b60405180910390a15050565b60008061107f8360405160200161106b91906121e6565b60405160208183030381529060405261112f565b90508051602082016000f091506001600160a01b0382166110cc576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081518260405160200161041292919061223e565b604051806101400160405280600a906020820280368337509192915050565b8280548282559060005260206000209081019282156111b1579160200282015b828111156111b157825180516111a191849160209091019061121a565b5091602001919060010190611184565b506111bd92915061129a565b5090565b82805482825590600052602060002090810192821561120e579160200282015b8281111561120e57825180516111fe918491602090910190611164565b50916020019190600101906111e1565b506111bd9291506112b7565b82805461122690611ba6565b90600052602060002090601f016020900481019282611248576000855561128e565b82601f1061126157805160ff191683800117855561128e565b8280016001018555821561128e579182015b8281111561128e578251825591602001919060010190611273565b506111bd9291506112d4565b808211156111bd5760006112ae82826112e9565b5060010161129a565b808211156111bd5760006112cb8282611323565b506001016112b7565b5b808211156111bd57600081556001016112d5565b5080546112f590611ba6565b6000825580601f10611305575050565b601f016020900490600052602060002090810190610f7691906112d4565b5080546000825590600052602060002090810190610f76919061129a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561137d5761137d611341565b6040525050565b600061138f60405190565b905061139b8282611357565b919050565b600067ffffffffffffffff8211156113ba576113ba611341565b5060200290565b805b8114610f7657600080fd5b8035610576816113c1565b60006113ec6113e7846113a0565b611384565b9050806020840283018581111561140557611405600080fd5b835b818110156114275761141987826113ce565b835260209283019201611407565b5050509392505050565b600082601f83011261144557611445600080fd5b600a6114528482856113d9565b949350505050565b6000610140828403121561147057611470600080fd5b60006114528484611431565b60005b8381101561149757818101518382015260200161147f565b838111156114a6576000848401525b50505050565b60006114b6825190565b8084526020840193506114cd81856020860161147c565b601f01601f19169290920192915050565b602080825281016114ef81846114ac565b9392505050565b600067ffffffffffffffff82111561151057611510611341565b601f19601f83011660200192915050565b82818337506000910152565b600061153b6113e7846114f6565b90508281526020810184848401111561155657611556600080fd5b611561848285611521565b509392505050565b600082601f83011261157d5761157d600080fd5b813561145284826020860161152d565b6000602082840312156115a2576115a2600080fd5b813567ffffffffffffffff8111156115bc576115bc600080fd5b61145284828501611569565b60ff81166113c3565b8035610576816115c8565b600080604083850312156115f2576115f2600080fd5b60006115fe85856113ce565b925050602061160f858286016115d1565b9150509250929050565b60006001600160a01b038216610576565b61163381611619565b82525050565b60208101610576828461162a565b80611633565b6116578282611647565b5060200190565b60200190565b600a8160005b8281101561168f57815161167e868261164d565b95505060208201915060010161166a565b5050505050565b61014081016105768284611664565b6113c381611619565b8035610576816116a5565b6000602082840312156116ce576116ce600080fd5b600061145284846116ae565b600067ffffffffffffffff8211156116f4576116f4611341565b5060209081020190565b600061170c6113e7846116da565b8381529050602080820190840283018581111561172b5761172b600080fd5b835b8181101561142757803567ffffffffffffffff81111561174f5761174f600080fd5b850161175b8882611569565b8452506020928301920161172d565b600082601f83011261177e5761177e600080fd5b81356114528482602086016116fe565b600061179c6113e7846116da565b838152905060208082019084028301858111156117bb576117bb600080fd5b835b8181101561142757803567ffffffffffffffff8111156117df576117df600080fd5b85016117eb888261176a565b845250602092830192016117bd565b600082601f83011261180e5761180e600080fd5b813561145284826020860161178e565b60006080828403121561183357611833600080fd5b61183d6080611384565b9050813567ffffffffffffffff81111561185957611859600080fd5b61186584828501611569565b825250602082013567ffffffffffffffff81111561188557611885600080fd5b611891848285016117fa565b602083015250604082013567ffffffffffffffff8111156118b4576118b4600080fd5b6118c08482850161176a565b604083015250606082013567ffffffffffffffff8111156118e3576118e3600080fd5b6118ef84828501611569565b60608301525092915050565b60006020828403121561191057611910600080fd5b813567ffffffffffffffff81111561192a5761192a600080fd5b6114528482850161181e565b60006119446113e7846114f6565b90508281526020810184848401111561195f5761195f600080fd5b61156184828561147c565b600082601f83011261197e5761197e600080fd5b8151611452848260208601611936565b6000602082840312156119a3576119a3600080fd5b815167ffffffffffffffff8111156119bd576119bd600080fd5b6114528482850161196a565b60006119d76113e7846116da565b838152905060208082019084028301858111156119f6576119f6600080fd5b835b8181101561142757805167ffffffffffffffff811115611a1a57611a1a600080fd5b8501611a26888261196a565b845250602092830192016119f8565b600082601f830112611a4957611a49600080fd5b81516114528482602086016119c9565b600060208284031215611a6e57611a6e600080fd5b815167ffffffffffffffff811115611a8857611a88600080fd5b61145284828501611a35565b60006114ef83836114ac565b6000611aaa825190565b80845260208401935083602082028501611ac48560200190565b60005b84811015611af85783830388528151611ae08482611a94565b93505060208201602098909801979150600101611ac7565b50909695505050505050565b60408082528101611b1581856114ac565b905081810360208301526114528184611aa0565b6000611b33825190565b611b4181856020860161147c565b9290920192915050565b611b558186611b29565b9050611b618185611b29565b9050611b6d8184611b29565b9050611b798183611b29565b95945050505050565b602081016105768284611647565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611bba57607f821691505b602082108114156110cc576110cc611b90565b60008154611bda81611ba6565b600182168015611bf15760018114611c2057611c50565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831686528186019350611c50565b60008581526020902060005b83811015611c4857815488820152600190910190602001611c2c565b505081860193505b50505092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c000000000000000000008152601601611ca8817f7b22696d616765223a20220000000000000000000000000000000000000000009052565b600b01611cb58186611b29565b601160f91b81529050600101611cea817f2c226465736372697074696f6e223a20220000000000000000000000000000009052565b601101611cf78185611bcd565b601160f91b81529050600101611d2c817f2c226e616d65223a2022436f2d426f74202300000000000000000000000000009052565b601201611d398184611b29565b601160f91b81529050600101611d6e817f2c2261747472696275746573223a2000000000000000000000000000000000009052565b600f01611d7b8183611b29565b7f7d00000000000000000000000000000000000000000000000000000000000000815260010195945050505050565b634e487b7160e01b600052603260045260246000fd5b7f7b2274726169745f74797065223a2022000000000000000000000000000000008152601001611df08184611bcd565b7f222c202276616c7565223a20220000000000000000000000000000000000000081529050600d01611e228183611bcd565b7f227d00000000000000000000000000000000000000000000000000000000000081526002019392505050565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e9757611e97611e4f565b5060010190565b60018152602081017f2c000000000000000000000000000000000000000000000000000000000000008152905061165e565b60408082528101611ee18184611aa0565b905081810360208301526114ef81611e9e565b7f5b000000000000000000000000000000000000000000000000000000000000008152600101611f248183611b29565b7f5d00000000000000000000000000000000000000000000000000000000000000815260010192915050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261165e565b6020808252810161057681611f50565b634e487b7160e01b600052601260045260246000fd5b60ff9081169082165b9150600082611fc057611fc0611f90565b500690565b60ff8116611633565b60408101611fdc8285611647565b6114ef6020830184611fc5565b8051610576816113c1565b6000806000806080858703121561200d5761200d600080fd5b60006120198787611fe9565b945050602061202a87828801611fe9565b935050604061203b87828801611fe9565b925050606061204c87828801611fe9565b91505092959194509250565b60008261206757612067611f90565b500490565b81611faf565b600061057661207e8381565b90565b61163381612072565b60608101612098828661162a565b6120a56020830185612081565b6114526040830184611647565b606081016120c0828661162a565b6120cd6020830185612081565b6114526040830184612081565b6120e4818c611b29565b90506120f0818b611b29565b90506120fc818a611b29565b90506121088189611b29565b90506121148188611b29565b90506121208187611b29565b905061212c8186611b29565b90506121388185611b29565b90506121448184611b29565b90506121508183611b29565b9b9a5050505050505050505050565b6020808252810161057681602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b604081016121ce828561162a565b6114ef602083018461162a565b600081525b60010190565b6121ef816121db565b90506105768183611b29565b7f630000000000000000000000000000000000000000000000000000000000000081526121e0565b60006105768260e01b90565b61163363ffffffff8216612223565b612247816121fb565b9050612253818461222f565b600401612283817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b90506114ef8183611b2956fea26469706673582212208337a9a62b77c5a00d2887091bf19004c28d3cc8db55a35066702b389cefbf4964736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063ec71d0ff1161005b578063ec71d0ff14610168578063f2fde38b1461017b578063fad3492a1461018e57600080fd5b80638da5cb5b1461012f578063e50fe81e1461014857600080fd5b80635cc518ba116100a75780635cc518ba1461010157806365fafc0814610114578063715018a61461012757600080fd5b8063323cd367146100c35780634f31249b146100ec575b600080fd5b6100d66100d136600461145a565b6101a1565b6040516100e391906114de565b60405180910390f35b6100ff6100fa36600461158d565b610428565b005b6100d661010f3660046115dc565b610496565b6100d661012236600461145a565b61057c565b6100ff6107a7565b6000546001600160a01b03166040516100e39190611639565b61015b6101563660046115dc565b6107e6565b6040516100e39190611696565b6100d661017636600461145a565b61092c565b6100ff6101893660046116b9565b610f1d565b6100ff61019c3660046118fb565b610f79565b604080518082018252601381527f646174613a696d6167652f7376672b786d6c2c00000000000000000000000000602082015260075482517f480bc3c800000000000000000000000000000000000000000000000000000000815292516060936001600160a01b039092169163480bc3c89160048083019260009291908290030181865afa158015610237573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025f919081019061198e565b73__$8dbeda65cfccd7ed7a91dea9e4074110db$__63999086e36102828661092c565b6002546040517f657fb2e100000000000000000000000000000000000000000000000000000000815273__$75a5c6c1ddcd30c79038ef22d8e93ac41a$__9163657fb2e1916102dd916001600160a01b031690600401611639565b600060405180830381865af41580156102fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103229190810190611a59565b6040518363ffffffff1660e01b815260040161033f929190611b04565b600060405180830381865af415801561035c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610384919081019061198e565b600760009054906101000a90046001600160a01b03166001600160a01b0316636f5c723b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ff919081019061198e565b6040516020016104129493929190611b4b565b6040516020818303038152906040529050919050565b61043181611054565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517f85b1f2b178b7000a8540a7f228e335a4d91d556bd54438839f6e821fede2b4a49161048b91611639565b60405180910390a150565b606060006104a484846107e6565b90506104af816101a1565b6040517f6900a3ae00000000000000000000000000000000000000000000000000000000815260069073__$2a9b762fd8664b1aa3edd8569463e9cda4$__90636900a3ae90610502908990600401611b82565b600060405180830381865af415801561051f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610547919081019061198e565b6105508461057c565b6040516020016105639493929190611c59565b6040516020818303038152906040529150505b92915050565b6040805160a081018252600681526008602082015260008183018190526007606080840191909152600960808401528351600580825260c082019095529093816020015b60608152602001906001900390816105c057905050905060005b60058110156106e95760048382600581106105f7576105f7611daa565b602002015160ff168154811061060f5761060f611daa565b90600052602060002001600584836005811061062d5761062d611daa565b602002015160ff168154811061064557610645611daa565b906000526020600020018685846005811061066257610662611daa565b602002015160ff16600a811061067a5761067a611daa565b60200201518154811061068f5761068f611daa565b906000526020600020016040516020016106aa929190611dc0565b6040516020818303038152906040528282815181106106cb576106cb611daa565b602002602001018190525080806106e190611e65565b9150506105da565b506040517ffca1c0b900000000000000000000000000000000000000000000000000000000815273__$c94a70db6e173404880f68bb6708b44c9d$__9063fca1c0b99061073a908490600401611ed0565b600060405180830381865af4158015610757573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077f919081019061198e565b60405160200161078f9190611ef4565b60405160208183030381529060405292505050919050565b6000546001600160a01b031633146107da5760405162461bcd60e51b81526004016107d190611f80565b60405180910390fd5b6107e460006110d2565b565b6107ee611145565b6000808080806107ff600288611fa6565b6007546040517f47bf48f300000000000000000000000000000000000000000000000000000000815260ff9290921692506001600160a01b0316906347bf48f390610850908b908b90600401611fce565b608060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611ff4565b929750909550935091506108a3611145565b838152600060208201526108b96103e88a612058565b6040820152600a6108cb60648b612058565b6108d5919061206c565b6060820152600a6108e6818b612058565b6108f0919061206c565b6080820152610900600a8a61206c565b60a082015260c081019590955260e0850191909152610100840192909252506101208201529392505050565b600354602082015160405163108e6af960e21b815260609273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610979926001600160a01b03169160019160040161208a565b600060405180830381865af4158015610996573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109be919081019061198e565b600354604080850151905163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610a0b926001600160a01b03909216916002919060040161208a565b600060405180830381865af4158015610a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a50919081019061198e565b60038054606086015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__93634239abe493610a9a936001600160a01b039091169260040161208a565b600060405180830381865af4158015610ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610adf919081019061198e565b600354608086015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610b2b926001600160a01b039092169160049190820161208a565b600060405180830381865af4158015610b48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b70919081019061198e565b60035460a087015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610bbd926001600160a01b03909216916005919060040161208a565b600060405180830381865af4158015610bda573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c02919081019061198e565b60035460c088015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610c4f926001600160a01b03909216916006919060040161208a565b600060405180830381865af4158015610c6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c94919081019061198e565b60035461010089015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610ce2926001600160a01b03909216916008919060040161208a565b600060405180830381865af4158015610cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d27919081019061198e565b600354895160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610d71926001600160a01b03909216916000919060040161208a565b600060405180830381865af4158015610d8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db6919081019061198e565b60035460e08b015160405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$__92634239abe492610e03926001600160a01b03909216916007919060040161208a565b600060405180830381865af4158015610e20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e48919081019061198e565b6101208b0151600114610e77576040805160048082528183019092529060208201818036833701905050610f04565b60035460405163108e6af960e21b815273__$8dbeda65cfccd7ed7a91dea9e4074110db$",
  "libraries": {
    "RendererCommons": "0xA040dB259B37219C3C18e987BE9Bc871C7340801",
    "RectRenderer": "0xF95E41C14C45798A8A60b20E8C92495C12416e66",
    "RectEncoder": "0xd753E89a83FCC1D72f4353946E8ca96644D6ec54",
    "Array": "0x1FA6A2152871D5A4D1f56511110C9a353CA48339",
    "Integers": "0xFD60cDD345feB6011fDeb4Dc3d69aD2319f8508C"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6342,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6450,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10006,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "palettePointer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10008,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "collectionPointer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10011,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "characteristicNames",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 10015,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "traitNames",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
      },
      {
        "astId": 10017,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "description",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 10020,
        "contract": "contracts/co-bots/CoBotsRendererV2.sol:CoBotsRendererV2",
        "label": "coBotsRenderer",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICoBotsRenderer)11999"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_string_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_string_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "string[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(ICoBotsRenderer)11999": {
        "encoding": "inplace",
        "label": "contract ICoBotsRenderer",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}