{
  "address": "0x1afa19dbb8303EA8411125904Ddcb53a9511787a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "cobotsV1Discount",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "mintOutFoundersWithdrawalDelay",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "grandPrizeDelay",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxCobots",
              "type": "uint16"
            },
            {
              "internalType": "uint24",
              "name": "contestDuration",
              "type": "uint24"
            },
            {
              "internalType": "uint72",
              "name": "mintPublicPrice",
              "type": "uint72"
            }
          ],
          "internalType": "struct CoBotsV2.Parameters",
          "name": "_parameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "checkpoint",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "amount",
              "type": "uint72"
            },
            {
              "internalType": "bool",
              "name": "isContest",
              "type": "bool"
            }
          ],
          "internalType": "struct CoBotsV2.Prize[]",
          "name": "_prizes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "ens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cobotsV1",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ensId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "prizeIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct CoBotsV2.MysteryChallenge",
          "name": "_mysteryChallenge",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllocationExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChainlinkSubscriptionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailSafeWithdrawalNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FulfillRequestForNonExistentContest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FulfillRequestWithTokenNotOwnedByWinner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FulfillRequestWithTokenOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FulfillmentAlreadyFulfilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MysteryChallengeSenderDoesNotOwnENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MysteryChallengeValueDoesNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoGiveawayToTrigger",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemTokenNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToggleMettaCallerNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotMintedOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "checkpoint",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "amount",
              "type": "uint72"
            },
            {
              "internalType": "bool",
              "name": "isContest",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct CoBotsV2.Prize",
          "name": "prize",
          "type": "tuple"
        }
      ],
      "name": "CheckpointDrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "checkpoint",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "amount",
              "type": "uint72"
            },
            {
              "internalType": "bool",
              "name": "isContest",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct CoBotsV2.Prize",
          "name": "prize",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "tokenId",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct CoBotsV2.Winner",
          "name": "winner",
          "type": "tuple"
        }
      ],
      "name": "CheckpointFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GiveawayFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMetta",
          "type": "bool"
        }
      ],
      "name": "MettaToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "renderer",
          "type": "address"
        }
      ],
      "name": "RendererContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_BATCH_LIMIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_FOUNDERS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PARAMETERS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cobotsV1Discount",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "mintOutFoundersWithdrawalDelay",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "grandPrizeDelay",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxCobots",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "contestDuration",
          "type": "uint24"
        },
        {
          "internalType": "uint72",
          "name": "mintPublicPrice",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PRIZES",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "checkpoint",
          "type": "uint16"
        },
        {
          "internalType": "uint72",
          "name": "amount",
          "type": "uint72"
        },
        {
          "internalType": "bool",
          "name": "isContest",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TheAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coBotsSeeds",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coBotsV1Redeemed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "createSubscriptionAndFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failsafeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "giveawayIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "selectedToken",
          "type": "uint256"
        }
      ],
      "name": "fulfillContest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fulfillments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "checkpoint",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "amount",
              "type": "uint72"
            },
            {
              "internalType": "bool",
              "name": "isContest",
              "type": "bool"
            }
          ],
          "internalType": "struct CoBotsV2.Prize",
          "name": "prize",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "tokenId",
              "type": "uint16"
            }
          ],
          "internalType": "struct CoBotsV2.Winner",
          "name": "winner",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrderedFulfillments",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "checkpoint",
                  "type": "uint16"
                },
                {
                  "internalType": "uint72",
                  "name": "amount",
                  "type": "uint72"
                },
                {
                  "internalType": "bool",
                  "name": "isContest",
                  "type": "bool"
                }
              ],
              "internalType": "struct CoBotsV2.Prize",
              "name": "prize",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "tokenId",
                  "type": "uint16"
                }
              ],
              "internalType": "struct CoBotsV2.Winner",
              "name": "winner",
              "type": "tuple"
            }
          ],
          "internalType": "struct CoBotsV2.Fulfillment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMettaEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintedOut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintFounders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIdsV1",
          "type": "uint256[]"
        }
      ],
      "name": "mintPublicSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedOutTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderer",
      "outputs": [
        {
          "internalType": "contract ICoBotsRendererV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "toggleMetta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc6efe5c3c9e4eed3751a13edf6da35cb6931aaa48264e7e828308bce568f8b3",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x1afa19dbb8303EA8411125904Ddcb53a9511787a",
    "transactionIndex": 34,
    "gasUsed": "5083269",
    "logsBloom": "0x00000000000000000000000000000000000000080000000000800000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001000000000000000800020000000000000000820000000000000000000800000000800000000000000000040000440000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000100000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000200000000000000000",
    "blockHash": "0xa30c9633580e160737191daf453b28be05a2da7eace8e633a16fef09fd222fd1",
    "transactionHash": "0xbc6efe5c3c9e4eed3751a13edf6da35cb6931aaa48264e7e828308bce568f8b3",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 10566556,
        "transactionHash": "0xbc6efe5c3c9e4eed3751a13edf6da35cb6931aaa48264e7e828308bce568f8b3",
        "address": "0x1afa19dbb8303EA8411125904Ddcb53a9511787a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006966bdb480e7f7a48a7f6b198ee8b9462a265401"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xa30c9633580e160737191daf453b28be05a2da7eace8e633a16fef09fd222fd1"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 10566556,
        "transactionHash": "0xbc6efe5c3c9e4eed3751a13edf6da35cb6931aaa48264e7e828308bce568f8b3",
        "address": "0x1afa19dbb8303EA8411125904Ddcb53a9511787a",
        "topics": [
          "0x2926c01a1380ae82a404a8c554ad486a6842a4a320d80b770e2930d763825e4f",
          "0x0000000000000000000000005c13dce454e0c49261027c426b4ac95d65a52f6b"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0xa30c9633580e160737191daf453b28be05a2da7eace8e633a16fef09fd222fd1"
      }
    ],
    "blockNumber": 10566556,
    "cumulativeGasUsed": "14714571",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Co-Bots 2.0",
    "CBTE",
    "0x5c13dce454e0c49261027C426b4Ac95d65A52F6b",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    {
      "cobotsV1Discount": 2,
      "mintOutFoundersWithdrawalDelay": 7200,
      "grandPrizeDelay": 3600,
      "maxCobots": 10000,
      "contestDuration": 2419200,
      "mintPublicPrice": "50000000000000"
    },
    [
      {
        "checkpoint": 100,
        "amount": "1000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 200,
        "amount": "2000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 300,
        "amount": "3000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 400,
        "amount": "4000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 500,
        "amount": "1000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 500,
        "amount": "1000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 500,
        "amount": "1000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 500,
        "amount": "1000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 500,
        "amount": "1000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 750,
        "amount": "6000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 1000,
        "amount": "7000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 1500,
        "amount": "8000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 2000,
        "amount": "9000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 3000,
        "amount": "2000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 3000,
        "amount": "2000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 3000,
        "amount": "2000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 3000,
        "amount": "2000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 3000,
        "amount": "2000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 4000,
        "amount": "12000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 5000,
        "amount": "14000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 5000,
        "amount": "50000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 6000,
        "amount": "16000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 7000,
        "amount": "18000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 8000,
        "amount": "4000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 8000,
        "amount": "4000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 8000,
        "amount": "4000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 8000,
        "amount": "4000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 8000,
        "amount": "4000000000000000",
        "isContest": true
      },
      {
        "checkpoint": 9000,
        "amount": "22000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 10000,
        "amount": "24000000000000000",
        "isContest": false
      },
      {
        "checkpoint": 10000,
        "amount": "69000000000000000",
        "isContest": false
      }
    ],
    "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
    "0x1dffc87aAd86c95ca8bD611b2e63BB017578b77e",
    {
      "ensId": "50339762084112735281647694152894396699789156759838299774246919152996091353870",
      "value": 42,
      "prizeIndex": 20
    }
  ],
  "numDeployments": 6,
  "solcInputHash": "f5303e888939c8cfbe98fe278a5e6d48",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"cobotsV1Discount\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"mintOutFoundersWithdrawalDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grandPrizeDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxCobots\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"contestDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint72\",\"name\":\"mintPublicPrice\",\"type\":\"uint72\"}],\"internalType\":\"struct CoBotsV2.Parameters\",\"name\":\"_parameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"internalType\":\"struct CoBotsV2.Prize[]\",\"name\":\"_prizes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cobotsV1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ensId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"prizeIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct CoBotsV2.MysteryChallenge\",\"name\":\"_mysteryChallenge\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllocationExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainlinkSubscriptionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailSafeWithdrawalNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FulfillRequestForNonExistentContest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FulfillRequestWithTokenNotOwnedByWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FulfillRequestWithTokenOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FulfillmentAlreadyFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MysteryChallengeSenderDoesNotOwnENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MysteryChallengeValueDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoGiveawayToTrigger\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTokenNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToggleMettaCallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotMintedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CoBotsV2.Prize\",\"name\":\"prize\",\"type\":\"tuple\"}],\"name\":\"CheckpointDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CoBotsV2.Prize\",\"name\":\"prize\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct CoBotsV2.Winner\",\"name\":\"winner\",\"type\":\"tuple\"}],\"name\":\"CheckpointFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GiveawayFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMetta\",\"type\":\"bool\"}],\"name\":\"MettaToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renderer\",\"type\":\"address\"}],\"name\":\"RendererContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_BATCH_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAMETERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cobotsV1Discount\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"mintOutFoundersWithdrawalDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grandPrizeDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxCobots\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"contestDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint72\",\"name\":\"mintPublicPrice\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRIZES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TheAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coBotsSeeds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coBotsV1Redeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"createSubscriptionAndFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"giveawayIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"selectedToken\",\"type\":\"uint256\"}],\"name\":\"fulfillContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fulfillments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"internalType\":\"struct CoBotsV2.Prize\",\"name\":\"prize\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"internalType\":\"struct CoBotsV2.Winner\",\"name\":\"winner\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderedFulfillments\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"checkpoint\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"isContest\",\"type\":\"bool\"}],\"internalType\":\"struct CoBotsV2.Prize\",\"name\":\"prize\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"internalType\":\"struct CoBotsV2.Winner\",\"name\":\"winner\",\"type\":\"tuple\"}],\"internalType\":\"struct CoBotsV2.Fulfillment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMettaEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintedOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintFounders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsV1\",\"type\":\"uint256[]\"}],\"name\":\"mintPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedOutTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"contract ICoBotsRendererV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"toggleMetta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"TheAnswer(uint256,uint256)\":{\"params\":{\"tokenId\":\"The selected token to be displayed on the website. This should be owned by the winner.\",\"value\":\"Word biggest mysteries are solved with this single value.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"fulfillContest(uint256,address,uint256)\":{\"params\":{\"giveawayIndex\":\"The index of the giveaway to fulfill, 0 based (the first giveaway is index 0).\",\"selectedToken\":\"The selected token to be displayed on the website.\",\"winner\":\"The selected winner address.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isMettaEnabled(uint256)\":{\"params\":{\"tokenId\":\"The Co-Bot token ID\"}},\"mintPublicSale(uint256,uint256[])\":{\"details\":\"The tokenIdsV1 parameter can be empty. The call will revert only if the sender pretends to own some      Co-Bots V1 that they actually don't. However it accepts already redeemed token and just ignore them silently.      This is to make it easier for people using etherscan to copy a bunch of token Ids without having to      manually check if they are redeemed or not. However, it is optimal in terms of gas fees to only give      tokenIds if they can actually be redeemed.\",\"params\":{\"quantity\":\"The number of COBOTS to mint.\",\"tokenIdsV1\":\"A list of V1 Co-Bots token Ids owned by the sender, used to determine the discount.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TheAnswer(uint256,uint256)\":{\"notice\":\"Call this when, you know, you probably know what you're doing here.         revert.\"},\"draw()\":{\"notice\":\"This function can be called at any time by anyone to trigger the unlocked giveaways. It will         revert if there is nothing to unlock to prevent anon from making useless tx. (Usually wallet, e.g.         metamask, warn this before signing).         Giveaways that use Chainlink VRF oracle will be fulfilled automatically by Chainlink. Giveaways that         require founders to unlock will be fulfilled by the founders.\"},\"failsafeWithdraw()\":{\"notice\":\"A very basic function to act as a failsafe if the contract has a bug somewhere in the fulfill functions.\"},\"fulfillContest(uint256,address,uint256)\":{\"notice\":\"This function lets the owner fulfill a giveaway. If the giveaway has not been unlocked, this will         revert.\"},\"getOrderedFulfillments()\":{\"notice\":\"Use this to retrieve the ordered list of winners with their corresponding prizes and token Id.          Pending fulfillments are included (no winner drawn yet, probably waiting for Chainlink to fulfill).\"},\"isMettaEnabled(uint256)\":{\"notice\":\"Return true if the Co-Bot displays metta screen\"},\"mintPublicSale(uint256,uint256[])\":{\"notice\":\"Mints a batch of Co-Bots to the sender.\"},\"withdraw()\":{\"notice\":\"At any point in time, founders can withdraw only up to the required balance to insure that the giveaways          will be paid. We take a conservative approach considering that all the remaining discounted bots will be minted          as soon as possible.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/co-bots/CoBotsV2.sol\":\"CoBotsV2\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/co-bots/CoBotsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"../interfaces/ICoBotsRendererV2.sol\\\";\\nimport \\\"./Schedule.sol\\\";\\n\\nerror BatchLimitExceeded();\\nerror WrongPrice();\\nerror TotalSupplyExceeded();\\nerror AllocationExceeded();\\nerror ToggleMettaCallerNotOwner();\\nerror ChainlinkSubscriptionNotFound();\\nerror TransferFailed();\\nerror MysteryChallengeSenderDoesNotOwnENS();\\nerror MysteryChallengeValueDoesNotMatch();\\nerror FulfillmentAlreadyFulfilled();\\nerror FulfillRequestForNonExistentContest();\\nerror FulfillRequestWithTokenNotOwnedByWinner();\\nerror FulfillRequestWithTokenOutOfBounds();\\nerror RedeemTokenNotOwner();\\nerror RedeemTokenAlreadyRedeemed();\\nerror NoGiveawayToTrigger();\\nerror InsufficientFunds();\\nerror WithdrawalFailed();\\nerror FailSafeWithdrawalNotEnabled();\\n\\ncontract CoBotsV2 is\\n    ERC721A,\\n    VRFConsumerBaseV2,\\n    Ownable,\\n    ReentrancyGuard,\\n    Schedule\\n{\\n    // Events\\n    event RendererContractUpdated(address indexed renderer);\\n    event MettaToggled(uint256 indexed tokenId, bool isMetta);\\n    event CheckpointDrawn(uint256 indexed requestId, Prize prize);\\n    event CheckpointFulfilled(\\n        uint256 indexed requestId,\\n        Prize prize,\\n        Winner winner\\n    );\\n    event GiveawayFinished();\\n    event Withdrawal(uint256 amount);\\n\\n    // Data structures\\n    struct Prize {\\n        uint16 checkpoint;\\n        uint72 amount;\\n        bool isContest;\\n    }\\n\\n    struct MysteryChallenge {\\n        uint256 ensId;\\n        uint256 value;\\n        uint8 prizeIndex;\\n    }\\n\\n    struct Parameters {\\n        uint8 cobotsV1Discount;\\n        uint16 mintOutFoundersWithdrawalDelay;\\n        uint16 grandPrizeDelay;\\n        uint16 maxCobots;\\n        uint24 contestDuration;\\n        uint72 mintPublicPrice;\\n    }\\n\\n    // Constants\\n    uint8 public constant MINT_FOUNDERS = 3;\\n    uint8 public constant MINT_BATCH_LIMIT = 32;\\n    Parameters public PARAMETERS;\\n    Prize[] public PRIZES;\\n    MysteryChallenge private MYSTERY_CHALLENGE;\\n    IERC721 ENS;\\n    IERC721Enumerable COBOTS_V1;\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Token ///////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n\\n    address public renderingContractAddress;\\n    ICoBotsRendererV2 public renderer;\\n    uint8[] public coBotsSeeds;\\n    mapping(uint256 => bool) public coBotsV1Redeemed;\\n    uint256 private _redeemedCount;\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = ICoBotsRendererV2(renderingContractAddress);\\n        emit RendererContractUpdated(renderingContractAddress);\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _rendererAddress,\\n        address vrfCoordinator,\\n        address link,\\n        bytes32 keyHash,\\n        Parameters memory _parameters,\\n        Prize[] memory _prizes,\\n        address ens,\\n        address cobotsV1,\\n        MysteryChallenge memory _mysteryChallenge\\n    ) ERC721A(name_, symbol_) VRFConsumerBaseV2(vrfCoordinator) {\\n        setRenderingContractAddress(_rendererAddress);\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link);\\n        gasKeyHash = keyHash;\\n        PARAMETERS = _parameters;\\n        for (uint256 i = 0; i < _prizes.length; i++) {\\n            PRIZES.push(_prizes[i]);\\n        }\\n        ENS = IERC721(ens);\\n        COBOTS_V1 = IERC721Enumerable(cobotsV1);\\n        MYSTERY_CHALLENGE = _mysteryChallenge;\\n    }\\n\\n    function _mintCoBots(address to, uint256 quantity) internal {\\n        if (quantity > MINT_BATCH_LIMIT) revert BatchLimitExceeded();\\n        bytes32 seeds = keccak256(\\n            abi.encodePacked(\\n                quantity,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < quantity; i++) {\\n            coBotsSeeds.push(uint8(seeds[i]) << 1); // insure last digit is 0, used for Metta status\\n        }\\n\\n        ERC721A._safeMint(to, quantity);\\n    }\\n\\n    /**\\n     * Mints a batch of Co-Bots to the sender.\\n     *\\n     * @dev The tokenIdsV1 parameter can be empty. The call will revert only if the sender pretends to own some\\n     *      Co-Bots V1 that they actually don't. However it accepts already redeemed token and just ignore them silently.\\n     *      This is to make it easier for people using etherscan to copy a bunch of token Ids without having to\\n     *      manually check if they are redeemed or not. However, it is optimal in terms of gas fees to only give\\n     *      tokenIds if they can actually be redeemed.\\n     * @param quantity The number of COBOTS to mint.\\n     * @param tokenIdsV1 A list of V1 Co-Bots token Ids owned by the sender, used to determine the discount.\\n     */\\n    function mintPublicSale(uint256 quantity, uint256[] memory tokenIdsV1)\\n        external\\n        payable\\n        whenPublicSaleOpen\\n        nonReentrant\\n    {\\n        if (_currentIndex + quantity > PARAMETERS.maxCobots)\\n            revert TotalSupplyExceeded();\\n        uint256 price = PARAMETERS.mintPublicPrice * quantity;\\n\\n        uint256 redeemed = 0;\\n        for (uint256 i = 0; i < tokenIdsV1.length; i++) {\\n            if (COBOTS_V1.ownerOf(tokenIdsV1[i]) != _msgSender())\\n                revert RedeemTokenNotOwner();\\n            if (!coBotsV1Redeemed[tokenIdsV1[i]] && redeemed < quantity) {\\n                coBotsV1Redeemed[tokenIdsV1[i]] = true;\\n                redeemed++;\\n                price -=\\n                    PARAMETERS.mintPublicPrice /\\n                    PARAMETERS.cobotsV1Discount;\\n            }\\n        }\\n        _redeemedCount += redeemed;\\n        if (msg.value != price) revert WrongPrice();\\n        if (quantity + _currentIndex == PARAMETERS.maxCobots) {\\n            mintedOutTimestamp = block.timestamp;\\n        }\\n\\n        _mintCoBots(_msgSender(), quantity);\\n    }\\n\\n    function mintFounders(address to, uint256 quantity) external onlyOwner {\\n        if (quantity + _currentIndex > MINT_FOUNDERS)\\n            revert AllocationExceeded();\\n\\n        _mintCoBots(to, quantity);\\n    }\\n\\n    /** @notice Return true if the Co-Bot displays metta screen\\n     *   @param tokenId The Co-Bot token ID\\n     */\\n    function isMettaEnabled(uint256 tokenId) external view returns (bool) {\\n        return coBotsSeeds[tokenId] & 1 == 1;\\n    }\\n\\n    function _toggleMetta(uint256 tokenId) internal {\\n        if (ERC721A.ownerOf(tokenId) != _msgSender())\\n            revert ToggleMettaCallerNotOwner();\\n\\n        coBotsSeeds[tokenId] = coBotsSeeds[tokenId] ^ 1;\\n    }\\n\\n    function toggleMetta(uint256[] calldata tokenIds) public nonReentrant {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _toggleMetta(tokenIds[i]);\\n        }\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, coBotsSeeds[_tokenId]);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    receive() external payable {}\\n\\n    /** @notice At any point in time, founders can withdraw only up to the required balance to insure that the giveaways\\n     *          will be paid. We take a conservative approach considering that all the remaining discounted bots will be minted\\n     *          as soon as possible.\\n     */\\n    function withdraw() public onlyOwner {\\n        // Draw eventual remaining giveaways\\n        if (_shouldDraw()) {\\n            draw();\\n        }\\n\\n        // Start with the current contract's balance\\n        uint256 balance = address(this).balance;\\n\\n        // Correct amount with giveaways that are pending fulfillments, typically previously drawn random fulfillments\\n        for (uint256 i = 0; i < requestIds.length; i++) {\\n            if (!fulfillments[requestIds[i]].fulfilled) {\\n                balance -= fulfillments[requestIds[i]].prize.amount;\\n            }\\n        }\\n\\n        // Use the corrected balance as a base possible withdrawn value\\n        uint256 value = balance;\\n        if (value == 0) revert InsufficientFunds();\\n\\n        // Compute number of remaining discount sales\\n        uint256 remainingVoucher = COBOTS_V1.totalSupply() - _redeemedCount;\\n        // Initialize the number of already minted bots for checkpoints\\n        uint256 previousCheckpoint = _currentIndex;\\n\\n        // Loop over locked checkpoint to estimate funds and withdrawal capacities\\n        for (uint256 i = requestIds.length; i < PRIZES.length; i++) {\\n            // to unlock the next checkpoint, remainingBots bots need to be minted\\n            uint256 remainingBots = PRIZES[i].checkpoint - previousCheckpoint;\\n\\n            // They will top up the contract's balance, depending on the number of voucher\\n            if (remainingVoucher > remainingBots) {\\n                balance +=\\n                    remainingBots *\\n                    (PARAMETERS.mintPublicPrice / PARAMETERS.cobotsV1Discount);\\n                remainingVoucher -= remainingBots;\\n            } else {\\n                balance +=\\n                    remainingVoucher *\\n                    (PARAMETERS.mintPublicPrice / PARAMETERS.cobotsV1Discount) +\\n                    (remainingBots - remainingVoucher) *\\n                    PARAMETERS.mintPublicPrice;\\n                remainingVoucher = 0;\\n            }\\n\\n            // Then the current prize will be paid\\n            balance -= PRIZES[i].amount;\\n\\n            // If at some point in the future it's not possible to pay, then the withdraw tx is reverted\\n            if (balance < 1) {\\n                revert InsufficientFunds();\\n            }\\n\\n            // The possible withdrawal amount is the minimum between the current balance and the contract's balance\\n            // after each giveaway.\\n            if (balance < value) {\\n                value = balance;\\n            }\\n            previousCheckpoint = PRIZES[i].checkpoint;\\n        }\\n\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n        emit Withdrawal(value);\\n    }\\n\\n    /** @notice A very basic function to act as a failsafe if the contract has a bug somewhere in the fulfill functions.\\n     */\\n    function failsafeWithdraw() public onlyOwner whenMintedOut {\\n        if (\\n            block.timestamp <\\n            (mintedOutTimestamp + PARAMETERS.mintOutFoundersWithdrawalDelay)\\n        ) {\\n            revert FailSafeWithdrawalNotEnabled();\\n        }\\n\\n        uint256 value = address(this).balance;\\n        (bool success, ) = _msgSender().call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawalFailed();\\n        emit Withdrawal(value);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////\\n    ////////////////////////// Raffle //////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    LinkTokenInterface LINKTOKEN;\\n    bytes32 gasKeyHash;\\n    uint64 public chainlinkSubscriptionId;\\n\\n    function createSubscriptionAndFund(uint96 amount) external nonReentrant {\\n        if (chainlinkSubscriptionId == 0) {\\n            chainlinkSubscriptionId = COORDINATOR.createSubscription();\\n            COORDINATOR.addConsumer(chainlinkSubscriptionId, address(this));\\n        }\\n        LINKTOKEN.transferAndCall(\\n            address(COORDINATOR),\\n            amount,\\n            abi.encode(chainlinkSubscriptionId)\\n        );\\n    }\\n\\n    function cancelSubscription() external onlyOwner {\\n        COORDINATOR.cancelSubscription(chainlinkSubscriptionId, _msgSender());\\n        chainlinkSubscriptionId = 0;\\n    }\\n\\n    struct Winner {\\n        address winner;\\n        uint16 tokenId;\\n    }\\n\\n    struct Fulfillment {\\n        Prize prize;\\n        bool fulfilled;\\n        Winner winner;\\n    }\\n\\n    mapping(uint256 => Fulfillment) public fulfillments;\\n    uint256[] public requestIds;\\n    uint256 public drawnAmount;\\n\\n    /** @notice Use this to retrieve the ordered list of winners with their corresponding prizes and token Id.\\n     *          Pending fulfillments are included (no winner drawn yet, probably waiting for Chainlink to fulfill).\\n     */\\n    function getOrderedFulfillments()\\n        external\\n        view\\n        returns (Fulfillment[] memory)\\n    {\\n        Fulfillment[] memory result = new Fulfillment[](requestIds.length);\\n        for (uint256 i = 0; i < requestIds.length; i++) {\\n            result[i] = fulfillments[requestIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function _shouldDraw() internal view returns (bool) {\\n        if (requestIds.length == PRIZES.length) {\\n            return false;\\n        }\\n        if (\\n            (requestIds.length == PRIZES.length - 1) &&\\n            (block.timestamp < mintedOutTimestamp + PARAMETERS.grandPrizeDelay)\\n        ) {\\n            return false;\\n        }\\n        if (PRIZES[requestIds.length].checkpoint > _currentIndex) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function can be called at any time by anyone to trigger the unlocked giveaways. It will\\n     *         revert if there is nothing to unlock to prevent anon from making useless tx. (Usually wallet, e.g.\\n     *         metamask, warn this before signing).\\n     *         Giveaways that use Chainlink VRF oracle will be fulfilled automatically by Chainlink. Giveaways that\\n     *         require founders to unlock will be fulfilled by the founders.\\n     */\\n    function draw() public nonReentrant {\\n        uint256 drawCounts = requestIds.length;\\n        if (chainlinkSubscriptionId == 0) {\\n            revert ChainlinkSubscriptionNotFound();\\n        }\\n        if (!_shouldDraw()) revert NoGiveawayToTrigger();\\n        while (PRIZES[drawCounts].checkpoint < _currentIndex + 1) {\\n            uint256 requestId;\\n            if (\\n                (PRIZES[drawCounts].isContest &&\\n                    block.timestamp <\\n                    publicSaleStartTimestamp + PARAMETERS.contestDuration) ||\\n                (drawCounts == MYSTERY_CHALLENGE.prizeIndex)\\n            ) {\\n                requestId = _computeRequestId(drawCounts);\\n            } else {\\n                requestId = COORDINATOR.requestRandomWords(\\n                    gasKeyHash,\\n                    chainlinkSubscriptionId,\\n                    5, // requestConfirmations\\n                    500_000, // callbackGasLimit\\n                    1 // numWords\\n                );\\n            }\\n            drawnAmount += PRIZES[drawCounts].amount;\\n            fulfillments[requestId] = Fulfillment(\\n                PRIZES[drawCounts],\\n                false,\\n                Winner(address(0), 0)\\n            );\\n            emit CheckpointDrawn(requestId, PRIZES[drawCounts]);\\n            drawCounts++;\\n            requestIds.push(requestId);\\n            if (\\n                (drawCounts == PRIZES.length - 1) &&\\n                (block.timestamp <\\n                    mintedOutTimestamp + PARAMETERS.grandPrizeDelay)\\n            ) {\\n                return;\\n            }\\n            if (drawCounts == PRIZES.length) {\\n                emit GiveawayFinished();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function _computeRequestId(uint256 id) private pure returns (uint256) {\\n        return\\n            uint256(keccak256(abi.encodePacked(uint8(id % type(uint8).max))));\\n    }\\n\\n    function _fulfill(\\n        uint256 requestId,\\n        address winnerAddress,\\n        uint256 selectedToken\\n    ) internal {\\n        if (fulfillments[requestId].fulfilled) {\\n            revert FulfillmentAlreadyFulfilled();\\n        }\\n        if (fulfillments[requestId].prize.amount == 0)\\n            revert FulfillRequestForNonExistentContest();\\n        if (ERC721A.ownerOf(selectedToken) != winnerAddress) {\\n            revert FulfillRequestWithTokenNotOwnedByWinner();\\n        }\\n        if (selectedToken > fulfillments[requestId].prize.checkpoint - 1) {\\n            revert FulfillRequestWithTokenOutOfBounds();\\n        }\\n        fulfillments[requestId].fulfilled = true;\\n        Winner memory winner = Winner(winnerAddress, uint16(selectedToken));\\n        fulfillments[requestId].winner = winner;\\n        (bool success, ) = winnerAddress.call{\\n            value: fulfillments[requestId].prize.amount\\n        }(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        emit CheckpointFulfilled(\\n            requestId,\\n            fulfillments[requestId].prize,\\n            winner\\n        );\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 checkpoint = fulfillments[requestId].prize.checkpoint;\\n        uint256 selectedToken = randomWords[0] % checkpoint;\\n        address winner = ERC721A.ownerOf(selectedToken);\\n        _fulfill(requestId, winner, selectedToken);\\n    }\\n\\n    /**\\n     * @notice This function lets the owner fulfill a giveaway. If the giveaway has not been unlocked, this will\\n     *         revert.\\n     * @param giveawayIndex The index of the giveaway to fulfill, 0 based (the first giveaway is index 0).\\n     * @param winner The selected winner address.\\n     * @param selectedToken The selected token to be displayed on the website.\\n     */\\n    function fulfillContest(\\n        uint256 giveawayIndex,\\n        address winner,\\n        uint256 selectedToken\\n    ) external nonReentrant onlyOwner {\\n        uint256 requestId = _computeRequestId(giveawayIndex);\\n        _fulfill(requestId, winner, selectedToken);\\n    }\\n\\n    /**\\n     * @notice Call this when, you know, you probably know what you're doing here.\\n     *         revert.\\n     * @param value Word biggest mysteries are solved with this single value.\\n     * @param tokenId The selected token to be displayed on the website. This should be owned by the winner.\\n     */\\n    function TheAnswer(uint256 value, uint256 tokenId) external nonReentrant {\\n        if (ENS.ownerOf(MYSTERY_CHALLENGE.ensId) != _msgSender()) {\\n            revert MysteryChallengeSenderDoesNotOwnENS();\\n        }\\n        if (value != MYSTERY_CHALLENGE.value) {\\n            revert MysteryChallengeValueDoesNotMatch();\\n        }\\n        _fulfill(\\n            _computeRequestId(MYSTERY_CHALLENGE.prizeIndex),\\n            _msgSender(),\\n            tokenId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfee2b93f097ce63b45f6a2d06b7058bed27da1426b6ddcf6603c6917f8835faa\",\"license\":\"MIT\"},\"contracts/co-bots/Schedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror PublicSaleOpen();\\nerror PublicSaleNotOpen();\\nerror TokenMintedOut();\\nerror TokenNotMintedOut();\\n\\n/** @dev This contract can be used to manage some basic scheduling of a token sale.\\n *       To have the isMintedOut() function work, it is required to either update the mintedOutTimestamp\\n *       or to override the function (using totalSupply() for instance).\\n */\\ncontract Schedule is Ownable {\\n    uint256 public publicSaleStartTimestamp;\\n    uint256 public mintedOutTimestamp;\\n\\n    function openPublicSale() external onlyOwner whenPublicSaleClosed {\\n        publicSaleStartTimestamp = block.timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view virtual returns (bool) {\\n        return\\n            publicSaleStartTimestamp != 0 &&\\n            block.timestamp > publicSaleStartTimestamp;\\n    }\\n\\n    modifier whenPublicSaleOpen() {\\n        if (!isPublicSaleOpen()) revert PublicSaleNotOpen();\\n        _;\\n    }\\n\\n    modifier whenPublicSaleClosed() {\\n        if (isPublicSaleOpen()) revert PublicSaleOpen();\\n        _;\\n    }\\n\\n    function isMintedOut() public view virtual returns (bool) {\\n        return mintedOutTimestamp > 0;\\n    }\\n\\n    modifier whenMintedOut() {\\n        if (!isMintedOut()) revert TokenNotMintedOut();\\n        _;\\n    }\\n\\n    modifier whenNotMintedOut() {\\n        if (isMintedOut()) revert TokenMintedOut();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4f07d36666a26da92939d171830af7812a6cd2267421363267cf026aca81eede\",\"license\":\"MIT\"},\"contracts/interfaces/ICoBotsRendererV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRendererV2 {\\n    function tokenURI(uint256 tokenId, uint8 seed)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x079473df449ff8b78ee063b26593b4e87abb8ed63866213f0cc5dc0d221187ef\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xfae1341d343abce757109fbff0e9fa7d90de54eecb7fe1d983e0d206e0c62ece\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200510238038062005102833981016040819052620000349162000827565b878b8b81600190805190602001906200004f92919062000372565b5080516200006590600290602084019062000372565b5050506001600160a01b03166080526200007f3362000294565b60016008556200008f89620002e6565b601780546001600160a01b03808b166001600160a01b03199283161790925560188054928a169290911691909117905560198690558451600b80546020880151604089015160608a015160808b015160a08c01516001600160481b03166a010000000000000000000002600160501b600160981b031962ffffff9092166701000000000000000291909116600160381b600160981b031961ffff938416650100000000000261ffff60281b199585166301000000029590951666ffffffff00000019949096166101000262ffffff1990971660ff9099169890981795909517919091169290921717939093161791909117905560005b84518110156200022f57600c858281518110620001a657620001a662000988565b60209081029190910181015182546001810184556000938452928290208151930180549282015160409092015115156b0100000000000000000000000260ff60581b196001600160481b0390931662010000026001600160581b031990941661ffff909516949094179290921716919091179055806200022681620009b4565b91505062000185565b50601080546001600160a01b03199081166001600160a01b03958616179091556011805490911692909316919091179091558051600d556020810151600e5560400151600f805460ff191660ff9092169190911790555062000a549650505050505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007546001600160a01b031633146200031c5760405162461bcd60e51b81526004016200031390620009d2565b60405180910390fd5b601280546001600160a01b0383166001600160a01b0319918216811790925560138054909116821790556040517f2926c01a1380ae82a404a8c554ad486a6842a4a320d80b770e2930d763825e4f90600090a250565b828054620003809062000a23565b90600052602060002090601f016020900481019282620003a45760008555620003ef565b82601f10620003bf57805160ff1916838001178555620003ef565b82800160010185558215620003ef579182015b82811115620003ef578251825591602001919060010190620003d2565b50620003fd92915062000401565b5090565b5b80821115620003fd576000815560010162000402565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000456576200045662000418565b6040525050565b60006200046960405190565b90506200047782826200042e565b919050565b60006001600160401b0382111562000498576200049862000418565b601f19601f83011660200192915050565b60005b83811015620004c6578181015183820152602001620004ac565b83811115620004d6576000848401525b50505050565b6000620004f3620004ed846200047c565b6200045d565b905082815260208101848484011115620005105762000510600080fd5b6200051d848285620004a9565b509392505050565b600082601f8301126200053b576200053b600080fd5b81516200054d848260208601620004dc565b949350505050565b60006001600160a01b0382165b92915050565b620005738162000555565b81146200057f57600080fd5b50565b8051620005628162000568565b8062000573565b805162000562816200058f565b60ff811662000573565b80516200056281620005a3565b61ffff811662000573565b80516200056281620005ba565b62ffffff811662000573565b80516200056281620005d2565b6001600160481b03811662000573565b80516200056281620005eb565b600060c082840312156200061f576200061f600080fd5b6200062b60c06200045d565b905060006200063b8484620005ad565b9082015260206200064f84848301620005c5565b9082015260406200066384848301620005c5565b9082015260606200067784848301620005c5565b9082015260806200068b84848301620005de565b9082015260a06200069f84848301620005fb565b9082015292915050565b60006001600160401b03821115620006c557620006c562000418565b5060209081020190565b80151562000573565b80516200056281620006cf565b600060608284031215620006fc57620006fc600080fd5b6200070860606200045d565b90506000620007188484620005c5565b9082015260206200072c84848301620005fb565b9082015260406200069f84848301620006d8565b600062000751620004ed84620006a9565b83815290506020810160608402830185811115620007725762000772600080fd5b835b818110156200079a57620007898782620006e5565b835260209092019160600162000774565b5050509392505050565b600082601f830112620007ba57620007ba600080fd5b81516200054d84826020860162000740565b600060608284031215620007e357620007e3600080fd5b620007ef60606200045d565b90506000620007ff848462000596565b908201526020620008138484830162000596565b9082015260406200069f84848301620005ad565b60008060008060008060008060008060006102408c8e0312156200084e576200084e600080fd5b8b516001600160401b03811115620008695762000869600080fd5b620008778e828f0162000525565b60208e0151909c5090506001600160401b038111156200089a576200089a600080fd5b620008a88e828f0162000525565b9a50506040620008bb8e828f0162000582565b9950506060620008ce8e828f0162000582565b9850506080620008e18e828f0162000582565b97505060a0620008f48e828f0162000596565b96505060c0620009078e828f0162000608565b6101808e015190965090506001600160401b038111156200092b576200092b600080fd5b620009398e828f01620007a4565b9450506101a06200094d8e828f0162000582565b9350506101c0620009618e828f0162000582565b9250506101e0620009758e828f01620007cc565b9150509295989b509295989b9093969950565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620009cb57620009cb6200099e565b5060010190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820162000562565b634e487b7160e01b600052602260045260246000fd5b60028104600182168062000a3857607f821691505b6020821081141562000a4e5762000a4e62000a0d565b50919050565b60805161468b62000a77600039600081816114ba01526114e2015261468b6000f3fe6080604052600436106103385760003560e01c80634f6ccce7116101b0578063a22cb465116100ec578063c87b56dd11610095578063dfc7e2c91161006f578063dfc7e2c914610a11578063e10a64dd14610a31578063e985e9c514610a44578063f2fde38b14610a8d57600080fd5b8063c87b56dd146109bb578063cf62c8ab146109db578063d7822c99146109fb57600080fd5b8063b585209b116100c6578063b585209b14610966578063b88d4fde1461097b578063c074f4121461099b57600080fd5b8063a22cb465146108ab578063a715b15b146108cb578063a9b5898f146108ed57600080fd5b806372c64f16116101595780638ada6b0f116101335780638ada6b0f146108355780638da5cb5b1461086257806395d89b41146108805780639a14f79d1461089557600080fd5b806372c64f16146107c557806386758e71146107f55780638796ba8c1461081557600080fd5b806368d99f7c1161018a57806368d99f7c1461077957806370a0823114610790578063715018a6146107b057600080fd5b80634f6ccce7146106875780635a08cae5146106a75780636352211e1461075957600080fd5b80631fafadbc1161027f57806324e9edb01161022857806342842e0e1161020257806342842e0e1461060757806349cae612146106275780634e02099f146106475780634f558e791461066757600080fd5b806324e9edb0146105bd5780632f745c59146105d25780633ccfd60b146105f257600080fd5b806320c5780c1161025957806320c5780c1461055a57806321e182081461058857806323b872dd1461059d57600080fd5b80631fafadbc146104eb5780631fd9d0811461050b5780631fe543e31461053a57600080fd5b80630eecae21116102e1578063143a3f92116102bb578063143a3f921461048557806318160ddd1461049a5780631a6949e3146104d657600080fd5b80630eecae211461042e5780630f8236081461044357806312b40a9f1461046557600080fd5b8063081812fc11610312578063081812fc146103bf578063095ea7b3146103ec5780630badbd071461040e57600080fd5b806301ffc9a71461034457806304035a921461037a57806306fdde031461039d57600080fd5b3661033f57005b600080fd5b34801561035057600080fd5b5061036461035f3660046137cf565b610aad565b60405161037191906137fa565b60405180910390f35b34801561038657600080fd5b50610390600a5481565b604051610371919061380e565b3480156103a957600080fd5b506103b2610b7e565b604051610371919061387a565b3480156103cb57600080fd5b506103df6103da3660046138a3565b610c10565b60405161037191906138de565b3480156103f857600080fd5b5061040c610407366004613900565b610c6d565b005b34801561041a57600080fd5b5061040c61042936600461393d565b610d2d565b34801561043a57600080fd5b5061040c610e88565b34801561044f57600080fd5b50610458600381565b6040516103719190613968565b34801561047157600080fd5b5061040c610480366004613976565b611389565b34801561049157600080fd5b50610458602081565b3480156104a657600080fd5b506103906000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b3480156104e257600080fd5b50610364611416565b3480156104f757600080fd5b506104586105063660046138a3565b611431565b34801561051757600080fd5b5061052b6105263660046138a3565b611465565b604051610371939291906139b2565b34801561054657600080fd5b5061040c610555366004613adf565b6114af565b34801561056657600080fd5b50601a5461057b9067ffffffffffffffff1681565b6040516103719190613b3d565b34801561059457600080fd5b5061040c611543565b3480156105a957600080fd5b5061040c6105b8366004613b4b565b6116b7565b3480156105c957600080fd5b5061040c6116c2565b3480156105de57600080fd5b506103906105ed366004613900565b61178a565b3480156105fe57600080fd5b5061040c6118a0565b34801561061357600080fd5b5061040c610622366004613b4b565b611d17565b34801561063357600080fd5b5061040c610642366004613b9b565b611d32565b34801561065357600080fd5b5061040c610662366004613900565b611da7565b34801561067357600080fd5b506103646106823660046138a3565b611e2c565b34801561069357600080fd5b506103906106a23660046138a3565b611e37565b3480156106b357600080fd5b5061074a6106c23660046138a3565b601b602090815260009182526040918290208251606081018452815461ffff808216835268ffffffffffffffffff620100008304168386015260ff6b0100000000000000000000009092048216151583870152600184015486518088019097526002909401546001600160a01b0381168752600160a01b900416938501939093529291169083565b60405161037193929190613c10565b34801561076557600080fd5b506103df6107743660046138a3565b611efb565b34801561078557600080fd5b50600a541515610364565b34801561079c57600080fd5b506103906107ab366004613976565b611f0d565b3480156107bc57600080fd5b5061040c611f75565b3480156107d157600080fd5b506103646107e03660046138a3565b60156020526000908152604090205460ff1681565b34801561080157600080fd5b506103646108103660046138a3565b611fab565b34801561082157600080fd5b506103906108303660046138a3565b611fe8565b34801561084157600080fd5b50601354610855906001600160a01b031681565b6040516103719190613c7a565b34801561086e57600080fd5b506007546001600160a01b03166103df565b34801561088c57600080fd5b506103b2612009565b3480156108a157600080fd5b50610390601d5481565b3480156108b757600080fd5b5061040c6108c6366004613c9b565b612018565b3480156108d757600080fd5b506108e06120ca565b6040516103719190613d5e565b3480156108f957600080fd5b50600b546109549060ff81169061ffff610100820481169163010000008104821691650100000000008204169062ffffff6701000000000000008204169068ffffffffffffffffff6a01000000000000000000009091041686565b60405161037196959493929190613d7a565b34801561097257600080fd5b5061040c61225c565b34801561098757600080fd5b5061040c610996366004613e6b565b6122cb565b3480156109a757600080fd5b506012546103df906001600160a01b031681565b3480156109c757600080fd5b506103b26109d63660046138a3565b612305565b3480156109e757600080fd5b5061040c6109f6366004613f09565b612417565b348015610a0757600080fd5b5061039060095481565b348015610a1d57600080fd5b5061040c610a2c366004613f7c565b612610565b61040c610a3f366004613adf565b612680565b348015610a5057600080fd5b50610364610a5f366004613fc4565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b348015610a9957600080fd5b5061040c610aa8366004613976565b6129c9565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480610b1057506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610b4457506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b80610b7857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060018054610b8d9061400d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb99061400d565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b5050505050905090565b6000610c1b82612a25565b610c51576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610c7882611efb565b9050806001600160a01b0316836001600160a01b03161415610cc6576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610ce65750610ce48133610a5f565b155b15610d1d576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d28838383612a59565b505050565b60026008541415610d595760405162461bcd60e51b8152600401610d5090614066565b60405180910390fd5b6002600855601054600d546040517f6352211e00000000000000000000000000000000000000000000000000000000815233926001600160a01b031691636352211e91610da9919060040161380e565b602060405180830381865afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190614081565b6001600160a01b031614610e2a576040517fb2c6179c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e548214610e65576040517f8f6d9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f54610e7f90610e789060ff16612ac2565b3383612afd565b50506001600855565b60026008541415610eab5760405162461bcd60e51b8152600401610d5090614066565b6002600855601c54601a5467ffffffffffffffff16610ef6576040517f15cd15ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610efe612dc6565b610f34576040517fc3a7d74d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610f4b906001600160801b031660016140b8565b6001600160801b0316600c8281548110610f6757610f676140f0565b60009182526020909120015461ffff161015611380576000600c8281548110610f9257610f926140f0565b6000918252602090912001546b010000000000000000000000900460ff168015610fda5750600b54600954610fd791670100000000000000900462ffffff1690614106565b42105b80610fe95750600f5460ff1682145b15610ffe57610ff782612ac2565b90506110ab565b601754601954601a546040517f5d3b1d300000000000000000000000000000000000000000000000000000000081526001600160a01b0390931692635d3b1d309261106592909167ffffffffffffffff909116906005906207a12090600190600401614147565b6020604051808303816000875af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a8919061419e565b90505b600c82815481106110be576110be6140f0565b6000918252602082200154601d80546201000090920468ffffffffffffffffff169290916110ed908490614106565b925050819055506040518060600160405280600c8481548110611112576111126140f0565b6000918252602080832060408051606081018252939091015461ffff80821685526201000080830468ffffffffffffffffff908116878701526b0100000000000000000000009384900460ff161515878601529588528785018790528351808501855287815280860188905297840197909752888652601b84529482902087518051825482870151928601519189167fffffffffffffffffffffffffffffffffffffffffff00000000000000000000009091161791909616909702969096177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff16931515029290921784558481015160018501805460ff191691151591909117905593015180516002909301805491909401516001600160a01b039093167fffffffffffffffffffff0000000000000000000000000000000000000000000090911617600160a01b9290911691909102179055600c805482917fb40531e03f8d4be5f5bb24f4d1811140fbead25a449a04cdb8e941384a810702918590811061129d5761129d6140f0565b906000526020600020016040516112b49190614241565b60405180910390a2816112c68161424f565b601c8054600181810183556000929092527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101849055600c5491945061130d92509061426a565b821480156113345750600b54600a54611331916301000000900461ffff1690614106565b42105b15611340575050611382565b600c5482141561137a576040517fc4f545db975f34de8f12b4353fa42dd295e802239df19ebbe5fd3c245dad0a5a90600090a15050611382565b50610f34565b505b6001600855565b6007546001600160a01b031633146113b35760405162461bcd60e51b8152600401610d50906142b5565b601280546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560138054909116821790556040517f2926c01a1380ae82a404a8c554ad486a6842a4a320d80b770e2930d763825e4f90600090a250565b600060095460001415801561142c575060095442115b905090565b6014818154811061144157600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600c818154811061147557600080fd5b60009182526020909120015461ffff8116915062010000810468ffffffffffffffffff16906b010000000000000000000000900460ff1683565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610d509291906142c5565b61153f8282612e67565b5050565b6007546001600160a01b0316331461156d5760405162461bcd60e51b8152600401610d50906142b5565b600a546115a6576040517fe5b93aca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b54600a546115bf91610100900461ffff1690614106565b4210156115f8576040517f3e8e963c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040514790600090339083908381818185875af1925050503d806000811461163c576040519150601f19603f3d011682016040523d82523d6000602084013e611641565b606091505b505090508061167c576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de7826040516116ab919061380e565b60405180910390a15050565b610d28838383612ec5565b6007546001600160a01b031633146116ec5760405162461bcd60e51b8152600401610d50906142b5565b601754601a546040517fd7ae1d300000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163d7ae1d30916117459167ffffffffffffffff9091169033906004016142e0565b600060405180830381600087803b15801561175f57600080fd5b505af1158015611773573d6000803e3d6000fd5b5050601a805467ffffffffffffffff191690555050565b600061179583611f0d565b82106117cd576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b8381101561189a57600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615801592820192909252906118465750611892565b80516001600160a01b03161561185b57805192505b876001600160a01b0316836001600160a01b03161415611890578684141561188957509350610b7892505050565b6001909301925b505b6001016117de565b50600080fd5b6007546001600160a01b031633146118ca5760405162461bcd60e51b8152600401610d50906142b5565b6118d2612dc6565b156118df576118df610e88565b4760005b601c5481101561198e57601b6000601c8381548110611904576119046140f0565b6000918252602080832090910154835282019290925260400190206001015460ff1661197c57601b6000601c8381548110611941576119416140f0565b600091825260208083209091015483528201929092526040019020546119799068ffffffffffffffffff62010000909104168361426a565b91505b806119868161424f565b9150506118e3565b5080806119c7576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601654601154604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600093926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a52919061419e565b611a5c919061426a565b600054601c549192506001600160801b0316905b600c54811015611c5657600082600c8381548110611a9057611a906140f0565b600091825260209091200154611aaa919061ffff1661426a565b905080841115611b1057600b54611ade9060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b611af39068ffffffffffffffffff1682614327565b611afd9087614106565b9550611b09818561426a565b9350611b9a565b600b546a0100000000000000000000900468ffffffffffffffffff16611b36858361426a565b611b409190614327565b600b54611b6a9060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b611b7f9068ffffffffffffffffff1686614327565b611b899190614106565b611b939087614106565b9550600093505b600c8281548110611bad57611bad6140f0565b600091825260209091200154611bd49062010000900468ffffffffffffffffff168761426a565b95506001861015611c11576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861015611c1d578594505b600c8281548110611c3057611c306140f0565b60009182526020909120015461ffff169250819050611c4e8161424f565b915050611a70565b50604051600090339085908381818185875af1925050503d8060008114611c99576040519150601f19603f3d011682016040523d82523d6000602084013e611c9e565b606091505b5050905080611cd9576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de784604051611d08919061380e565b60405180910390a15050505050565b610d28838383604051806020016040528060008152506122cb565b60026008541415611d555760405162461bcd60e51b8152600401610d5090614066565b60026008556007546001600160a01b03163314611d845760405162461bcd60e51b8152600401610d50906142b5565b6000611d8f84612ac2565b9050611d9c818484612afd565b505060016008555050565b6007546001600160a01b03163314611dd15760405162461bcd60e51b8152600401610d50906142b5565b600054600390611dea906001600160801b031683614106565b1115611e22576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61153f828261312d565b6000610b7882612a25565b600080546001600160801b031681805b82811015611ec857600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611ebf5785831415611eb85750949350505050565b6001909201915b50600101611e47565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611f0682613216565b5192915050565b60006001600160a01b038216611f4f576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b03163314611f9f5760405162461bcd60e51b8152600401610d50906142b5565b611fa96000613353565b565b600060148281548110611fc057611fc06140f0565b6000918252602091829020918104909101546001601f9092166101000a900481161492915050565b601c8181548110611ff857600080fd5b600091825260209091200154905081565b606060028054610b8d9061400d565b6001600160a01b03821633141561205b576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906120be9085906137fa565b60405180910390a35050565b601c5460609060009067ffffffffffffffff8111156120eb576120eb6139da565b60405190808252806020026020018201604052801561215b57816020015b6040805160c0810182526000606082018181526080830182905260a083018290528252602080830182905283518085018552828152808201929092529282015282526000199092019101816121095790505b50905060005b601c5481101561225657601b6000601c8381548110612182576121826140f0565b600091825260208083209091015483528281019390935260409182019020815160c081018352815461ffff8082166060840190815268ffffffffffffffffff62010000840416608085015260ff6b0100000000000000000000009093048316151560a085015283526001840154909116151582860152835180850185526002909301546001600160a01b0381168452600160a01b90041693820193909352908201528251839083908110612238576122386140f0565b6020026020010181905250808061224e9061424f565b915050612161565b50919050565b6007546001600160a01b031633146122865760405162461bcd60e51b8152600401610d50906142b5565b61228e611416565b156122c5576040517fd205ec1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600955565b6122d6848484612ec5565b6122e2848484846133b2565b6122ff576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061231082612a25565b612346576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012546001600160a01b031661236a57505060408051602081019091526000815290565b601354601480546001600160a01b0390921691635cc518ba91859182908110612395576123956140f0565b90600052602060002090602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b81526004016123d2929190614346565b600060405180830381865afa1580156123ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7891908101906143b9565b6002600854141561243a5760405162461bcd60e51b8152600401610d5090614066565b6002600855601a5467ffffffffffffffff1661256757601760009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af11580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c9919061440f565b601a805467ffffffffffffffff191667ffffffffffffffff9290921691821790556017546040517f7341c10c0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691637341c10c91612534919030906004016142e0565b600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050505b601854601754601a546040516001600160a01b0393841693634000aea093169185916125a09167ffffffffffffffff1690602001613b3d565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016125cd93929190614453565b6020604051808303816000875af11580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f9190614494565b600260085414156126335760405162461bcd60e51b8152600401610d5090614066565b600260085560005b8181101561267657612664838383818110612658576126586140f0565b905060200201356134e4565b8061266e8161424f565b91505061263b565b5050600160085550565b612688611416565b6126be576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260085414156126e15760405162461bcd60e51b8152600401610d5090614066565b6002600855600b546000546501000000000090910461ffff169061270f9084906001600160801b0316614106565b1115612747576040517ffd59427a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b546000906127719084906a0100000000000000000000900468ffffffffffffffffff16614327565b90506000805b835181101561293b57601154845133916001600160a01b031690636352211e908790859081106127a9576127a96140f0565b60200260200101516040518263ffffffff1660e01b81526004016127cd919061380e565b602060405180830381865afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190614081565b6001600160a01b03161461284e576040517f5246352300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60156000858381518110612864576128646140f0565b60209081029190910181015182528101919091526040016000205460ff1615801561288e57508482105b15612929576001601560008684815181106128ab576128ab6140f0565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555081806128e39061424f565b600b54909350612911915060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b6129269068ffffffffffffffffff168461426a565b92505b806129338161424f565b915050612777565b50806016600082825461294e9190614106565b909155505034821461298c576040517ff7760f2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b546000546501000000000090910461ffff16906129b4906001600160801b031686614106565b14156129bf5742600a555b611d9c338561312d565b6007546001600160a01b031633146129f35760405162461bcd60e51b8152600401610d50906142b5565b6001600160a01b038116612a195760405162461bcd60e51b8152600401610d50906144b5565b612a2281613353565b50565b600080546001600160801b031682108015610b78575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000612acf60ff83614516565b604051602001612adf9190614542565b60408051601f19818403018152919052805160209091012092915050565b6000838152601b602052604090206001015460ff1615612b49576040517f636d49d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b602052604090205462010000900468ffffffffffffffffff16612b9f576040517f8e1773d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b0316612bb282611efb565b6001600160a01b031614612bf2576040517f03e21ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b6020526040902054612c119060019061ffff16614554565b61ffff16811115612c4e576040517f518af55d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b602081815260408084206001818101805460ff19169091179055815180830183526001600160a01b0380891680835261ffff808a168488019081528c8a529790965282516002850180549851909716600160a01b027fffffffffffffffffffff00000000000000000000000000000000000000000000909816921691909117959095179093555490519193929168ffffffffffffffffff62010000909204919091169060006040518083038185875af1925050503d8060008114612d35576040519150601f19603f3d011682016040523d82523d6000602084013e612d3a565b606091505b5050905080612d75576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152601b602052604090819020905186917f7d2db4ed55b360e8ea7d70390d6f63a1404136410fa6f3f94a41d1cf99488a7f91612db791908690614562565b60405180910390a25050505050565b600c54601c546000911415612ddb5750600090565b600c54612dea9060019061426a565b601c54148015612e135750600b54600a54612e10916301000000900461ffff1690614106565b42105b15612e1e5750600090565b600054601c54600c80546001600160801b03909316929091908110612e4557612e456140f0565b60009182526020909120015461ffff161115612e615750600090565b50600190565b6000828152601b6020526040812054825161ffff9091169190829084908390612e9257612e926140f0565b6020026020010151612ea49190614516565b90506000612eb182611efb565b9050612ebe858284612afd565b5050505050565b6000612ed082613216565b80519091506000906001600160a01b0316336001600160a01b03161480612efe57508151612efe9033610a5f565b80612f19575033612f0e84610c10565b6001600160a01b0316145b905080612f52576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614612fa1576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416612fe1576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ff16000848460000151612a59565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b4290921691909102179092559086018083529120549091166130e6576000546001600160801b03168110156130e6578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612ebe565b6020811115613168576040517f359fd04400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081333442446040516020016131839594939291906145a5565b60405160208183030381529060405280519060200120905060005b8281101561320b57601460018383602081106131bc576131bc6140f0565b8354600181018555600094855260209485902094810490940180549290911a90921b60ff908116601f9094166101000a93840293021916919091179055806132038161424f565b91505061319e565b50610d2883836135a4565b60408051606081018252600080825260208201819052918101829052905482906001600160801b031681101561332157600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061331f5780516001600160a01b0316156132b5579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff161515928101929092521561331a579392505050565b6132b5565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156134d8576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061340f9033908990889088906004016145ef565b6020604051808303816000875af192505050801561344a575060408051601f3d908101601f1916820190925261344791810190614634565b60015b6134a5573d808015613478576040519150601f19603f3d011682016040523d82523d6000602084013e61347d565b606091505b50805161349d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001490506134dc565b5060015b949350505050565b336134ee82611efb565b6001600160a01b03161461352e576040517fff68d35d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60148181548110613541576135416140f0565b90600052602060002090602091828204019190069054906101000a900460ff1660011860148281548110613577576135776140f0565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555050565b61153f828260405180602001604052806000815250610d2883838360016000546001600160801b03166001600160a01b03851661360d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83613644576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561376f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015613745575061374360008884886133b2565b155b15613763576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016136ee565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055612ebe565b6001600160e01b031981165b8114612a2257600080fd5b8035610b78816137ad565b6000602082840312156137e4576137e4600080fd5b60006134dc84846137c4565b8015155b82525050565b60208101610b7882846137f0565b806137f4565b60208101610b788284613808565b60005b8381101561383757818101518382015260200161381f565b838111156122ff5750506000910152565b6000613852825190565b80845260208401935061386981856020860161381c565b601f01601f19169290920192915050565b6020808252810161388b8184613848565b9392505050565b806137b9565b8035610b7881613892565b6000602082840312156138b8576138b8600080fd5b60006134dc8484613898565b60006001600160a01b038216610b78565b6137f4816138c4565b60208101610b7882846138d5565b6137b9816138c4565b8035610b78816138ec565b6000806040838503121561391657613916600080fd5b600061392285856138f5565b925050602061393385828601613898565b9150509250929050565b6000806040838503121561395357613953600080fd5b60006139228585613898565b60ff81166137f4565b60208101610b78828461395f565b60006020828403121561398b5761398b600080fd5b60006134dc84846138f5565b61ffff81166137f4565b68ffffffffffffffffff81166137f4565b606081016139c08286613997565b6139cd60208301856139a1565b6134dc60408301846137f0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613a1657613a166139da565b6040525050565b6000613a2860405190565b9050613a3482826139f0565b919050565b600067ffffffffffffffff821115613a5357613a536139da565b5060209081020190565b6000613a70613a6b84613a39565b613a1d565b83815290506020808201908402830185811115613a8f57613a8f600080fd5b835b81811015613ab157613aa38782613898565b835260209283019201613a91565b5050509392505050565b600082601f830112613acf57613acf600080fd5b81356134dc848260208601613a5d565b60008060408385031215613af557613af5600080fd5b6000613b018585613898565b925050602083013567ffffffffffffffff811115613b2157613b21600080fd5b61393385828601613abb565b67ffffffffffffffff81166137f4565b60208101610b788284613b2d565b600080600060608486031215613b6357613b63600080fd5b6000613b6f86866138f5565b9350506020613b80868287016138f5565b9250506040613b9186828701613898565b9150509250925092565b600080600060608486031215613bb357613bb3600080fd5b6000613b6f8686613898565b8051613bcb8382613997565b506020810151613bde60208401826139a1565b506040810151610d2860408401826137f0565b8051613bfd83826138d5565b506020810151610d286020840182613997565b60c08101613c1e8286613bbf565b613c2b60608301856137f0565b6134dc6080830184613bf1565b6000610b786001600160a01b038316613c4f565b90565b6001600160a01b031690565b6000610b7882613c38565b6000610b7882613c5b565b6137f481613c66565b60208101610b788284613c71565b8015156137b9565b8035610b7881613c88565b60008060408385031215613cb157613cb1600080fd5b6000613cbd85856138f5565b925050602061393385828601613c90565b8051613cda8382613bbf565b506020810151613ced60608401826137f0565b506040810151610d286080840182613bf1565b613d0a8282613cce565b5060c00190565b60200190565b6000613d21825190565b808452602093840193830160005b82811015613d54578151613d438782613d00565b965050602082019150600101613d2f565b5093949350505050565b6020808252810161388b8184613d17565b62ffffff81166137f4565b60c08101613d88828961395f565b613d956020830188613997565b613da26040830187613997565b613daf6060830186613997565b613dbc6080830185613d6f565b613dc960a08301846139a1565b979650505050505050565b600067ffffffffffffffff821115613dee57613dee6139da565b601f19601f83011660200192915050565b82818337506000910152565b6000613e19613a6b84613dd4565b905082815260208101848484011115613e3457613e34600080fd5b613e3f848285613dff565b509392505050565b600082601f830112613e5b57613e5b600080fd5b81356134dc848260208601613e0b565b60008060008060808587031215613e8457613e84600080fd5b6000613e9087876138f5565b9450506020613ea1878288016138f5565b9350506040613eb287828801613898565b925050606085013567ffffffffffffffff811115613ed257613ed2600080fd5b613ede87828801613e47565b91505092959194509250565b6bffffffffffffffffffffffff81166137b9565b8035610b7881613eea565b600060208284031215613f1e57613f1e600080fd5b60006134dc8484613efe565b60008083601f840112613f3f57613f3f600080fd5b50813567ffffffffffffffff811115613f5a57613f5a600080fd5b602083019150836020820283011115613f7557613f75600080fd5b9250929050565b60008060208385031215613f9257613f92600080fd5b823567ffffffffffffffff811115613fac57613fac600080fd5b613fb885828601613f2a565b92509250509250929050565b60008060408385031215613fda57613fda600080fd5b6000613fe685856138f5565b9250506020613933858286016138f5565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061402157607f821691505b6020821081141561225657612256613ff7565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613d11565b60208082528101610b7881614034565b8051610b78816138ec565b60006020828403121561409657614096600080fd5b60006134dc8484614076565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03811690506001600160801b03821691506000826001600160801b03038211156140eb576140eb6140a2565b500190565b634e487b7160e01b600052603260045260246000fd5b600082198211156140eb576140eb6140a2565b6000610b78825b61ffff1690565b6137f481614119565b600063ffffffff8216610b78565b6137f481614130565b60a081016141558288613808565b6141626020830187613b2d565b61416f6040830186614127565b61417c606083018561413e565b614189608083018461413e565b9695505050505050565b8051610b7881613892565b6000602082840312156141b3576141b3600080fd5b60006134dc8484614193565b6000610b7882614120565b6000610b786141d98360101c90565b68ffffffffffffffffff1690565b6000610b786141f68360581c90565b60ff1690565b8054614207816141bf565b6142118482613997565b5061421b816141ca565b61422860208501826139a1565b50614232816141e7565b9050610d2860408401826137f0565b60608101610b7882846141fc565b6000600019821415614263576142636140a2565b5060010190565b815b9150600082821015614280576142806140a2565b500390565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613d11565b60208082528101610b7881614285565b604081016142d382856138d5565b61388b60208301846138d5565b604081016142d38285613b2d565b634e487b7160e01b600052601260045260246000fd5b68ffffffffffffffffff9182169116600082614322576143226142ee565b500490565b6000816000190483118215151615614341576143416140a2565b500290565b604081016143548285613808565b61388b602083018461395f565b600061436f613a6b84613dd4565b90508281526020810184848401111561438a5761438a600080fd5b613e3f84828561381c565b600082601f8301126143a9576143a9600080fd5b81516134dc848260208601614361565b6000602082840312156143ce576143ce600080fd5b815167ffffffffffffffff8111156143e8576143e8600080fd5b6134dc84828501614395565b67ffffffffffffffff81166137b9565b8051610b78816143f4565b60006020828403121561442457614424600080fd5b60006134dc8484614404565b6000610b78613c4c6bffffffffffffffffffffffff841681565b6137f481614430565b6060810161446182866138d5565b61446e602083018561444a565b81810360408301526144808184613848565b95945050505050565b8051610b7881613c88565b6000602082840312156144a9576144a9600080fd5b60006134dc8484614489565b60208082528101610b7881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600082614525576145256142ee565b500690565b6000610b788260f81b90565b6137f460ff821661452a565b61454c8183614536565b600101919050565b61ffff90811690821661426c565b60a0810161457082856141fc565b61388b6060830184613bf1565b6000610b788260601b90565b6000610b788261457d565b6137f46145a0826138c4565b614589565b6145af8187613808565b6020016145bc8186614594565b6014016145c98185613808565b6020016145d68184613808565b6020016145e38183613808565b60200195945050505050565b608081016145fd82876138d5565b61460a60208301866138d5565b6146176040830185613808565b81810360608301526141898184613848565b8051610b78816137ad565b60006020828403121561464957614649600080fd5b60006134dc848461462956fea2646970667358221220e478a0ede7916532ff38db6d964481d7be6adb6021d836804a38048e70b7078364736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106103385760003560e01c80634f6ccce7116101b0578063a22cb465116100ec578063c87b56dd11610095578063dfc7e2c91161006f578063dfc7e2c914610a11578063e10a64dd14610a31578063e985e9c514610a44578063f2fde38b14610a8d57600080fd5b8063c87b56dd146109bb578063cf62c8ab146109db578063d7822c99146109fb57600080fd5b8063b585209b116100c6578063b585209b14610966578063b88d4fde1461097b578063c074f4121461099b57600080fd5b8063a22cb465146108ab578063a715b15b146108cb578063a9b5898f146108ed57600080fd5b806372c64f16116101595780638ada6b0f116101335780638ada6b0f146108355780638da5cb5b1461086257806395d89b41146108805780639a14f79d1461089557600080fd5b806372c64f16146107c557806386758e71146107f55780638796ba8c1461081557600080fd5b806368d99f7c1161018a57806368d99f7c1461077957806370a0823114610790578063715018a6146107b057600080fd5b80634f6ccce7146106875780635a08cae5146106a75780636352211e1461075957600080fd5b80631fafadbc1161027f57806324e9edb01161022857806342842e0e1161020257806342842e0e1461060757806349cae612146106275780634e02099f146106475780634f558e791461066757600080fd5b806324e9edb0146105bd5780632f745c59146105d25780633ccfd60b146105f257600080fd5b806320c5780c1161025957806320c5780c1461055a57806321e182081461058857806323b872dd1461059d57600080fd5b80631fafadbc146104eb5780631fd9d0811461050b5780631fe543e31461053a57600080fd5b80630eecae21116102e1578063143a3f92116102bb578063143a3f921461048557806318160ddd1461049a5780631a6949e3146104d657600080fd5b80630eecae211461042e5780630f8236081461044357806312b40a9f1461046557600080fd5b8063081812fc11610312578063081812fc146103bf578063095ea7b3146103ec5780630badbd071461040e57600080fd5b806301ffc9a71461034457806304035a921461037a57806306fdde031461039d57600080fd5b3661033f57005b600080fd5b34801561035057600080fd5b5061036461035f3660046137cf565b610aad565b60405161037191906137fa565b60405180910390f35b34801561038657600080fd5b50610390600a5481565b604051610371919061380e565b3480156103a957600080fd5b506103b2610b7e565b604051610371919061387a565b3480156103cb57600080fd5b506103df6103da3660046138a3565b610c10565b60405161037191906138de565b3480156103f857600080fd5b5061040c610407366004613900565b610c6d565b005b34801561041a57600080fd5b5061040c61042936600461393d565b610d2d565b34801561043a57600080fd5b5061040c610e88565b34801561044f57600080fd5b50610458600381565b6040516103719190613968565b34801561047157600080fd5b5061040c610480366004613976565b611389565b34801561049157600080fd5b50610458602081565b3480156104a657600080fd5b506103906000546001600160801b0370010000000000000000000000000000000082048116918116919091031690565b3480156104e257600080fd5b50610364611416565b3480156104f757600080fd5b506104586105063660046138a3565b611431565b34801561051757600080fd5b5061052b6105263660046138a3565b611465565b604051610371939291906139b2565b34801561054657600080fd5b5061040c610555366004613adf565b6114af565b34801561056657600080fd5b50601a5461057b9067ffffffffffffffff1681565b6040516103719190613b3d565b34801561059457600080fd5b5061040c611543565b3480156105a957600080fd5b5061040c6105b8366004613b4b565b6116b7565b3480156105c957600080fd5b5061040c6116c2565b3480156105de57600080fd5b506103906105ed366004613900565b61178a565b3480156105fe57600080fd5b5061040c6118a0565b34801561061357600080fd5b5061040c610622366004613b4b565b611d17565b34801561063357600080fd5b5061040c610642366004613b9b565b611d32565b34801561065357600080fd5b5061040c610662366004613900565b611da7565b34801561067357600080fd5b506103646106823660046138a3565b611e2c565b34801561069357600080fd5b506103906106a23660046138a3565b611e37565b3480156106b357600080fd5b5061074a6106c23660046138a3565b601b602090815260009182526040918290208251606081018452815461ffff808216835268ffffffffffffffffff620100008304168386015260ff6b0100000000000000000000009092048216151583870152600184015486518088019097526002909401546001600160a01b0381168752600160a01b900416938501939093529291169083565b60405161037193929190613c10565b34801561076557600080fd5b506103df6107743660046138a3565b611efb565b34801561078557600080fd5b50600a541515610364565b34801561079c57600080fd5b506103906107ab366004613976565b611f0d565b3480156107bc57600080fd5b5061040c611f75565b3480156107d157600080fd5b506103646107e03660046138a3565b60156020526000908152604090205460ff1681565b34801561080157600080fd5b506103646108103660046138a3565b611fab565b34801561082157600080fd5b506103906108303660046138a3565b611fe8565b34801561084157600080fd5b50601354610855906001600160a01b031681565b6040516103719190613c7a565b34801561086e57600080fd5b506007546001600160a01b03166103df565b34801561088c57600080fd5b506103b2612009565b3480156108a157600080fd5b50610390601d5481565b3480156108b757600080fd5b5061040c6108c6366004613c9b565b612018565b3480156108d757600080fd5b506108e06120ca565b6040516103719190613d5e565b3480156108f957600080fd5b50600b546109549060ff81169061ffff610100820481169163010000008104821691650100000000008204169062ffffff6701000000000000008204169068ffffffffffffffffff6a01000000000000000000009091041686565b60405161037196959493929190613d7a565b34801561097257600080fd5b5061040c61225c565b34801561098757600080fd5b5061040c610996366004613e6b565b6122cb565b3480156109a757600080fd5b506012546103df906001600160a01b031681565b3480156109c757600080fd5b506103b26109d63660046138a3565b612305565b3480156109e757600080fd5b5061040c6109f6366004613f09565b612417565b348015610a0757600080fd5b5061039060095481565b348015610a1d57600080fd5b5061040c610a2c366004613f7c565b612610565b61040c610a3f366004613adf565b612680565b348015610a5057600080fd5b50610364610a5f366004613fc4565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b348015610a9957600080fd5b5061040c610aa8366004613976565b6129c9565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480610b1057506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610b4457506001600160e01b031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b80610b7857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060018054610b8d9061400d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb99061400d565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b5050505050905090565b6000610c1b82612a25565b610c51576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610c7882611efb565b9050806001600160a01b0316836001600160a01b03161415610cc6576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610ce65750610ce48133610a5f565b155b15610d1d576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d28838383612a59565b505050565b60026008541415610d595760405162461bcd60e51b8152600401610d5090614066565b60405180910390fd5b6002600855601054600d546040517f6352211e00000000000000000000000000000000000000000000000000000000815233926001600160a01b031691636352211e91610da9919060040161380e565b602060405180830381865afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190614081565b6001600160a01b031614610e2a576040517fb2c6179c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e548214610e65576040517f8f6d9d6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f54610e7f90610e789060ff16612ac2565b3383612afd565b50506001600855565b60026008541415610eab5760405162461bcd60e51b8152600401610d5090614066565b6002600855601c54601a5467ffffffffffffffff16610ef6576040517f15cd15ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610efe612dc6565b610f34576040517fc3a7d74d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610f4b906001600160801b031660016140b8565b6001600160801b0316600c8281548110610f6757610f676140f0565b60009182526020909120015461ffff161015611380576000600c8281548110610f9257610f926140f0565b6000918252602090912001546b010000000000000000000000900460ff168015610fda5750600b54600954610fd791670100000000000000900462ffffff1690614106565b42105b80610fe95750600f5460ff1682145b15610ffe57610ff782612ac2565b90506110ab565b601754601954601a546040517f5d3b1d300000000000000000000000000000000000000000000000000000000081526001600160a01b0390931692635d3b1d309261106592909167ffffffffffffffff909116906005906207a12090600190600401614147565b6020604051808303816000875af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a8919061419e565b90505b600c82815481106110be576110be6140f0565b6000918252602082200154601d80546201000090920468ffffffffffffffffff169290916110ed908490614106565b925050819055506040518060600160405280600c8481548110611112576111126140f0565b6000918252602080832060408051606081018252939091015461ffff80821685526201000080830468ffffffffffffffffff908116878701526b0100000000000000000000009384900460ff161515878601529588528785018790528351808501855287815280860188905297840197909752888652601b84529482902087518051825482870151928601519189167fffffffffffffffffffffffffffffffffffffffffff00000000000000000000009091161791909616909702969096177fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff16931515029290921784558481015160018501805460ff191691151591909117905593015180516002909301805491909401516001600160a01b039093167fffffffffffffffffffff0000000000000000000000000000000000000000000090911617600160a01b9290911691909102179055600c805482917fb40531e03f8d4be5f5bb24f4d1811140fbead25a449a04cdb8e941384a810702918590811061129d5761129d6140f0565b906000526020600020016040516112b49190614241565b60405180910390a2816112c68161424f565b601c8054600181810183556000929092527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101849055600c5491945061130d92509061426a565b821480156113345750600b54600a54611331916301000000900461ffff1690614106565b42105b15611340575050611382565b600c5482141561137a576040517fc4f545db975f34de8f12b4353fa42dd295e802239df19ebbe5fd3c245dad0a5a90600090a15050611382565b50610f34565b505b6001600855565b6007546001600160a01b031633146113b35760405162461bcd60e51b8152600401610d50906142b5565b601280546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560138054909116821790556040517f2926c01a1380ae82a404a8c554ad486a6842a4a320d80b770e2930d763825e4f90600090a250565b600060095460001415801561142c575060095442115b905090565b6014818154811061144157600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600c818154811061147557600080fd5b60009182526020909120015461ffff8116915062010000810468ffffffffffffffffff16906b010000000000000000000000900460ff1683565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610d509291906142c5565b61153f8282612e67565b5050565b6007546001600160a01b0316331461156d5760405162461bcd60e51b8152600401610d50906142b5565b600a546115a6576040517fe5b93aca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b54600a546115bf91610100900461ffff1690614106565b4210156115f8576040517f3e8e963c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040514790600090339083908381818185875af1925050503d806000811461163c576040519150601f19603f3d011682016040523d82523d6000602084013e611641565b606091505b505090508061167c576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de7826040516116ab919061380e565b60405180910390a15050565b610d28838383612ec5565b6007546001600160a01b031633146116ec5760405162461bcd60e51b8152600401610d50906142b5565b601754601a546040517fd7ae1d300000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163d7ae1d30916117459167ffffffffffffffff9091169033906004016142e0565b600060405180830381600087803b15801561175f57600080fd5b505af1158015611773573d6000803e3d6000fd5b5050601a805467ffffffffffffffff191690555050565b600061179583611f0d565b82106117cd576040517f0ddac30e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546001600160801b03169080805b8381101561189a57600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615801592820192909252906118465750611892565b80516001600160a01b03161561185b57805192505b876001600160a01b0316836001600160a01b03161415611890578684141561188957509350610b7892505050565b6001909301925b505b6001016117de565b50600080fd5b6007546001600160a01b031633146118ca5760405162461bcd60e51b8152600401610d50906142b5565b6118d2612dc6565b156118df576118df610e88565b4760005b601c5481101561198e57601b6000601c8381548110611904576119046140f0565b6000918252602080832090910154835282019290925260400190206001015460ff1661197c57601b6000601c8381548110611941576119416140f0565b600091825260208083209091015483528201929092526040019020546119799068ffffffffffffffffff62010000909104168361426a565b91505b806119868161424f565b9150506118e3565b5080806119c7576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601654601154604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600093926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a52919061419e565b611a5c919061426a565b600054601c549192506001600160801b0316905b600c54811015611c5657600082600c8381548110611a9057611a906140f0565b600091825260209091200154611aaa919061ffff1661426a565b905080841115611b1057600b54611ade9060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b611af39068ffffffffffffffffff1682614327565b611afd9087614106565b9550611b09818561426a565b9350611b9a565b600b546a0100000000000000000000900468ffffffffffffffffff16611b36858361426a565b611b409190614327565b600b54611b6a9060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b611b7f9068ffffffffffffffffff1686614327565b611b899190614106565b611b939087614106565b9550600093505b600c8281548110611bad57611bad6140f0565b600091825260209091200154611bd49062010000900468ffffffffffffffffff168761426a565b95506001861015611c11576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861015611c1d578594505b600c8281548110611c3057611c306140f0565b60009182526020909120015461ffff169250819050611c4e8161424f565b915050611a70565b50604051600090339085908381818185875af1925050503d8060008114611c99576040519150601f19603f3d011682016040523d82523d6000602084013e611c9e565b606091505b5050905080611cd9576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de784604051611d08919061380e565b60405180910390a15050505050565b610d28838383604051806020016040528060008152506122cb565b60026008541415611d555760405162461bcd60e51b8152600401610d5090614066565b60026008556007546001600160a01b03163314611d845760405162461bcd60e51b8152600401610d50906142b5565b6000611d8f84612ac2565b9050611d9c818484612afd565b505060016008555050565b6007546001600160a01b03163314611dd15760405162461bcd60e51b8152600401610d50906142b5565b600054600390611dea906001600160801b031683614106565b1115611e22576040517f74a5d1f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61153f828261312d565b6000610b7882612a25565b600080546001600160801b031681805b82811015611ec857600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611ebf5785831415611eb85750949350505050565b6001909201915b50600101611e47565b506040517fa723001c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611f0682613216565b5192915050565b60006001600160a01b038216611f4f576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6007546001600160a01b03163314611f9f5760405162461bcd60e51b8152600401610d50906142b5565b611fa96000613353565b565b600060148281548110611fc057611fc06140f0565b6000918252602091829020918104909101546001601f9092166101000a900481161492915050565b601c8181548110611ff857600080fd5b600091825260209091200154905081565b606060028054610b8d9061400d565b6001600160a01b03821633141561205b576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906120be9085906137fa565b60405180910390a35050565b601c5460609060009067ffffffffffffffff8111156120eb576120eb6139da565b60405190808252806020026020018201604052801561215b57816020015b6040805160c0810182526000606082018181526080830182905260a083018290528252602080830182905283518085018552828152808201929092529282015282526000199092019101816121095790505b50905060005b601c5481101561225657601b6000601c8381548110612182576121826140f0565b600091825260208083209091015483528281019390935260409182019020815160c081018352815461ffff8082166060840190815268ffffffffffffffffff62010000840416608085015260ff6b0100000000000000000000009093048316151560a085015283526001840154909116151582860152835180850185526002909301546001600160a01b0381168452600160a01b90041693820193909352908201528251839083908110612238576122386140f0565b6020026020010181905250808061224e9061424f565b915050612161565b50919050565b6007546001600160a01b031633146122865760405162461bcd60e51b8152600401610d50906142b5565b61228e611416565b156122c5576040517fd205ec1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600955565b6122d6848484612ec5565b6122e2848484846133b2565b6122ff576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061231082612a25565b612346576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012546001600160a01b031661236a57505060408051602081019091526000815290565b601354601480546001600160a01b0390921691635cc518ba91859182908110612395576123956140f0565b90600052602060002090602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b81526004016123d2929190614346565b600060405180830381865afa1580156123ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7891908101906143b9565b6002600854141561243a5760405162461bcd60e51b8152600401610d5090614066565b6002600855601a5467ffffffffffffffff1661256757601760009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af11580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c9919061440f565b601a805467ffffffffffffffff191667ffffffffffffffff9290921691821790556017546040517f7341c10c0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691637341c10c91612534919030906004016142e0565b600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050505b601854601754601a546040516001600160a01b0393841693634000aea093169185916125a09167ffffffffffffffff1690602001613b3d565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016125cd93929190614453565b6020604051808303816000875af11580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f9190614494565b600260085414156126335760405162461bcd60e51b8152600401610d5090614066565b600260085560005b8181101561267657612664838383818110612658576126586140f0565b905060200201356134e4565b8061266e8161424f565b91505061263b565b5050600160085550565b612688611416565b6126be576040517f63a2de0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260085414156126e15760405162461bcd60e51b8152600401610d5090614066565b6002600855600b546000546501000000000090910461ffff169061270f9084906001600160801b0316614106565b1115612747576040517ffd59427a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b546000906127719084906a0100000000000000000000900468ffffffffffffffffff16614327565b90506000805b835181101561293b57601154845133916001600160a01b031690636352211e908790859081106127a9576127a96140f0565b60200260200101516040518263ffffffff1660e01b81526004016127cd919061380e565b602060405180830381865afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190614081565b6001600160a01b03161461284e576040517f5246352300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60156000858381518110612864576128646140f0565b60209081029190910181015182528101919091526040016000205460ff1615801561288e57508482105b15612929576001601560008684815181106128ab576128ab6140f0565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555081806128e39061424f565b600b54909350612911915060ff8116906a0100000000000000000000900468ffffffffffffffffff16614304565b6129269068ffffffffffffffffff168461426a565b92505b806129338161424f565b915050612777565b50806016600082825461294e9190614106565b909155505034821461298c576040517ff7760f2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b546000546501000000000090910461ffff16906129b4906001600160801b031686614106565b14156129bf5742600a555b611d9c338561312d565b6007546001600160a01b031633146129f35760405162461bcd60e51b8152600401610d50906142b5565b6001600160a01b038116612a195760405162461bcd60e51b8152600401610d50906144b5565b612a2281613353565b50565b600080546001600160801b031682108015610b78575050600090815260036020526040902054600160e01b900460ff161590565b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000612acf60ff83614516565b604051602001612adf9190614542565b60408051601f19818403018152919052805160209091012092915050565b6000838152601b602052604090206001015460ff1615612b49576040517f636d49d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b602052604090205462010000900468ffffffffffffffffff16612b9f576040517f8e1773d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b0316612bb282611efb565b6001600160a01b031614612bf2576040517f03e21ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b6020526040902054612c119060019061ffff16614554565b61ffff16811115612c4e576040517f518af55d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152601b602081815260408084206001818101805460ff19169091179055815180830183526001600160a01b0380891680835261ffff808a168488019081528c8a529790965282516002850180549851909716600160a01b027fffffffffffffffffffff00000000000000000000000000000000000000000000909816921691909117959095179093555490519193929168ffffffffffffffffff62010000909204919091169060006040518083038185875af1925050503d8060008114612d35576040519150601f19603f3d011682016040523d82523d6000602084013e612d3a565b606091505b5050905080612d75576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152601b602052604090819020905186917f7d2db4ed55b360e8ea7d70390d6f63a1404136410fa6f3f94a41d1cf99488a7f91612db791908690614562565b60405180910390a25050505050565b600c54601c546000911415612ddb5750600090565b600c54612dea9060019061426a565b601c54148015612e135750600b54600a54612e10916301000000900461ffff1690614106565b42105b15612e1e5750600090565b600054601c54600c80546001600160801b03909316929091908110612e4557612e456140f0565b60009182526020909120015461ffff161115612e615750600090565b50600190565b6000828152601b6020526040812054825161ffff9091169190829084908390612e9257612e926140f0565b6020026020010151612ea49190614516565b90506000612eb182611efb565b9050612ebe858284612afd565b5050505050565b6000612ed082613216565b80519091506000906001600160a01b0316336001600160a01b03161480612efe57508151612efe9033610a5f565b80612f19575033612f0e84610c10565b6001600160a01b0316145b905080612f52576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614612fa1576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416612fe1576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ff16000848460000151612a59565b6001600160a01b038581166000908152600460209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600390945282852080546001600160e01b031916909417600160a01b4290921691909102179092559086018083529120549091166130e6576000546001600160801b03168110156130e6578251600082815260036020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612ebe565b6020811115613168576040517f359fd04400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081333442446040516020016131839594939291906145a5565b60405160208183030381529060405280519060200120905060005b8281101561320b57601460018383602081106131bc576131bc6140f0565b8354600181018555600094855260209485902094810490940180549290911a90921b60ff908116601f9094166101000a93840293021916919091179055806132038161424f565b91505061319e565b50610d2883836135a4565b60408051606081018252600080825260208201819052918101829052905482906001600160801b031681101561332157600081815260036020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061331f5780516001600160a01b0316156132b5579392505050565b5060001901600081815260036020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff161515928101929092521561331a579392505050565b6132b5565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156134d8576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061340f9033908990889088906004016145ef565b6020604051808303816000875af192505050801561344a575060408051601f3d908101601f1916820190925261344791810190614634565b60015b6134a5573d808015613478576040519150601f19603f3d011682016040523d82523d6000602084013e61347d565b606091505b50805161349d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001490506134dc565b5060015b949350505050565b336134ee82611efb565b6001600160a01b03161461352e576040517fff68d35d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60148181548110613541576135416140f0565b90600052602060002090602091828204019190069054906101000a900460ff1660011860148281548110613577576135776140f0565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555050565b61153f828260405180602001604052806000815250610d2883838360016000546001600160801b03166001600160a01b03851661360d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83613644576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600081815260046020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526003909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561376f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015613745575061374360008884886133b2565b155b15613763576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016136ee565b50600080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0392909216919091179055612ebe565b6001600160e01b031981165b8114612a2257600080fd5b8035610b78816137ad565b6000602082840312156137e4576137e4600080fd5b60006134dc84846137c4565b8015155b82525050565b60208101610b7882846137f0565b806137f4565b60208101610b788284613808565b60005b8381101561383757818101518382015260200161381f565b838111156122ff5750506000910152565b6000613852825190565b80845260208401935061386981856020860161381c565b601f01601f19169290920192915050565b6020808252810161388b8184613848565b9392505050565b806137b9565b8035610b7881613892565b6000602082840312156138b8576138b8600080fd5b60006134dc8484613898565b60006001600160a01b038216610b78565b6137f4816138c4565b60208101610b7882846138d5565b6137b9816138c4565b8035610b78816138ec565b6000806040838503121561391657613916600080fd5b600061392285856138f5565b925050602061393385828601613898565b9150509250929050565b6000806040838503121561395357613953600080fd5b60006139228585613898565b60ff81166137f4565b60208101610b78828461395f565b60006020828403121561398b5761398b600080fd5b60006134dc84846138f5565b61ffff81166137f4565b68ffffffffffffffffff81166137f4565b606081016139c08286613997565b6139cd60208301856139a1565b6134dc60408301846137f0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613a1657613a166139da565b6040525050565b6000613a2860405190565b9050613a3482826139f0565b919050565b600067ffffffffffffffff821115613a5357613a536139da565b5060209081020190565b6000613a70613a6b84613a39565b613a1d565b83815290506020808201908402830185811115613a8f57613a8f600080fd5b835b81811015613ab157613aa38782613898565b835260209283019201613a91565b5050509392505050565b600082601f830112613acf57613acf600080fd5b81356134dc848260208601613a5d565b60008060408385031215613af557613af5600080fd5b6000613b018585613898565b925050602083013567ffffffffffffffff811115613b2157613b21600080fd5b61393385828601613abb565b67ffffffffffffffff81166137f4565b60208101610b788284613b2d565b600080600060608486031215613b6357613b63600080fd5b6000613b6f86866138f5565b9350506020613b80868287016138f5565b9250506040613b9186828701613898565b9150509250925092565b600080600060608486031215613bb357613bb3600080fd5b6000613b6f8686613898565b8051613bcb8382613997565b506020810151613bde60208401826139a1565b506040810151610d2860408401826137f0565b8051613bfd83826138d5565b506020810151610d286020840182613997565b60c08101613c1e8286613bbf565b613c2b60608301856137f0565b6134dc6080830184613bf1565b6000610b786001600160a01b038316613c4f565b90565b6001600160a01b031690565b6000610b7882613c38565b6000610b7882613c5b565b6137f481613c66565b60208101610b788284613c71565b8015156137b9565b8035610b7881613c88565b60008060408385031215613cb157613cb1600080fd5b6000613cbd85856138f5565b925050602061393385828601613c90565b8051613cda8382613bbf565b506020810151613ced60608401826137f0565b506040810151610d286080840182613bf1565b613d0a8282613cce565b5060c00190565b60200190565b6000613d21825190565b808452602093840193830160005b82811015613d54578151613d438782613d00565b965050602082019150600101613d2f565b5093949350505050565b6020808252810161388b8184613d17565b62ffffff81166137f4565b60c08101613d88828961395f565b613d956020830188613997565b613da26040830187613997565b613daf6060830186613997565b613dbc6080830185613d6f565b613dc960a08301846139a1565b979650505050505050565b600067ffffffffffffffff821115613dee57613dee6139da565b601f19601f83011660200192915050565b82818337506000910152565b6000613e19613a6b84613dd4565b905082815260208101848484011115613e3457613e34600080fd5b613e3f848285613dff565b509392505050565b600082601f830112613e5b57613e5b600080fd5b81356134dc848260208601613e0b565b60008060008060808587031215613e8457613e84600080fd5b6000613e9087876138f5565b9450506020613ea1878288016138f5565b9350506040613eb287828801613898565b925050606085013567ffffffffffffffff811115613ed257613ed2600080fd5b613ede87828801613e47565b91505092959194509250565b6bffffffffffffffffffffffff81166137b9565b8035610b7881613eea565b600060208284031215613f1e57613f1e600080fd5b60006134dc8484613efe565b60008083601f840112613f3f57613f3f600080fd5b50813567ffffffffffffffff811115613f5a57613f5a600080fd5b602083019150836020820283011115613f7557613f75600080fd5b9250929050565b60008060208385031215613f9257613f92600080fd5b823567ffffffffffffffff811115613fac57613fac600080fd5b613fb885828601613f2a565b92509250509250929050565b60008060408385031215613fda57613fda600080fd5b6000613fe685856138f5565b9250506020613933858286016138f5565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061402157607f821691505b6020821081141561225657612256613ff7565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613d11565b60208082528101610b7881614034565b8051610b78816138ec565b60006020828403121561409657614096600080fd5b60006134dc8484614076565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03811690506001600160801b03821691506000826001600160801b03038211156140eb576140eb6140a2565b500190565b634e487b7160e01b600052603260045260246000fd5b600082198211156140eb576140eb6140a2565b6000610b78825b61ffff1690565b6137f481614119565b600063ffffffff8216610b78565b6137f481614130565b60a081016141558288613808565b6141626020830187613b2d565b61416f6040830186614127565b61417c606083018561413e565b614189608083018461413e565b9695505050505050565b8051610b7881613892565b6000602082840312156141b3576141b3600080fd5b60006134dc8484614193565b6000610b7882614120565b6000610b786141d98360101c90565b68ffffffffffffffffff1690565b6000610b786141f68360581c90565b60ff1690565b8054614207816141bf565b6142118482613997565b5061421b816141ca565b61422860208501826139a1565b50614232816141e7565b9050610d2860408401826137f0565b60608101610b7882846141fc565b6000600019821415614263576142636140a2565b5060010190565b815b9150600082821015614280576142806140a2565b500390565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613d11565b60208082528101610b7881614285565b604081016142d382856138d5565b61388b60208301846138d5565b604081016142d38285613b2d565b634e487b7160e01b600052601260045260246000fd5b68ffffffffffffffffff9182169116600082614322576143226142ee565b500490565b6000816000190483118215151615614341576143416140a2565b500290565b604081016143548285613808565b61388b602083018461395f565b600061436f613a6b84613dd4565b90508281526020810184848401111561438a5761438a600080fd5b613e3f84828561381c565b600082601f8301126143a9576143a9600080fd5b81516134dc848260208601614361565b6000602082840312156143ce576143ce600080fd5b815167ffffffffffffffff8111156143e8576143e8600080fd5b6134dc84828501614395565b67ffffffffffffffff81166137b9565b8051610b78816143f4565b60006020828403121561442457614424600080fd5b60006134dc8484614404565b6000610b78613c4c6bffffffffffffffffffffffff841681565b6137f481614430565b6060810161446182866138d5565b61446e602083018561444a565b81810360408301526144808184613848565b95945050505050565b8051610b7881613c88565b6000602082840312156144a9576144a9600080fd5b60006134dc8484614489565b60208082528101610b7881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600082614525576145256142ee565b500690565b6000610b788260f81b90565b6137f460ff821661452a565b61454c8183614536565b600101919050565b61ffff90811690821661426c565b60a0810161457082856141fc565b61388b6060830184613bf1565b6000610b788260601b90565b6000610b788261457d565b6137f46145a0826138c4565b614589565b6145af8187613808565b6020016145bc8186614594565b6014016145c98185613808565b6020016145d68184613808565b6020016145e38183613808565b60200195945050505050565b608081016145fd82876138d5565b61460a60208301866138d5565b6146176040830185613808565b81810360608301526141898184613848565b8051610b78816137ad565b60006020828403121561464957614649600080fd5b60006134dc848461462956fea2646970667358221220e478a0ede7916532ff38db6d964481d7be6adb6021d836804a38048e70b7078364736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "TheAnswer(uint256,uint256)": {
        "params": {
          "tokenId": "The selected token to be displayed on the website. This should be owned by the winner.",
          "value": "Word biggest mysteries are solved with this single value."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "fulfillContest(uint256,address,uint256)": {
        "params": {
          "giveawayIndex": "The index of the giveaway to fulfill, 0 based (the first giveaway is index 0).",
          "selectedToken": "The selected token to be displayed on the website.",
          "winner": "The selected winner address."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isMettaEnabled(uint256)": {
        "params": {
          "tokenId": "The Co-Bot token ID"
        }
      },
      "mintPublicSale(uint256,uint256[])": {
        "details": "The tokenIdsV1 parameter can be empty. The call will revert only if the sender pretends to own some      Co-Bots V1 that they actually don't. However it accepts already redeemed token and just ignore them silently.      This is to make it easier for people using etherscan to copy a bunch of token Ids without having to      manually check if they are redeemed or not. However, it is optimal in terms of gas fees to only give      tokenIds if they can actually be redeemed.",
        "params": {
          "quantity": "The number of COBOTS to mint.",
          "tokenIdsV1": "A list of V1 Co-Bots token Ids owned by the sender, used to determine the discount."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "TheAnswer(uint256,uint256)": {
        "notice": "Call this when, you know, you probably know what you're doing here.         revert."
      },
      "draw()": {
        "notice": "This function can be called at any time by anyone to trigger the unlocked giveaways. It will         revert if there is nothing to unlock to prevent anon from making useless tx. (Usually wallet, e.g.         metamask, warn this before signing).         Giveaways that use Chainlink VRF oracle will be fulfilled automatically by Chainlink. Giveaways that         require founders to unlock will be fulfilled by the founders."
      },
      "failsafeWithdraw()": {
        "notice": "A very basic function to act as a failsafe if the contract has a bug somewhere in the fulfill functions."
      },
      "fulfillContest(uint256,address,uint256)": {
        "notice": "This function lets the owner fulfill a giveaway. If the giveaway has not been unlocked, this will         revert."
      },
      "getOrderedFulfillments()": {
        "notice": "Use this to retrieve the ordered list of winners with their corresponding prizes and token Id.          Pending fulfillments are included (no winner drawn yet, probably waiting for Chainlink to fulfill)."
      },
      "isMettaEnabled(uint256)": {
        "notice": "Return true if the Co-Bot displays metta screen"
      },
      "mintPublicSale(uint256,uint256[])": {
        "notice": "Mints a batch of Co-Bots to the sender."
      },
      "withdraw()": {
        "notice": "At any point in time, founders can withdraw only up to the required balance to insure that the giveaways          will be paid. We take a conservative approach considering that all the remaining discounted bots will be minted          as soon as possible."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12029,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 12031,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_burnCounter",
        "offset": 16,
        "slot": "0",
        "type": "t_uint128"
      },
      {
        "astId": 12033,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12035,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12040,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)12020_storage)"
      },
      {
        "astId": 12045,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)12027_storage)"
      },
      {
        "astId": 12049,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12055,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5985,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6093,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11507,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11509,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "mintedOutTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10181,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "PARAMETERS",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Parameters)10172_storage"
      },
      {
        "astId": 10185,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "PRIZES",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Prize)10152_storage)dyn_storage"
      },
      {
        "astId": 10188,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "MYSTERY_CHALLENGE",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(MysteryChallenge)10159_storage"
      },
      {
        "astId": 10191,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "ENS",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IERC721)6238"
      },
      {
        "astId": 10194,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "COBOTS_V1",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC721Enumerable)6287"
      },
      {
        "astId": 10196,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 10199,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "renderer",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ICoBotsRendererV2)11643"
      },
      {
        "astId": 10202,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "coBotsSeeds",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 10206,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "coBotsV1Redeemed",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10208,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "_redeemedCount",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10910,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(VRFCoordinatorV2Interface)4116"
      },
      {
        "astId": 10913,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "LINKTOKEN",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(LinkTokenInterface)4003"
      },
      {
        "astId": 10915,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "gasKeyHash",
        "offset": 0,
        "slot": "25",
        "type": "t_bytes32"
      },
      {
        "astId": 10917,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "chainlinkSubscriptionId",
        "offset": 0,
        "slot": "26",
        "type": "t_uint64"
      },
      {
        "astId": 10997,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "fulfillments",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(Fulfillment)10992_storage)"
      },
      {
        "astId": 11000,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "requestIds",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11002,
        "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
        "label": "drawnAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Prize)10152_storage)dyn_storage": {
        "base": "t_struct(Prize)10152_storage",
        "encoding": "dynamic_array",
        "label": "struct CoBotsV2.Prize[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICoBotsRendererV2)11643": {
        "encoding": "inplace",
        "label": "contract ICoBotsRendererV2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)6238": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721Enumerable)6287": {
        "encoding": "inplace",
        "label": "contract IERC721Enumerable",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)4003": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)4116": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)12027_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)12027_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Fulfillment)10992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoBotsV2.Fulfillment)",
        "numberOfBytes": "32",
        "value": "t_struct(Fulfillment)10992_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)12020_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)12020_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)12027_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 12022,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 12024,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 12026,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fulfillment)10992_storage": {
        "encoding": "inplace",
        "label": "struct CoBotsV2.Fulfillment",
        "members": [
          {
            "astId": 10986,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "prize",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Prize)10152_storage"
          },
          {
            "astId": 10988,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 10991,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Winner)10983_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MysteryChallenge)10159_storage": {
        "encoding": "inplace",
        "label": "struct CoBotsV2.MysteryChallenge",
        "members": [
          {
            "astId": 10154,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "ensId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10156,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10158,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "prizeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Parameters)10172_storage": {
        "encoding": "inplace",
        "label": "struct CoBotsV2.Parameters",
        "members": [
          {
            "astId": 10161,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "cobotsV1Discount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10163,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "mintOutFoundersWithdrawalDelay",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10165,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "grandPrizeDelay",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10167,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "maxCobots",
            "offset": 5,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10169,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "contestDuration",
            "offset": 7,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 10171,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "mintPublicPrice",
            "offset": 10,
            "slot": "0",
            "type": "t_uint72"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Prize)10152_storage": {
        "encoding": "inplace",
        "label": "struct CoBotsV2.Prize",
        "members": [
          {
            "astId": 10147,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "checkpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10149,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 10151,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "isContest",
            "offset": 11,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)12020_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 12015,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12017,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 12019,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Winner)10983_storage": {
        "encoding": "inplace",
        "label": "struct CoBotsV2.Winner",
        "members": [
          {
            "astId": 10980,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "winner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10982,
            "contract": "contracts/co-bots/CoBotsV2.sol:CoBotsV2",
            "label": "tokenId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}