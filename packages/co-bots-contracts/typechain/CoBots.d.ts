/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CoBotsInterface extends ethers.utils.Interface {
  functions: {
    "COBOTS_MINT_DURATION()": FunctionFragment;
    "COBOTS_MINT_RAFFLE_DELAY()": FunctionFragment;
    "COBOTS_REFUND_DURATION()": FunctionFragment;
    "COORDINATION_RAFFLE_PRIZE()": FunctionFragment;
    "COORDINATION_RAFFLE_THRESHOLD()": FunctionFragment;
    "COORDINATION_RAFFLE_WINNERS_COUNT()": FunctionFragment;
    "MAIN_RAFFLE_PRIZE()": FunctionFragment;
    "MAIN_RAFFLE_WINNERS_COUNT()": FunctionFragment;
    "MAX_COBOTS()": FunctionFragment;
    "MAX_MINT_PER_ADDRESS()": FunctionFragment;
    "MINT_FOUNDERS_AND_GIVEAWAYS()": FunctionFragment;
    "MINT_GIVEAWAYS()": FunctionFragment;
    "MINT_PUBLIC_PRICE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimRefund()": FunctionFragment;
    "coBotsColorAgreement()": FunctionFragment;
    "coBotsColors(uint256)": FunctionFragment;
    "coBotsRefunded(uint256)": FunctionFragment;
    "coBotsSeeds(uint256)": FunctionFragment;
    "coBotsStatusDisabled(uint256)": FunctionFragment;
    "cooperativeRaffleEnabled()": FunctionFragment;
    "currentPrizeMoney()": FunctionFragment;
    "draw()": FunctionFragment;
    "drawCount()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "flipProxyState(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isDrawOpen()": FunctionFragment;
    "isMintedOut()": FunctionFragment;
    "isPublicSaleOpen()": FunctionFragment;
    "lastDrawTimestamp()": FunctionFragment;
    "looksrare()": FunctionFragment;
    "mintFoundersAndGiveaways(address,uint256)": FunctionFragment;
    "mintPublicSale(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "opensea()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "prizePerAddress(address)": FunctionFragment;
    "publicSaleStartTimestamp()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renderingContractAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setLooksrare(address)": FunctionFragment;
    "setOpensea(address)": FunctionFragment;
    "setPublicSaleTimestamp(uint256)": FunctionFragment;
    "setRenderingContractAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleColor(uint256)": FunctionFragment;
    "toggleColors(uint256[])": FunctionFragment;
    "toggleStatus(uint256)": FunctionFragment;
    "toggleStatuses(uint256[])": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COBOTS_MINT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COBOTS_MINT_RAFFLE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COBOTS_REFUND_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COORDINATION_RAFFLE_PRIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COORDINATION_RAFFLE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COORDINATION_RAFFLE_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAIN_RAFFLE_PRIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAIN_RAFFLE_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COBOTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MINT_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_FOUNDERS_AND_GIVEAWAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_GIVEAWAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_PUBLIC_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coBotsColorAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coBotsColors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coBotsRefunded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coBotsSeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coBotsStatusDisabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooperativeRaffleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrizeMoney",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "draw", values?: undefined): string;
  encodeFunctionData(functionFragment: "drawCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipProxyState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDrawOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintedOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSaleOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDrawTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "looksrare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFoundersAndGiveaways",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "opensea", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prizePerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleStartTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renderingContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLooksrare",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOpensea", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRenderingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleColors",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleStatuses",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "COBOTS_MINT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COBOTS_MINT_RAFFLE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COBOTS_REFUND_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COORDINATION_RAFFLE_PRIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COORDINATION_RAFFLE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COORDINATION_RAFFLE_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAIN_RAFFLE_PRIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAIN_RAFFLE_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_COBOTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MINT_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_FOUNDERS_AND_GIVEAWAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_GIVEAWAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_PUBLIC_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coBotsColorAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coBotsColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coBotsRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coBotsSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coBotsStatusDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooperativeRaffleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrizeMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flipProxyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDrawOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMintedOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSaleOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDrawTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "looksrare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFoundersAndGiveaways",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opensea", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizePerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renderingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLooksrare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOpensea", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenderingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class CoBots extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoBotsInterface;

  functions: {
    COBOTS_MINT_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    COBOTS_MINT_RAFFLE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    COBOTS_REFUND_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    COORDINATION_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    COORDINATION_RAFFLE_THRESHOLD(overrides?: CallOverrides): Promise<[number]>;

    COORDINATION_RAFFLE_WINNERS_COUNT(
      overrides?: CallOverrides
    ): Promise<[number]>;

    MAIN_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAIN_RAFFLE_WINNERS_COUNT(overrides?: CallOverrides): Promise<[number]>;

    MAX_COBOTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_MINT_PER_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MINT_FOUNDERS_AND_GIVEAWAYS(overrides?: CallOverrides): Promise<[number]>;

    MINT_GIVEAWAYS(overrides?: CallOverrides): Promise<[number]>;

    MINT_PUBLIC_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coBotsColorAgreement(overrides?: CallOverrides): Promise<[number]>;

    coBotsColors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    coBotsRefunded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    coBotsSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    coBotsStatusDisabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cooperativeRaffleEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    currentPrizeMoney(overrides?: CallOverrides): Promise<[BigNumber]>;

    draw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawCount(overrides?: CallOverrides): Promise<[number]>;

    exists(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    flipProxyState(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDrawOpen(overrides?: CallOverrides): Promise<[boolean]>;

    isMintedOut(overrides?: CallOverrides): Promise<[boolean]>;

    isPublicSaleOpen(overrides?: CallOverrides): Promise<[boolean]>;

    lastDrawTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    looksrare(overrides?: CallOverrides): Promise<[string]>;

    mintFoundersAndGiveaways(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPublicSale(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    opensea(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prizePerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicSaleStartTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renderingContractAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLooksrare(
      looksrare_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpensea(
      opensea_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRenderingContractAddress(
      _renderingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleColor(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleColors(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleStatus(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleStatuses(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COBOTS_MINT_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  COBOTS_MINT_RAFFLE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  COBOTS_REFUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  COORDINATION_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

  COORDINATION_RAFFLE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

  COORDINATION_RAFFLE_WINNERS_COUNT(overrides?: CallOverrides): Promise<number>;

  MAIN_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MAIN_RAFFLE_WINNERS_COUNT(overrides?: CallOverrides): Promise<number>;

  MAX_COBOTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MINT_PER_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MINT_FOUNDERS_AND_GIVEAWAYS(overrides?: CallOverrides): Promise<number>;

  MINT_GIVEAWAYS(overrides?: CallOverrides): Promise<number>;

  MINT_PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coBotsColorAgreement(overrides?: CallOverrides): Promise<number>;

  coBotsColors(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  coBotsRefunded(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  coBotsSeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  coBotsStatusDisabled(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cooperativeRaffleEnabled(overrides?: CallOverrides): Promise<boolean>;

  currentPrizeMoney(overrides?: CallOverrides): Promise<BigNumber>;

  draw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawCount(overrides?: CallOverrides): Promise<number>;

  exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  flipProxyState(
    proxyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDrawOpen(overrides?: CallOverrides): Promise<boolean>;

  isMintedOut(overrides?: CallOverrides): Promise<boolean>;

  isPublicSaleOpen(overrides?: CallOverrides): Promise<boolean>;

  lastDrawTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  looksrare(overrides?: CallOverrides): Promise<string>;

  mintFoundersAndGiveaways(
    to: string,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPublicSale(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  opensea(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  prizePerAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renderingContractAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLooksrare(
    looksrare_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpensea(
    opensea_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleTimestamp(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRenderingContractAddress(
    _renderingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleColor(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleColors(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleStatus(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleStatuses(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COBOTS_MINT_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COBOTS_MINT_RAFFLE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    COBOTS_REFUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COORDINATION_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    COORDINATION_RAFFLE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

    COORDINATION_RAFFLE_WINNERS_COUNT(
      overrides?: CallOverrides
    ): Promise<number>;

    MAIN_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_RAFFLE_WINNERS_COUNT(overrides?: CallOverrides): Promise<number>;

    MAX_COBOTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINT_PER_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MINT_FOUNDERS_AND_GIVEAWAYS(overrides?: CallOverrides): Promise<number>;

    MINT_GIVEAWAYS(overrides?: CallOverrides): Promise<number>;

    MINT_PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRefund(overrides?: CallOverrides): Promise<void>;

    coBotsColorAgreement(overrides?: CallOverrides): Promise<number>;

    coBotsColors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    coBotsRefunded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    coBotsSeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    coBotsStatusDisabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cooperativeRaffleEnabled(overrides?: CallOverrides): Promise<boolean>;

    currentPrizeMoney(overrides?: CallOverrides): Promise<BigNumber>;

    draw(overrides?: CallOverrides): Promise<void>;

    drawCount(overrides?: CallOverrides): Promise<number>;

    exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    flipProxyState(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDrawOpen(overrides?: CallOverrides): Promise<boolean>;

    isMintedOut(overrides?: CallOverrides): Promise<boolean>;

    isPublicSaleOpen(overrides?: CallOverrides): Promise<boolean>;

    lastDrawTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    looksrare(overrides?: CallOverrides): Promise<string>;

    mintFoundersAndGiveaways(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPublicSale(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    opensea(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    prizePerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renderingContractAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLooksrare(looksrare_: string, overrides?: CallOverrides): Promise<void>;

    setOpensea(opensea_: string, overrides?: CallOverrides): Promise<void>;

    setPublicSaleTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRenderingContractAddress(
      _renderingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleColor(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleColors(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleStatus(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleStatuses(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    COBOTS_MINT_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COBOTS_MINT_RAFFLE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    COBOTS_REFUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COORDINATION_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    COORDINATION_RAFFLE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    COORDINATION_RAFFLE_WINNERS_COUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAIN_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_RAFFLE_WINNERS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COBOTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINT_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_FOUNDERS_AND_GIVEAWAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_GIVEAWAYS(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coBotsColorAgreement(overrides?: CallOverrides): Promise<BigNumber>;

    coBotsColors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coBotsRefunded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coBotsSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coBotsStatusDisabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooperativeRaffleEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrizeMoney(overrides?: CallOverrides): Promise<BigNumber>;

    draw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawCount(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipProxyState(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDrawOpen(overrides?: CallOverrides): Promise<BigNumber>;

    isMintedOut(overrides?: CallOverrides): Promise<BigNumber>;

    isPublicSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

    lastDrawTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    looksrare(overrides?: CallOverrides): Promise<BigNumber>;

    mintFoundersAndGiveaways(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPublicSale(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    opensea(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizePerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renderingContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLooksrare(
      looksrare_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpensea(
      opensea_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRenderingContractAddress(
      _renderingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleColor(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleColors(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleStatus(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleStatuses(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COBOTS_MINT_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COBOTS_MINT_RAFFLE_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COBOTS_REFUND_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COORDINATION_RAFFLE_PRIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COORDINATION_RAFFLE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COORDINATION_RAFFLE_WINNERS_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAIN_RAFFLE_PRIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAIN_RAFFLE_WINNERS_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_COBOTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_MINT_PER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_FOUNDERS_AND_GIVEAWAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_GIVEAWAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_PUBLIC_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coBotsColorAgreement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coBotsColors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coBotsRefunded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coBotsSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coBotsStatusDisabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cooperativeRaffleEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPrizeMoney(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    draw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipProxyState(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDrawOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMintedOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublicSaleOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDrawTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    looksrare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFoundersAndGiveaways(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPublicSale(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opensea(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizePerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleStartTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renderingContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLooksrare(
      looksrare_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpensea(
      opensea_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRenderingContractAddress(
      _renderingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleColor(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleColors(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleStatus(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleStatuses(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
