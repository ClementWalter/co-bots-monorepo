/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VRFCoordinatorV2Interface extends ethers.utils.Interface {
  functions: {
    "BLOCKHASH_STORE()": FunctionFragment;
    "LINK()": FunctionFragment;
    "LINK_ETH_FEED()": FunctionFragment;
    "MAX_CONSUMERS()": FunctionFragment;
    "MAX_NUM_WORDS()": FunctionFragment;
    "MAX_REQUEST_CONFIRMATIONS()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptSubscriptionOwnerTransfer(uint64)": FunctionFragment;
    "addConsumer(uint64,address)": FunctionFragment;
    "cancelSubscription(uint64,address)": FunctionFragment;
    "createSubscription()": FunctionFragment;
    "deregisterProvingKey(uint256[2])": FunctionFragment;
    "fulfillRandomWords((uint256[2],uint256[2],uint256,uint256,uint256,address,uint256[2],uint256[2],uint256),(uint64,uint64,uint32,uint32,address))": FunctionFragment;
    "getCommitment(uint256)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getCurrentSubId()": FunctionFragment;
    "getFallbackWeiPerUnitLink()": FunctionFragment;
    "getFeeConfig()": FunctionFragment;
    "getFeeTier(uint64)": FunctionFragment;
    "getRequestConfig()": FunctionFragment;
    "getSubscription(uint64)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "hashOfKey(uint256[2])": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleWithdraw(address,uint96)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerCancelSubscription(uint64)": FunctionFragment;
    "pendingRequestExists(uint64)": FunctionFragment;
    "recoverFunds(address)": FunctionFragment;
    "registerProvingKey(address,uint256[2])": FunctionFragment;
    "removeConsumer(uint64,address)": FunctionFragment;
    "requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": FunctionFragment;
    "requestSubscriptionOwnerTransfer(uint64,address)": FunctionFragment;
    "setConfig(uint16,uint32,uint32,uint32,int256,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "typeAndVersion()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BLOCKHASH_STORE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_ETH_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NUM_WORDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REQUEST_CONFIRMATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterProvingKey",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWords",
    values: [
      {
        pk: [BigNumberish, BigNumberish];
        gamma: [BigNumberish, BigNumberish];
        c: BigNumberish;
        s: BigNumberish;
        seed: BigNumberish;
        uWitness: string;
        cGammaWitness: [BigNumberish, BigNumberish];
        sHashWitness: [BigNumberish, BigNumberish];
        zInv: BigNumberish;
      },
      {
        blockNum: BigNumberish;
        subId: BigNumberish;
        callbackGasLimit: BigNumberish;
        numWords: BigNumberish;
        sender: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackWeiPerUnitLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashOfKey",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProvingKey",
    values: [string, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
        reqsForTier2: BigNumberish;
        reqsForTier3: BigNumberish;
        reqsForTier4: BigNumberish;
        reqsForTier5: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCKHASH_STORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_ETH_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NUM_WORDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REQUEST_CONFIRMATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterProvingKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackWeiPerUnitLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOfKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProvingKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;

  events: {
    "ConfigSet(uint16,uint32,uint32,uint32,int256,tuple)": EventFragment;
    "FundsRecovered(address,uint256)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProvingKeyDeregistered(bytes32,address)": EventFragment;
    "ProvingKeyRegistered(bytes32,address)": EventFragment;
    "RandomWordsFulfilled(uint256,uint256,uint96,bool)": EventFragment;
    "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)": EventFragment;
    "SubscriptionCanceled(uint64,address,uint256)": EventFragment;
    "SubscriptionConsumerAdded(uint64,address)": EventFragment;
    "SubscriptionConsumerRemoved(uint64,address)": EventFragment;
    "SubscriptionCreated(uint64,address)": EventFragment;
    "SubscriptionFunded(uint64,uint256,uint256)": EventFragment;
    "SubscriptionOwnerTransferRequested(uint64,address,address)": EventFragment;
    "SubscriptionOwnerTransferred(uint64,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvingKeyDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvingKeyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomWordsFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomWordsRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionConsumerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionConsumerRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionFunded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionOwnerTransferRequested"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionOwnerTransferred"
  ): EventFragment;
}

export type ConfigSetEvent = TypedEvent<
  [
    number,
    number,
    number,
    number,
    BigNumber,
    [number, number, number, number, number, number, number, number, number] & {
      fulfillmentFlatFeeLinkPPMTier1: number;
      fulfillmentFlatFeeLinkPPMTier2: number;
      fulfillmentFlatFeeLinkPPMTier3: number;
      fulfillmentFlatFeeLinkPPMTier4: number;
      fulfillmentFlatFeeLinkPPMTier5: number;
      reqsForTier2: number;
      reqsForTier3: number;
      reqsForTier4: number;
      reqsForTier5: number;
    }
  ] & {
    minimumRequestConfirmations: number;
    maxGasLimit: number;
    stalenessSeconds: number;
    gasAfterPaymentCalculation: number;
    fallbackWeiPerUnitLink: BigNumber;
    feeConfig: [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      fulfillmentFlatFeeLinkPPMTier1: number;
      fulfillmentFlatFeeLinkPPMTier2: number;
      fulfillmentFlatFeeLinkPPMTier3: number;
      fulfillmentFlatFeeLinkPPMTier4: number;
      fulfillmentFlatFeeLinkPPMTier5: number;
      reqsForTier2: number;
      reqsForTier3: number;
      reqsForTier4: number;
      reqsForTier5: number;
    };
  }
>;

export type FundsRecoveredEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type ProvingKeyDeregisteredEvent = TypedEvent<
  [string, string] & { keyHash: string; oracle: string }
>;

export type ProvingKeyRegisteredEvent = TypedEvent<
  [string, string] & { keyHash: string; oracle: string }
>;

export type RandomWordsFulfilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean] & {
    requestId: BigNumber;
    outputSeed: BigNumber;
    payment: BigNumber;
    success: boolean;
  }
>;

export type RandomWordsRequestedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, number, number, string] & {
    keyHash: string;
    requestId: BigNumber;
    preSeed: BigNumber;
    subId: BigNumber;
    minimumRequestConfirmations: number;
    callbackGasLimit: number;
    numWords: number;
    sender: string;
  }
>;

export type SubscriptionCanceledEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    subId: BigNumber;
    to: string;
    amount: BigNumber;
  }
>;

export type SubscriptionConsumerAddedEvent = TypedEvent<
  [BigNumber, string] & { subId: BigNumber; consumer: string }
>;

export type SubscriptionConsumerRemovedEvent = TypedEvent<
  [BigNumber, string] & { subId: BigNumber; consumer: string }
>;

export type SubscriptionCreatedEvent = TypedEvent<
  [BigNumber, string] & { subId: BigNumber; owner: string }
>;

export type SubscriptionFundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    subId: BigNumber;
    oldBalance: BigNumber;
    newBalance: BigNumber;
  }
>;

export type SubscriptionOwnerTransferRequestedEvent = TypedEvent<
  [BigNumber, string, string] & { subId: BigNumber; from: string; to: string }
>;

export type SubscriptionOwnerTransferredEvent = TypedEvent<
  [BigNumber, string, string] & { subId: BigNumber; from: string; to: string }
>;

export class VRFCoordinatorV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VRFCoordinatorV2Interface;

  functions: {
    BLOCKHASH_STORE(overrides?: CallOverrides): Promise<[string]>;

    LINK(overrides?: CallOverrides): Promise<[string]>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<[string]>;

    MAX_CONSUMERS(overrides?: CallOverrides): Promise<[number]>;

    MAX_NUM_WORDS(overrides?: CallOverrides): Promise<[number]>;

    MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptSubscriptionOwnerTransfer(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSubscription(
      subId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deregisterProvingKey(
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillRandomWords(
      proof: {
        pk: [BigNumberish, BigNumberish];
        gamma: [BigNumberish, BigNumberish];
        c: BigNumberish;
        s: BigNumberish;
        seed: BigNumberish;
        uWitness: string;
        cGammaWitness: [BigNumberish, BigNumberish];
        sHashWitness: [BigNumberish, BigNumberish];
        zInv: BigNumberish;
      },
      rc: {
        blockNum: BigNumberish;
        subId: BigNumberish;
        callbackGasLimit: BigNumberish;
        numWords: BigNumberish;
        sender: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCommitment(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        minimumRequestConfirmations: number;
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: number;
      }
    >;

    getCurrentSubId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        fulfillmentFlatFeeLinkPPMTier1: number;
        fulfillmentFlatFeeLinkPPMTier2: number;
        fulfillmentFlatFeeLinkPPMTier3: number;
        fulfillmentFlatFeeLinkPPMTier4: number;
        fulfillmentFlatFeeLinkPPMTier5: number;
        reqsForTier2: number;
        reqsForTier3: number;
        reqsForTier4: number;
        reqsForTier5: number;
      }
    >;

    getFeeTier(
      reqCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRequestConfig(
      overrides?: CallOverrides
    ): Promise<[number, number, string[]]>;

    getSubscription(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string[]] & {
        balance: BigNumber;
        reqCount: BigNumber;
        owner: string;
        consumers: string[];
      }
    >;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashOfKey(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[string]>;

    onTokenTransfer(
      arg0: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleWithdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerCancelSubscription(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingRequestExists(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoverFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerProvingKey(
      oracle: string,
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandomWords(
      keyHash: BytesLike,
      subId: BigNumberish,
      requestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSubscriptionOwnerTransfer(
      subId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      minimumRequestConfirmations: BigNumberish,
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      feeConfig: {
        fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
        reqsForTier2: BigNumberish;
        reqsForTier3: BigNumberish;
        reqsForTier4: BigNumberish;
        reqsForTier5: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  BLOCKHASH_STORE(overrides?: CallOverrides): Promise<string>;

  LINK(overrides?: CallOverrides): Promise<string>;

  LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

  MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;

  MAX_NUM_WORDS(overrides?: CallOverrides): Promise<number>;

  MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptSubscriptionOwnerTransfer(
    subId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addConsumer(
    subId: BigNumberish,
    consumer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSubscription(
    subId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSubscription(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deregisterProvingKey(
    publicProvingKey: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillRandomWords(
    proof: {
      pk: [BigNumberish, BigNumberish];
      gamma: [BigNumberish, BigNumberish];
      c: BigNumberish;
      s: BigNumberish;
      seed: BigNumberish;
      uWitness: string;
      cGammaWitness: [BigNumberish, BigNumberish];
      sHashWitness: [BigNumberish, BigNumberish];
      zInv: BigNumberish;
    },
    rc: {
      blockNum: BigNumberish;
      subId: BigNumberish;
      callbackGasLimit: BigNumberish;
      numWords: BigNumberish;
      sender: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCommitment(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      minimumRequestConfirmations: number;
      maxGasLimit: number;
      stalenessSeconds: number;
      gasAfterPaymentCalculation: number;
    }
  >;

  getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;

  getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number, number, number, number] & {
      fulfillmentFlatFeeLinkPPMTier1: number;
      fulfillmentFlatFeeLinkPPMTier2: number;
      fulfillmentFlatFeeLinkPPMTier3: number;
      fulfillmentFlatFeeLinkPPMTier4: number;
      fulfillmentFlatFeeLinkPPMTier5: number;
      reqsForTier2: number;
      reqsForTier3: number;
      reqsForTier4: number;
      reqsForTier5: number;
    }
  >;

  getFeeTier(
    reqCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getRequestConfig(
    overrides?: CallOverrides
  ): Promise<[number, number, string[]]>;

  getSubscription(
    subId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string[]] & {
      balance: BigNumber;
      reqCount: BigNumber;
      owner: string;
      consumers: string[];
    }
  >;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  hashOfKey(
    publicKey: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<string>;

  onTokenTransfer(
    arg0: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleWithdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerCancelSubscription(
    subId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingRequestExists(
    subId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverFunds(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerProvingKey(
    oracle: string,
    publicProvingKey: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeConsumer(
    subId: BigNumberish,
    consumer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandomWords(
    keyHash: BytesLike,
    subId: BigNumberish,
    requestConfirmations: BigNumberish,
    callbackGasLimit: BigNumberish,
    numWords: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSubscriptionOwnerTransfer(
    subId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    minimumRequestConfirmations: BigNumberish,
    maxGasLimit: BigNumberish,
    stalenessSeconds: BigNumberish,
    gasAfterPaymentCalculation: BigNumberish,
    fallbackWeiPerUnitLink: BigNumberish,
    feeConfig: {
      fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
      fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
      fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
      fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
      fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
      reqsForTier2: BigNumberish;
      reqsForTier3: BigNumberish;
      reqsForTier4: BigNumberish;
      reqsForTier5: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeAndVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BLOCKHASH_STORE(overrides?: CallOverrides): Promise<string>;

    LINK(overrides?: CallOverrides): Promise<string>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

    MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;

    MAX_NUM_WORDS(overrides?: CallOverrides): Promise<number>;

    MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptSubscriptionOwnerTransfer(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSubscription(
      subId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterProvingKey(
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillRandomWords(
      proof: {
        pk: [BigNumberish, BigNumberish];
        gamma: [BigNumberish, BigNumberish];
        c: BigNumberish;
        s: BigNumberish;
        seed: BigNumberish;
        uWitness: string;
        cGammaWitness: [BigNumberish, BigNumberish];
        sHashWitness: [BigNumberish, BigNumberish];
        zInv: BigNumberish;
      },
      rc: {
        blockNum: BigNumberish;
        subId: BigNumberish;
        callbackGasLimit: BigNumberish;
        numWords: BigNumberish;
        sender: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitment(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        minimumRequestConfirmations: number;
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: number;
      }
    >;

    getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        fulfillmentFlatFeeLinkPPMTier1: number;
        fulfillmentFlatFeeLinkPPMTier2: number;
        fulfillmentFlatFeeLinkPPMTier3: number;
        fulfillmentFlatFeeLinkPPMTier4: number;
        fulfillmentFlatFeeLinkPPMTier5: number;
        reqsForTier2: number;
        reqsForTier3: number;
        reqsForTier4: number;
        reqsForTier5: number;
      }
    >;

    getFeeTier(
      reqCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getRequestConfig(
      overrides?: CallOverrides
    ): Promise<[number, number, string[]]>;

    getSubscription(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string[]] & {
        balance: BigNumber;
        reqCount: BigNumber;
        owner: string;
        consumers: string[];
      }
    >;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    hashOfKey(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<string>;

    onTokenTransfer(
      arg0: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleWithdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerCancelSubscription(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingRequestExists(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverFunds(to: string, overrides?: CallOverrides): Promise<void>;

    registerProvingKey(
      oracle: string,
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    removeConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandomWords(
      keyHash: BytesLike,
      subId: BigNumberish,
      requestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestSubscriptionOwnerTransfer(
      subId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      minimumRequestConfirmations: BigNumberish,
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      feeConfig: {
        fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
        reqsForTier2: BigNumberish;
        reqsForTier3: BigNumberish;
        reqsForTier4: BigNumberish;
        reqsForTier5: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ConfigSet(uint16,uint32,uint32,uint32,int256,tuple)"(
      minimumRequestConfirmations?: null,
      maxGasLimit?: null,
      stalenessSeconds?: null,
      gasAfterPaymentCalculation?: null,
      fallbackWeiPerUnitLink?: null,
      feeConfig?: null
    ): TypedEventFilter<
      [
        number,
        number,
        number,
        number,
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ] & {
          fulfillmentFlatFeeLinkPPMTier1: number;
          fulfillmentFlatFeeLinkPPMTier2: number;
          fulfillmentFlatFeeLinkPPMTier3: number;
          fulfillmentFlatFeeLinkPPMTier4: number;
          fulfillmentFlatFeeLinkPPMTier5: number;
          reqsForTier2: number;
          reqsForTier3: number;
          reqsForTier4: number;
          reqsForTier5: number;
        }
      ],
      {
        minimumRequestConfirmations: number;
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: number;
        fallbackWeiPerUnitLink: BigNumber;
        feeConfig: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ] & {
          fulfillmentFlatFeeLinkPPMTier1: number;
          fulfillmentFlatFeeLinkPPMTier2: number;
          fulfillmentFlatFeeLinkPPMTier3: number;
          fulfillmentFlatFeeLinkPPMTier4: number;
          fulfillmentFlatFeeLinkPPMTier5: number;
          reqsForTier2: number;
          reqsForTier3: number;
          reqsForTier4: number;
          reqsForTier5: number;
        };
      }
    >;

    ConfigSet(
      minimumRequestConfirmations?: null,
      maxGasLimit?: null,
      stalenessSeconds?: null,
      gasAfterPaymentCalculation?: null,
      fallbackWeiPerUnitLink?: null,
      feeConfig?: null
    ): TypedEventFilter<
      [
        number,
        number,
        number,
        number,
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ] & {
          fulfillmentFlatFeeLinkPPMTier1: number;
          fulfillmentFlatFeeLinkPPMTier2: number;
          fulfillmentFlatFeeLinkPPMTier3: number;
          fulfillmentFlatFeeLinkPPMTier4: number;
          fulfillmentFlatFeeLinkPPMTier5: number;
          reqsForTier2: number;
          reqsForTier3: number;
          reqsForTier4: number;
          reqsForTier5: number;
        }
      ],
      {
        minimumRequestConfirmations: number;
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: number;
        fallbackWeiPerUnitLink: BigNumber;
        feeConfig: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ] & {
          fulfillmentFlatFeeLinkPPMTier1: number;
          fulfillmentFlatFeeLinkPPMTier2: number;
          fulfillmentFlatFeeLinkPPMTier3: number;
          fulfillmentFlatFeeLinkPPMTier4: number;
          fulfillmentFlatFeeLinkPPMTier5: number;
          reqsForTier2: number;
          reqsForTier3: number;
          reqsForTier4: number;
          reqsForTier5: number;
        };
      }
    >;

    "FundsRecovered(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    FundsRecovered(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "ProvingKeyDeregistered(bytes32,address)"(
      keyHash?: null,
      oracle?: string | null
    ): TypedEventFilter<[string, string], { keyHash: string; oracle: string }>;

    ProvingKeyDeregistered(
      keyHash?: null,
      oracle?: string | null
    ): TypedEventFilter<[string, string], { keyHash: string; oracle: string }>;

    "ProvingKeyRegistered(bytes32,address)"(
      keyHash?: null,
      oracle?: string | null
    ): TypedEventFilter<[string, string], { keyHash: string; oracle: string }>;

    ProvingKeyRegistered(
      keyHash?: null,
      oracle?: string | null
    ): TypedEventFilter<[string, string], { keyHash: string; oracle: string }>;

    "RandomWordsFulfilled(uint256,uint256,uint96,bool)"(
      requestId?: BigNumberish | null,
      outputSeed?: null,
      payment?: null,
      success?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        requestId: BigNumber;
        outputSeed: BigNumber;
        payment: BigNumber;
        success: boolean;
      }
    >;

    RandomWordsFulfilled(
      requestId?: BigNumberish | null,
      outputSeed?: null,
      payment?: null,
      success?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        requestId: BigNumber;
        outputSeed: BigNumber;
        payment: BigNumber;
        success: boolean;
      }
    >;

    "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)"(
      keyHash?: BytesLike | null,
      requestId?: null,
      preSeed?: null,
      subId?: BigNumberish | null,
      minimumRequestConfirmations?: null,
      callbackGasLimit?: null,
      numWords?: null,
      sender?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, number, number, string],
      {
        keyHash: string;
        requestId: BigNumber;
        preSeed: BigNumber;
        subId: BigNumber;
        minimumRequestConfirmations: number;
        callbackGasLimit: number;
        numWords: number;
        sender: string;
      }
    >;

    RandomWordsRequested(
      keyHash?: BytesLike | null,
      requestId?: null,
      preSeed?: null,
      subId?: BigNumberish | null,
      minimumRequestConfirmations?: null,
      callbackGasLimit?: null,
      numWords?: null,
      sender?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, number, number, string],
      {
        keyHash: string;
        requestId: BigNumber;
        preSeed: BigNumber;
        subId: BigNumber;
        minimumRequestConfirmations: number;
        callbackGasLimit: number;
        numWords: number;
        sender: string;
      }
    >;

    "SubscriptionCanceled(uint64,address,uint256)"(
      subId?: BigNumberish | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { subId: BigNumber; to: string; amount: BigNumber }
    >;

    SubscriptionCanceled(
      subId?: BigNumberish | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { subId: BigNumber; to: string; amount: BigNumber }
    >;

    "SubscriptionConsumerAdded(uint64,address)"(
      subId?: BigNumberish | null,
      consumer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; consumer: string }
    >;

    SubscriptionConsumerAdded(
      subId?: BigNumberish | null,
      consumer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; consumer: string }
    >;

    "SubscriptionConsumerRemoved(uint64,address)"(
      subId?: BigNumberish | null,
      consumer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; consumer: string }
    >;

    SubscriptionConsumerRemoved(
      subId?: BigNumberish | null,
      consumer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; consumer: string }
    >;

    "SubscriptionCreated(uint64,address)"(
      subId?: BigNumberish | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; owner: string }
    >;

    SubscriptionCreated(
      subId?: BigNumberish | null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subId: BigNumber; owner: string }
    >;

    "SubscriptionFunded(uint64,uint256,uint256)"(
      subId?: BigNumberish | null,
      oldBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { subId: BigNumber; oldBalance: BigNumber; newBalance: BigNumber }
    >;

    SubscriptionFunded(
      subId?: BigNumberish | null,
      oldBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { subId: BigNumber; oldBalance: BigNumber; newBalance: BigNumber }
    >;

    "SubscriptionOwnerTransferRequested(uint64,address,address)"(
      subId?: BigNumberish | null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { subId: BigNumber; from: string; to: string }
    >;

    SubscriptionOwnerTransferRequested(
      subId?: BigNumberish | null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { subId: BigNumber; from: string; to: string }
    >;

    "SubscriptionOwnerTransferred(uint64,address,address)"(
      subId?: BigNumberish | null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { subId: BigNumber; from: string; to: string }
    >;

    SubscriptionOwnerTransferred(
      subId?: BigNumberish | null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { subId: BigNumber; from: string; to: string }
    >;
  };

  estimateGas: {
    BLOCKHASH_STORE(overrides?: CallOverrides): Promise<BigNumber>;

    LINK(overrides?: CallOverrides): Promise<BigNumber>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CONSUMERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUM_WORDS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptSubscriptionOwnerTransfer(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSubscription(
      subId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deregisterProvingKey(
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillRandomWords(
      proof: {
        pk: [BigNumberish, BigNumberish];
        gamma: [BigNumberish, BigNumberish];
        c: BigNumberish;
        s: BigNumberish;
        seed: BigNumberish;
        uWitness: string;
        cGammaWitness: [BigNumberish, BigNumberish];
        sHashWitness: [BigNumberish, BigNumberish];
        zInv: BigNumberish;
      },
      rc: {
        blockNum: BigNumberish;
        subId: BigNumberish;
        callbackGasLimit: BigNumberish;
        numWords: BigNumberish;
        sender: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCommitment(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeTier(
      reqCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscription(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    hashOfKey(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      arg0: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleWithdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCancelSubscription(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingRequestExists(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerProvingKey(
      oracle: string,
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandomWords(
      keyHash: BytesLike,
      subId: BigNumberish,
      requestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSubscriptionOwnerTransfer(
      subId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      minimumRequestConfirmations: BigNumberish,
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      feeConfig: {
        fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
        reqsForTier2: BigNumberish;
        reqsForTier3: BigNumberish;
        reqsForTier4: BigNumberish;
        reqsForTier5: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKHASH_STORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_CONSUMERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_NUM_WORDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REQUEST_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptSubscriptionOwnerTransfer(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSubscription(
      subId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deregisterProvingKey(
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillRandomWords(
      proof: {
        pk: [BigNumberish, BigNumberish];
        gamma: [BigNumberish, BigNumberish];
        c: BigNumberish;
        s: BigNumberish;
        seed: BigNumberish;
        uWitness: string;
        cGammaWitness: [BigNumberish, BigNumberish];
        sHashWitness: [BigNumberish, BigNumberish];
        zInv: BigNumberish;
      },
      rc: {
        blockNum: BigNumberish;
        subId: BigNumberish;
        callbackGasLimit: BigNumberish;
        numWords: BigNumberish;
        sender: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCommitment(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentSubId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackWeiPerUnitLink(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeTier(
      reqCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscription(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashOfKey(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      arg0: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleWithdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCancelSubscription(
      subId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingRequestExists(
      subId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerProvingKey(
      oracle: string,
      publicProvingKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeConsumer(
      subId: BigNumberish,
      consumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomWords(
      keyHash: BytesLike,
      subId: BigNumberish,
      requestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSubscriptionOwnerTransfer(
      subId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      minimumRequestConfirmations: BigNumberish,
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      feeConfig: {
        fulfillmentFlatFeeLinkPPMTier1: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier2: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier3: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier4: BigNumberish;
        fulfillmentFlatFeeLinkPPMTier5: BigNumberish;
        reqsForTier2: BigNumberish;
        reqsForTier3: BigNumberish;
        reqsForTier4: BigNumberish;
        reqsForTier5: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
