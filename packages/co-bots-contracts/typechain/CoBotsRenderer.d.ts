/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CoBotsRendererInterface extends ethers.utils.Interface {
  functions: {
    "BITS_PER_COORDINATES()": FunctionFragment;
    "BITS_PER_FILL_INDEX()": FunctionFragment;
    "FILL_TAG()": FunctionFragment;
    "HEIGHT_TAG()": FunctionFragment;
    "RECT_TAG_END()": FunctionFragment;
    "RECT_TAG_START()": FunctionFragment;
    "SVG_TAG_END()": FunctionFragment;
    "SVG_TAG_START()": FunctionFragment;
    "WIDTH_TAG()": FunctionFragment;
    "Y_TAG()": FunctionFragment;
    "decode32Rects(bytes)": FunctionFragment;
    "decode8Rects(bytes32)": FunctionFragment;
    "decodeRect(bytes)": FunctionFragment;
    "fillPalette()": FunctionFragment;
    "getCoBotAttributes(uint256[10],bool,bool)": FunctionFragment;
    "getCoBotBytes(uint256[10])": FunctionFragment;
    "getCoBotImageURI(uint256[10])": FunctionFragment;
    "getCoBotItems(uint256,uint8,bool,bool)": FunctionFragment;
    "getFill(uint256)": FunctionFragment;
    "getImageURI(bytes)": FunctionFragment;
    "getNounishItems()": FunctionFragment;
    "getRandomItems(uint256,uint8)": FunctionFragment;
    "getToadItems()": FunctionFragment;
    "getTrait(bytes)": FunctionFragment;
    "getTraitBytes(uint256)": FunctionFragment;
    "getTraitIndex(uint256,uint256)": FunctionFragment;
    "getWizardItems()": FunctionFragment;
    "layerIndexes()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFillPalette(bytes)": FunctionFragment;
    "setLayerIndexes(bytes)": FunctionFragment;
    "setTraitPalette(bytes)": FunctionFragment;
    "setTraitPaletteIndexes(bytes)": FunctionFragment;
    "tokenURI(uint256,uint8,bool,bool)": FunctionFragment;
    "traitPalette()": FunctionFragment;
    "traitPaletteIndexes()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BITS_PER_COORDINATES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITS_PER_FILL_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FILL_TAG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "HEIGHT_TAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECT_TAG_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECT_TAG_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SVG_TAG_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SVG_TAG_START",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WIDTH_TAG", values?: undefined): string;
  encodeFunctionData(functionFragment: "Y_TAG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decode32Rects",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decode8Rects",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRect",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPalette",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoBotAttributes",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoBotBytes",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoBotImageURI",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoBotItems",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFill",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImageURI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNounishItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomItems",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToadItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTrait", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTraitBytes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWizardItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layerIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFillPalette",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayerIndexes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraitPalette",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraitPaletteIndexes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "traitPalette",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traitPaletteIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BITS_PER_COORDINATES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BITS_PER_FILL_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FILL_TAG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HEIGHT_TAG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RECT_TAG_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RECT_TAG_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SVG_TAG_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SVG_TAG_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WIDTH_TAG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Y_TAG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decode32Rects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decode8Rects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeRect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoBotAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoBotBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoBotImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoBotItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNounishItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToadItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrait", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTraitBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWizardItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFillPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraitPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraitPaletteIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traitPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traitPaletteIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class CoBotsRenderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoBotsRendererInterface;

  functions: {
    BITS_PER_COORDINATES(overrides?: CallOverrides): Promise<[number]>;

    BITS_PER_FILL_INDEX(overrides?: CallOverrides): Promise<[number]>;

    FILL_TAG(overrides?: CallOverrides): Promise<[string]>;

    HEIGHT_TAG(overrides?: CallOverrides): Promise<[string]>;

    RECT_TAG_END(overrides?: CallOverrides): Promise<[string]>;

    RECT_TAG_START(overrides?: CallOverrides): Promise<[string]>;

    SVG_TAG_END(overrides?: CallOverrides): Promise<[string]>;

    SVG_TAG_START(overrides?: CallOverrides): Promise<[string]>;

    WIDTH_TAG(overrides?: CallOverrides): Promise<[string]>;

    Y_TAG(overrides?: CallOverrides): Promise<[string]>;

    decode32Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decode8Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "decodeRect(bytes)"(
      rectBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "decodeRect(bytes,uint8,uint8)"(
      rectBytes: BytesLike,
      offsetX: BigNumberish,
      offsetY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fillPalette(overrides?: CallOverrides): Promise<[string]>;

    getCoBotAttributes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCoBotBytes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCoBotImageURI(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCoBotItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    getFill(_index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getImageURI(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNounishItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getRandomItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getToadItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getTrait(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTraitBytes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTraitIndex(
      _layerIndex: BigNumberish,
      _itemIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWizardItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    layerIndexes(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFillPalette(
      _fillPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLayerIndexes(
      _layerIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraitPalette(
      _traitPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraitPaletteIndexes(
      _traitPaletteIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    traitPalette(overrides?: CallOverrides): Promise<[string]>;

    traitPaletteIndexes(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BITS_PER_COORDINATES(overrides?: CallOverrides): Promise<number>;

  BITS_PER_FILL_INDEX(overrides?: CallOverrides): Promise<number>;

  FILL_TAG(overrides?: CallOverrides): Promise<string>;

  HEIGHT_TAG(overrides?: CallOverrides): Promise<string>;

  RECT_TAG_END(overrides?: CallOverrides): Promise<string>;

  RECT_TAG_START(overrides?: CallOverrides): Promise<string>;

  SVG_TAG_END(overrides?: CallOverrides): Promise<string>;

  SVG_TAG_START(overrides?: CallOverrides): Promise<string>;

  WIDTH_TAG(overrides?: CallOverrides): Promise<string>;

  Y_TAG(overrides?: CallOverrides): Promise<string>;

  decode32Rects(
    rectsBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  decode8Rects(
    rectsBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "decodeRect(bytes)"(
    rectBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "decodeRect(bytes,uint8,uint8)"(
    rectBytes: BytesLike,
    offsetX: BigNumberish,
    offsetY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fillPalette(overrides?: CallOverrides): Promise<string>;

  getCoBotAttributes(
    items: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    status: boolean,
    color: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getCoBotBytes(
    items: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<string>;

  getCoBotImageURI(
    items: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<string>;

  getCoBotItems(
    tokenId: BigNumberish,
    seed: BigNumberish,
    status: boolean,
    color: boolean,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getFill(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getImageURI(
    traitEncodedBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNounishItems(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      eyesIndex: BigNumber;
      mouthIndex: BigNumber;
      antennaIndex: BigNumber;
      feetIndex: BigNumber;
    }
  >;

  getRandomItems(
    tokenId: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      eyesIndex: BigNumber;
      mouthIndex: BigNumber;
      antennaIndex: BigNumber;
      feetIndex: BigNumber;
    }
  >;

  getToadItems(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      eyesIndex: BigNumber;
      mouthIndex: BigNumber;
      antennaIndex: BigNumber;
      feetIndex: BigNumber;
    }
  >;

  getTrait(
    traitEncodedBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTraitBytes(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTraitIndex(
    _layerIndex: BigNumberish,
    _itemIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWizardItems(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      eyesIndex: BigNumber;
      mouthIndex: BigNumber;
      antennaIndex: BigNumber;
      feetIndex: BigNumber;
    }
  >;

  layerIndexes(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFillPalette(
    _fillPalette: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLayerIndexes(
    _layerIndexes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraitPalette(
    _traitPalette: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraitPaletteIndexes(
    _traitPaletteIndexes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: BigNumberish,
    seed: BigNumberish,
    status: boolean,
    color: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  traitPalette(overrides?: CallOverrides): Promise<string>;

  traitPaletteIndexes(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BITS_PER_COORDINATES(overrides?: CallOverrides): Promise<number>;

    BITS_PER_FILL_INDEX(overrides?: CallOverrides): Promise<number>;

    FILL_TAG(overrides?: CallOverrides): Promise<string>;

    HEIGHT_TAG(overrides?: CallOverrides): Promise<string>;

    RECT_TAG_END(overrides?: CallOverrides): Promise<string>;

    RECT_TAG_START(overrides?: CallOverrides): Promise<string>;

    SVG_TAG_END(overrides?: CallOverrides): Promise<string>;

    SVG_TAG_START(overrides?: CallOverrides): Promise<string>;

    WIDTH_TAG(overrides?: CallOverrides): Promise<string>;

    Y_TAG(overrides?: CallOverrides): Promise<string>;

    decode32Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    decode8Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "decodeRect(bytes)"(
      rectBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "decodeRect(bytes,uint8,uint8)"(
      rectBytes: BytesLike,
      offsetX: BigNumberish,
      offsetY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fillPalette(overrides?: CallOverrides): Promise<string>;

    getCoBotAttributes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getCoBotBytes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    getCoBotImageURI(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    getCoBotItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getFill(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getImageURI(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNounishItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getRandomItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getToadItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    getTrait(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTraitBytes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTraitIndex(
      _layerIndex: BigNumberish,
      _itemIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWizardItems(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        eyesIndex: BigNumber;
        mouthIndex: BigNumber;
        antennaIndex: BigNumber;
        feetIndex: BigNumber;
      }
    >;

    layerIndexes(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFillPalette(
      _fillPalette: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayerIndexes(
      _layerIndexes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraitPalette(
      _traitPalette: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraitPaletteIndexes(
      _traitPaletteIndexes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    traitPalette(overrides?: CallOverrides): Promise<string>;

    traitPaletteIndexes(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    BITS_PER_COORDINATES(overrides?: CallOverrides): Promise<BigNumber>;

    BITS_PER_FILL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    FILL_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    HEIGHT_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    RECT_TAG_END(overrides?: CallOverrides): Promise<BigNumber>;

    RECT_TAG_START(overrides?: CallOverrides): Promise<BigNumber>;

    SVG_TAG_END(overrides?: CallOverrides): Promise<BigNumber>;

    SVG_TAG_START(overrides?: CallOverrides): Promise<BigNumber>;

    WIDTH_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    Y_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    decode32Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decode8Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeRect(bytes)"(
      rectBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeRect(bytes,uint8,uint8)"(
      rectBytes: BytesLike,
      offsetX: BigNumberish,
      offsetY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillPalette(overrides?: CallOverrides): Promise<BigNumber>;

    getCoBotAttributes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoBotBytes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoBotImageURI(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoBotItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFill(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImageURI(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNounishItems(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToadItems(overrides?: CallOverrides): Promise<BigNumber>;

    getTrait(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraitBytes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraitIndex(
      _layerIndex: BigNumberish,
      _itemIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWizardItems(overrides?: CallOverrides): Promise<BigNumber>;

    layerIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFillPalette(
      _fillPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLayerIndexes(
      _layerIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraitPalette(
      _traitPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraitPaletteIndexes(
      _traitPaletteIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traitPalette(overrides?: CallOverrides): Promise<BigNumber>;

    traitPaletteIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BITS_PER_COORDINATES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BITS_PER_FILL_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FILL_TAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HEIGHT_TAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RECT_TAG_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RECT_TAG_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVG_TAG_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVG_TAG_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WIDTH_TAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Y_TAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decode32Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decode8Rects(
      rectsBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeRect(bytes)"(
      rectBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeRect(bytes,uint8,uint8)"(
      rectBytes: BytesLike,
      offsetX: BigNumberish,
      offsetY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillPalette(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCoBotAttributes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoBotBytes(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoBotImageURI(
      items: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoBotItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFill(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImageURI(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNounishItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomItems(
      tokenId: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToadItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrait(
      traitEncodedBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraitBytes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraitIndex(
      _layerIndex: BigNumberish,
      _itemIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWizardItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    layerIndexes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFillPalette(
      _fillPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLayerIndexes(
      _layerIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraitPalette(
      _traitPalette: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraitPaletteIndexes(
      _traitPaletteIndexes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      seed: BigNumberish,
      status: boolean,
      color: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traitPalette(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traitPaletteIndexes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
